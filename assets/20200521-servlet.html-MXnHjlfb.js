import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as t}from"./app-WwTsJovB.js";const e="/zzdxy/assets/format_png-20240216200359741-5-P4tsx1.png",p="/zzdxy/assets/watermark_type_ZmFuZ3poZW5naGVpdGk_shadow_10_text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ___size_16_color_FFFFFF_t_70-20240216200359719-g_nudBKD.png",o="/zzdxy/assets/format_png-20240216200359710-3ME2_pLP.png",c="/zzdxy/assets/format_png-20240216200359722-KW1JePbY.png",l="/zzdxy/assets/format_png-20240216200359697-KzprzuS9.png",i="/zzdxy/assets/format_png-20240216200359733-Fv_eUfAT.png",u="/zzdxy/assets/format_png-20240216200359759-9deuWJZe.png",r="/zzdxy/assets/format_png-20240216200359741-5-P4tsx1.png",d="/zzdxy/assets/format_png-20240216200359765-b11OTFuV.png",k="/zzdxy/assets/format_png-20240216200359782-4WaliVn_.png",v={},m=t(`<h1 id="servlet-详细教程" tabindex="-1"><a class="header-anchor" href="#servlet-详细教程" aria-hidden="true">#</a> Servlet 详细教程</h1><h2 id="_1-servlet-程序" tabindex="-1"><a class="header-anchor" href="#_1-servlet-程序" aria-hidden="true">#</a> 1. Servlet 程序</h2><h3 id="_1-1-什么是-servlet" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是-servlet" aria-hidden="true">#</a> 1.1 什么是 Servlet</h3><ol><li>Servlet 是 JavaEE 规范（接口）之一</li><li>Servlet 是 JavaWeb 三大组件之一，三大组件分别是：<strong>Servlet 程序、Filter 过滤器、Listener 监听器</strong></li><li>Servlet 是运行在服务器上的 Java 小程序，用于 <strong>接收客户端发送的数据，同时响应给客户端</strong></li></ol><h3 id="_1-2-如何手动创建实现-servlet-接口" tabindex="-1"><a class="header-anchor" href="#_1-2-如何手动创建实现-servlet-接口" aria-hidden="true">#</a> 1.2 如何手动创建实现 Servlet 接口</h3><ol><li><p>首先编写一个类，用于实现 Servlet 接口</p></li><li><p>重写 service 方法，用于处理客户端请求，同时响应数据</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cunyu<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Created with IntelliJ IDEA.
 * Version : 1.0
 * Author  : 村雨遥
 * Email   : cunyu1024@foxmail.com
 * Website : https://cunyu1943.github.io
 * 公众号   ：村雨遥
 * Date    : 2020/6/4 下午3:08
 * Project : JavaLearning
 * Package : com.cunyu.servlet
 * Class   : HelloServlet
 * Desc    : Hello 启动页
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * service 专门用于处理请求和响应的方法
     *
     * <span class="token keyword">@param</span> <span class="token parameter">req</span>  请求
     * <span class="token keyword">@param</span> <span class="token parameter">resp</span> 响应
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Servlet，My first Servlet App！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>完成上述步骤后，去 <code>web.xml</code> 中配置 Servlet 接口的访问地址</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    
    <span class="token comment">&lt;!--  给 Tomcat 配置 Servlet 程序 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--    Servlet 程序别名（建议为类名）    --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--    Servlet 程序的全类名    --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.cunyu.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--  给 Servlet 程序配置访问地址  --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--    告诉服务器，当前配置的地址给哪个 Servlet 程序使用    --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--    配置访问地址，表示地址为 http://ip:port/工程路径/hello    --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>启动 Tomcat 在浏览器中访问 <code>http://localhost:8080/servletTest/hello</code>，然后后台就会执行 <code>service()</code> 方法</li></ol><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-3-servlet-的生命周期" tabindex="-1"><a class="header-anchor" href="#_1-3-servlet-的生命周期" aria-hidden="true">#</a> 1.3 Servlet 的生命周期</h3><ol><li>执行 Servlet 构造器方法，只在第一次访问时创建 Servlet 程序会调用</li><li>执行 <code>init</code> 初始化方法，只在第一次访问时创建 Servlet 程序会调用</li><li>执行 <code>service()</code> 方法，每次访问均调用</li><li>执行 <code>destory()</code> 销毁方法，Web 工程停止时调用</li></ol><h3 id="_1-4-如何通过-idea-快速创建-servlet-程序" tabindex="-1"><a class="header-anchor" href="#_1-4-如何通过-idea-快速创建-servlet-程序" aria-hidden="true">#</a> 1.4 如何通过 IDEA 快速创建 Servlet 程序</h3><p>选中 <code>src</code> 目录或者要生成 Servlet 的包，然后单击鼠标右键，<code>New -&gt; Create New Servlet</code>，接着填写 Servlet 程序名，所属包以及 Servlet 全类名，同时 <strong>取消勾选</strong> Java EE 6 即可，勾选则会生成注解式配置，后续学习过程中才会接触到。</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击生成之后，就会生成 Servlet 程序以及在 <code>web.xml</code> 中的配置。</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-5-整个-servlet-类的继承体系" tabindex="-1"><a class="header-anchor" href="#_1-5-整个-servlet-类的继承体系" aria-hidden="true">#</a> 1.5 整个 Servlet 类的继承体系</h3><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-servletconfig-类" tabindex="-1"><a class="header-anchor" href="#_2-servletconfig-类" aria-hidden="true">#</a> 2. ServletConfig 类</h2><p>从类名上就可以看出，ServletConfig 是一个配置信息类。Servlet 程序和 ServletConfig 对象均由 Tomcat 创建，而我们只要使用就可以了。此外，Servlet 程序默认是在第一次访问时就创建了，而 <strong>ServletConfig 对象则是每个 Servlet 程序创建时所对应创建</strong>。</p><h3 id="_2-1-servletconfig-类的三大作用" tabindex="-1"><a class="header-anchor" href="#_2-1-servletconfig-类的三大作用" aria-hidden="true">#</a> 2.1 ServletConfig 类的三大作用</h3><ol><li>获取 Servlet 程序的别名，即 <code>web.xml</code> 中配置的 <code>servlet-name</code></li><li>获取初始化参数，即 <code>web.xml</code> 中配置的 <code>init-param</code></li><li>获取 ServletContext 对象</li></ol><p>加入我们的 <code>web.xml</code> 配置如下，然后就可以利用 初始化方法来获取上述三个值：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--  给 Tomcat 配置 Servlet 程序 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--    Servlet 程序别名（建议为类名）    --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--    Servlet 程序的全类名    --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.cunyu.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>userName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>


    <span class="token comment">&lt;!--  给 Servlet 程序配置访问地址  --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--    告诉服务器，当前配置的地址给哪个 Servlet 程序使用    --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--    配置访问地址，表示地址为 http://ip:port/工程路径/hello    --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cunyu<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletConfig</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Created with IntelliJ IDEA.
 * Version : 1.0
 * Author  : 村雨遥
 * Email   : cunyu1024@foxmail.com
 * Website : https://cunyu1943.github.io
 * 公众号   ：村雨遥
 * Date    : 2020/6/4 下午3:08
 * Project : JavaLearning
 * Package : com.cunyu.servlet
 * Class   : HelloServlet
 * Desc    : Hello 启动页
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * service 专门用于处理请求和响应的方法
     *
     * <span class="token keyword">@param</span> <span class="token parameter">req</span>  请求
     * <span class="token keyword">@param</span> <span class="token parameter">resp</span> 响应
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Servlet，My first Servlet App！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;初始化方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        获取 Servlet 程序别名 servlet-name</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;别名：&quot;</span> <span class="token operator">+</span> config<span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        获取初始化参数 init-param</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;初始化参数：&quot;</span> <span class="token operator">+</span> config<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;userName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        获取 ServletContext 对象</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-servletcontext-类" tabindex="-1"><a class="header-anchor" href="#_3-servletcontext-类" aria-hidden="true">#</a> 3. ServletContext 类</h2><h3 id="_3-1-servletcontext-是啥" tabindex="-1"><a class="header-anchor" href="#_3-1-servletcontext-是啥" aria-hidden="true">#</a> 3.1 ServletContext 是啥</h3><ol><li><p>ServletContext 是一个接口，用于表示 Servlet 上下文对象</p></li><li><p>ServletContext 对象是一个 <strong>域对象</strong></p></li><li><p>每个 Web 工程只对应 <strong>一个</strong> ServletContext 对象实例</p></li><li><p>每个 ServletContext 在 Web 工程部署启动时创建，然后在 Web 工程停止时销毁</p></li></ol><h3 id="_3-2-servletcontext-的作用" tabindex="-1"><a class="header-anchor" href="#_3-2-servletcontext-的作用" aria-hidden="true">#</a> 3.2 ServletContext 的作用</h3><ol><li>获取 <code>web.xml</code> 配置中的上下文参数 <code>context-param</code></li><li>获取当前 Web 工程路径，如 <code>/ServletTest</code></li><li>获取工程部署后在服务器的中的绝对路径，包括各种静态资源等路径</li><li>ServletContext 是通过 <strong>键值对（Map）</strong> 一样存取数据</li></ol><p>以下对上述 4 个作用进行实例介绍，首先在 <code>web.xml</code> 加入如下配置，然后通过程序来获取各种参数：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--context-param 是上下文参数，属于 Web 工程--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>wechat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>cunyu1943<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>ServletContextServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.cunyu.servlet.ServletContextServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>ServletContextServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/servletContext<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cunyu<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Created with IntelliJ IDEA.
 * Version : 1.0
 * Author  : 村雨遥
 * Email   : cunyu1024@foxmail.com
 * Website : https://cunyu1943.github.io
 * 公众号   ：村雨遥
 * Date    : 2020/6/5 上午8:36
 * Project : JavaLearning
 * Package : $<span class="token punctuation">{</span>PACKAGE_NAME<span class="token punctuation">}</span>
 * Class   : $<span class="token punctuation">{</span>CLASS_NAME<span class="token punctuation">}</span>
 * Desc    : ServletContext 功能
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletContextServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token comment">//        1. 获取上下文参数 context-param</span>
        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;URL 的值是：&quot;</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        2. 获取工程路径</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;工程路径：&quot;</span> <span class="token operator">+</span> servletContext<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        3. 获取工程部署后服务器上的绝对路径</span>
<span class="token comment">//        其中 / 被解析为：http://ip:port/工程名/ ，映射到 IDEA 代码的 web 目录</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;工程部署绝对路径：&quot;</span> <span class="token operator">+</span> servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        4. 通过 键值对 存取数据，注意：ServletContext 属于 Web 工程，所以只要工程启动创建之后，Servlet 程序都能访问，直到关停 Web 工程</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ServletContext 对象:&quot;</span> <span class="token operator">+</span> servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        存数据</span>
        servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1234567&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        取数据</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;password 的值是：&quot;</span> <span class="token operator">+</span> servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-http-协议" tabindex="-1"><a class="header-anchor" href="#_4-http-协议" aria-hidden="true">#</a> 4. HTTP 协议</h2><h3 id="_4-1-什么是-http-协议" tabindex="-1"><a class="header-anchor" href="#_4-1-什么是-http-协议" aria-hidden="true">#</a> 4.1 什么是 HTTP 协议</h3><p><strong>协议</strong> 即指两方或多方通过一定协商约定后，大家都要遵守的规则，叫做协议。</p><p>而 <strong>HTTP 协议</strong> ，即指 <strong>客户端和服务器之间互相通信时，发送数据时所需要遵守的规则</strong>，HTTP 协议中的数据又叫做 <strong>报文</strong>。</p><h3 id="_4-2-请求的-http-协议格式" tabindex="-1"><a class="header-anchor" href="#_4-2-请求的-http-协议格式" aria-hidden="true">#</a> 4.2 请求的 HTTP 协议格式</h3><p>客户端向服务器发送数据的行为叫做 <strong>请求</strong>，而服务器向客户端回传数据的行为叫做 <strong>响应</strong>。</p><h4 id="get-请求" tabindex="-1"><a class="header-anchor" href="#get-请求" aria-hidden="true">#</a> GET 请求</h4><p>由 <strong>请求行 + 请求头</strong> 组成，其中 <strong>请求行</strong> 包括 <strong>请求的方式、请求的资源路径以及请求的协议版本号</strong>，而 <strong>请求头</strong> 则是由 <code>key-value</code> 对组成，不同键值对对应不同含义，具体请看如下图实例。GET 请求最常用的地方：</p><ol><li><code>form</code> 标签 <code>method=get</code></li><li><code>a</code> 标签</li><li><code>link</code> 标签引入 <code>css</code></li><li><code>Script</code> 标签引入 <code>js</code></li><li><code>img</code> 标签引入图片</li><li><code>iframe</code> 引入 HTML 页面</li><li>浏览器中地址栏输入地址后回车</li></ol><figure><img src="`+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="post-请求" tabindex="-1"><a class="header-anchor" href="#post-请求" aria-hidden="true">#</a> POST 请求</h4><p>POST 请求和 GET 的最大区别在于 <strong>请求头（即发送给服务器的数据）</strong>，POST 由 <strong>请求行 + 请求头 + 请求体</strong> 组成，其中请求行与请求头的含义和 GET 请求的含义相同，而 <strong>请求头则是 POST 方式独有</strong>，具体含义如下，最常用的地方：</p><ol><li><code>form</code> 标签 <code>method=post</code></li></ol><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-3-响应的-http-协议格式" tabindex="-1"><a class="header-anchor" href="#_4-3-响应的-http-协议格式" aria-hidden="true">#</a> 4.3 响应的 HTTP 协议格式</h3><p>响应主要由 <strong>响应行 + 响应头 + 响应体</strong> 共同组成，响应行中又包括 <strong>响应的协议和版本号、响应状态码以及响应状态描述符</strong>，而 <strong>响应头则是同样由不同的键值对组成</strong>，<strong>响应体中则是回传给客户端的数据</strong>，具体看下边的示例：</p><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-4-常用响应码" tabindex="-1"><a class="header-anchor" href="#_4-4-常用响应码" aria-hidden="true">#</a> 4.4 常用响应码</h3><table><thead><tr><th>响应码</th><th>说明</th></tr></thead><tbody><tr><td>200</td><td>请求成功</td></tr><tr><td>302</td><td>请求重定向</td></tr><tr><td>404</td><td>请求服务器已经收到，但需要的数据不存在（请求地址错误）</td></tr><tr><td>500</td><td>服务器已经收到请求，但服务器内部错误（代码错误）</td></tr></tbody></table><h3 id="_4-5-mime-类型说明" tabindex="-1"><a class="header-anchor" href="#_4-5-mime-类型说明" aria-hidden="true">#</a> 4.5 MIME 类型说明</h3><p>MIME 全称 <strong>多功能 Internet 邮件扩充服务</strong> <code>（Multipurpose Internet Mail Extension）</code> ，是 HTTP 协议中的数据类型，格式是 <strong>大类型/小类型</strong>，并与某种文件扩展名相对应，最常见的 MIME 类型如下：</p><table><thead><tr><th>文件类型</th><th>文件扩展名</th><th>MIME 类型</th></tr></thead><tbody><tr><td>超文本标记语言文本</td><td><code>.html、.htm</code></td><td><code>text/html</code></td></tr><tr><td>普通文本</td><td><code>.txt</code></td><td><code>text/plain</code></td></tr><tr><td>RTF 文本</td><td><code>.rtf</code></td><td><code>application/rtg</code></td></tr><tr><td>GIF 图形</td><td><code>.gif</code></td><td><code>image/gif</code></td></tr><tr><td>JPEG 图形</td><td><code>.jpeg、.jpg</code></td><td><code>image/jpeg</code></td></tr><tr><td>au 声音文件</td><td><code>.au</code></td><td><code>audio/basic</code></td></tr><tr><td>MIDI 音乐文件</td><td><code>.mid、.midi</code></td><td><code>audio/midi、audio/x-midi</code></td></tr><tr><td>RealAudio 音乐文件</td><td><code>.ra、.ram</code></td><td><code>audio/x-pn-realaudio</code></td></tr><tr><td>MPEG 文件</td><td><code>.mpg、.mpeg</code></td><td><code>video/mpeg</code></td></tr><tr><td>AVI 文件</td><td><code>.avi</code></td><td><code>video/x-msvideo</code></td></tr><tr><td>GZIP 文件</td><td><code>.gz</code></td><td><code>application/x-gzip</code></td></tr><tr><td>TAR 文件</td><td><code>.tar</code></td><td><code>application/x-tar</code></td></tr></tbody></table><h2 id="_5-httpservletrequest-类" tabindex="-1"><a class="header-anchor" href="#_5-httpservletrequest-类" aria-hidden="true">#</a> 5 HttpServletRequest 类</h2><h3 id="_5-1-httpservletrequest-类的作用" tabindex="-1"><a class="header-anchor" href="#_5-1-httpservletrequest-类的作用" aria-hidden="true">#</a> 5.1 HttpServletRequest 类的作用</h3><p>当每次 Tomcat 服务器接收到来自浏览器的请求时，Tomcat 服务器都会把请求过来的 HTTP 协议信息解析好封装到 <code>Request</code> 对象中，然后传递到 <code>service</code> 方法（<code>doGet</code> 和 <code>doPost</code>）供浏览器使用。而我们则可以通过 <code>HttpServletRequest</code> 对象获取到 <strong>所有请求的信息</strong>。</p><h3 id="_5-2-httpservletrequest-类常用方法" tabindex="-1"><a class="header-anchor" href="#_5-2-httpservletrequest-类常用方法" aria-hidden="true">#</a> 5.2 HttpServletRequest 类常用方法</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>getRequestURI()</code></td><td>获取请求的资源路径</td></tr><tr><td><code>getRequestURL()</code></td><td>获取请求的统一资源定位符（绝对路径）</td></tr><tr><td><code>getRemoteHost()</code></td><td>获取客户端的 ip</td></tr><tr><td><code>getHeader()</code></td><td>获取请求头</td></tr><tr><td><code>getParameter()</code></td><td>获取请求的参数</td></tr><tr><td><code>getParameterValues()</code></td><td>获取请求的参数（多个值）</td></tr><tr><td><code>getMethod()</code></td><td>获取请求的方式 GET 或 POST</td></tr><tr><td><code>setAttribute(key, value)</code></td><td>设置域数据</td></tr><tr><td><code>getAttribute(key)</code></td><td>获取域数据</td></tr><tr><td><code>getRequestDispatcher()</code></td><td>获取请求转发对象</td></tr></tbody></table><h3 id="_5-3-post-和-get-请求方式的中文乱码问题" tabindex="-1"><a class="header-anchor" href="#_5-3-post-和-get-请求方式的中文乱码问题" aria-hidden="true">#</a> 5.3 POST 和 GET 请求方式的中文乱码问题</h3><p>当以 POST 或 GET 方式请求时，遇到中文可能会出现乱码，对应解决方法如下：</p><ul><li><strong>POST 方式</strong>：直接将请求体的字符集设置为 UTF-8 即可</li><li><strong>GET 方式</strong>：先以 iso8859-1 进行编码，然后再以 UTF-8 进行解码</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cunyu<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Created with IntelliJ IDEA.
 * Version : 1.0
 * Author  : 村雨遥
 * Email   : cunyu1024@foxmail.com
 * Website : https://cunyu1943.github.io
 * 公众号   ：村雨遥
 * Date    : 2020/6/6 下午9:18
 * Project : JavaLearning
 * Package : $<span class="token punctuation">{</span>PACKAGE_NAME<span class="token punctuation">}</span>
 * Class   : $<span class="token punctuation">{</span>CLASS_NAME<span class="token punctuation">}</span>
 * Desc    : 获取请求参数中文乱码问题
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParameterServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token comment">//        POST 中文乱码，设置请求体字符集 UTF-8，要在获取参数前调用</span>
        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;hobby&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        GET 中文乱码</span>
<span class="token comment">//        先以 iso8859-1 进行编码</span>
<span class="token comment">//        然后以 UTF-8 进行解码</span>
        username <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;ISO-8859-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;用户名：&quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;密码：&quot;</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-请求的转发" tabindex="-1"><a class="header-anchor" href="#_5-4-请求的转发" aria-hidden="true">#</a> 5.4 请求的转发</h3><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h4><p>请求的转发即 <strong>当服务器收到来自客户端的请求时，从一个资源跳转到另一个资源的操作</strong>。</p><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h4><ul><li>地址栏未变</li><li>属于一次请求</li><li>共享 Request 域中的参数</li><li>可以转发到 WEB-INF 目录下</li><li>不能访问工程之外的资源</li></ul><h3 id="_5-5-base-标签的作用" tabindex="-1"><a class="header-anchor" href="#_5-5-base-标签的作用" aria-hidden="true">#</a> 5.5 base 标签的作用</h3><p>用于设置页面相对路径工作时参照的路径，参照某一地址进行跳转。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https:cunyu1943.github.io<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-6-web-中-的不同意义" tabindex="-1"><a class="header-anchor" href="#_5-6-web-中-的不同意义" aria-hidden="true">#</a> 5.6 Web 中 / 的不同意义</h3><p>在 Web 中 / 是一种绝对路径，若 <strong>被浏览器解析</strong>，则得到的地址是 ：<code>http:/ip:port/</code>；若 <strong>被服务器解析</strong>，则得到的地址是：<code>http://ip:port/工程路径</code>。</p><p><strong>注意： <code>response.sendRedirect(&quot;/&quot;);</code></strong>，表示将 / 发送给浏览器解析，得到 <code>http://ip:port/</code></p><h2 id="_6-httpservletresponse-类" tabindex="-1"><a class="header-anchor" href="#_6-httpservletresponse-类" aria-hidden="true">#</a> 6. HttpServletResponse 类</h2><h3 id="_6-1-httpservletresponse-的作用" tabindex="-1"><a class="header-anchor" href="#_6-1-httpservletresponse-的作用" aria-hidden="true">#</a> 6.1 HttpServletResponse 的作用</h3><p>同 <code>HttpServletRequest</code> 类一样，当每次来自客户端的请求进来时，服务器都会创建一个 <code>Response</code> 对象，然后传递给 Servlet 程序使用。<strong><code>HttpServletRequest</code> 表示请求过来的信息，<code>HttpServletResponse</code> 则表示所有响应的信息。</strong> 当设置服务器返回给客户端信息时，通过 <code>HttpServletResponse</code> 对象进行。</p><h3 id="_6-2-两个输出流" tabindex="-1"><a class="header-anchor" href="#_6-2-两个输出流" aria-hidden="true">#</a> 6.2 两个输出流</h3><p>输出流分为 <strong>字节流和字符流</strong>，两者对应的方法和功能如下表所示，当我们使用时，<strong>只能同时使用其中之一</strong> 。</p><table><thead><tr><th>输出流类型</th><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>字节流</td><td><code>getOutputStream()</code></td><td>常用于下载（传递二进制数据）</td></tr><tr><td>字符流</td><td><code>getWriter()</code></td><td>常用于回传字符串</td></tr></tbody></table><h3 id="_6-3-如何向客户端回传数据及中文乱码" tabindex="-1"><a class="header-anchor" href="#_6-3-如何向客户端回传数据及中文乱码" aria-hidden="true">#</a> 6.3 如何向客户端回传数据及中文乱码</h3><p>通常我们需要向客户端回传数据，如果是回传字符串等数据，我们可以使用 <strong>字符流方法 <code>getWriter()</code></strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseIOServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpSevletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
        <span class="token comment">// 向客户端回传 字符串 数据</span>
        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;response&#39;s content!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但当我们回传中文时，可能会出现乱码问题，为了解决这一问题，通常有两种解决方案：</p><ol><li>设置服务器字符集为 UTF-8，同时通过响应头设置浏览器也使用 UTF-8 字符集</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 设置服务器字符集</span>
resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 通过响应头设置浏览器字符集</span>
resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>同时设置服务器和客户端均使用 UTF-8 字符集，但是必须在获取流对象之前调用，<strong>更为推荐</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 同时设置服务器和客户端字符集</span>
resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-请求重定向" tabindex="-1"><a class="header-anchor" href="#_6-4-请求重定向" aria-hidden="true">#</a> 6.4 请求重定向</h3><h4 id="定义-1" tabindex="-1"><a class="header-anchor" href="#定义-1" aria-hidden="true">#</a> 定义</h4><p>请求重定向是 <strong>指客户端给服务器发送请求，然后服务器回传给客户端一些地址，然客户端去访问。之所以叫做重定向，是因为之前的地址可能已经被废弃</strong>。</p><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="特点-1" tabindex="-1"><a class="header-anchor" href="#特点-1" aria-hidden="true">#</a> 特点</h4><ol><li>地址栏变化</li><li>两次请求</li><li>不共享 Request 域中数据</li><li>不能重定向到 WEB-INF 目录下资源</li><li>能访问工程外的资源</li></ol><h4 id="实现重定向的两种方式" tabindex="-1"><a class="header-anchor" href="#实现重定向的两种方式" aria-hidden="true">#</a> 实现重定向的两种方式</h4><ol><li>设置响应状态码 302 表示重定向，然后通过设置响应头说明新地址</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 设置响应状态码</span>
resp<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 通过设置响应头，说明新地址</span>
resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Location&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://cunyu1943.github.io&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>直接使用 <code>sendRedirect()</code> 方法设置新地址即可，<strong>更为推荐</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;https://cunyu1943.github.io&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,104),g=[m];function b(h,x){return s(),a("div",null,g)}const y=n(v,[["render",b],["__file","20200521-servlet.html.vue"]]);export{y as default};
