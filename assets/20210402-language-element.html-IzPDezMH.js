import{_ as e}from"./wechatpublic-eLo-9ai1.js";import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o,c as a,d as n,e as c}from"./app-Svquv1Du.js";const s="/zzdxy/assets/6c30e489e6cb42b5fb1d361a8dc059b5-liEf4zka.webp",i="/zzdxy/assets/ea4642873c6d8ffa309c941738d51b0b-8rot1Dz1.webp",r={},p=c(`<h1 id="语言元素" tabindex="-1"><a class="header-anchor" href="#语言元素" aria-hidden="true">#</a> 语言元素</h1><div class="hint-container info"><p class="hint-container-title">共勉</p><p>不要哀求，学会争取。若是如此，终有所获。</p></div><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>之前的文章中，我们已经对 Python 有所了解了，并且也学会了 Pycharm 的安装及使用。现在该开始正式进入主题了，接下来就要学习 Python 的相关语法，以及如何使用他们进行编程。</p><p>今天主要内容就介绍 Python 中的如下知识点：</p><ol><li><strong>变量</strong></li><li><strong>数据类型</strong></li><li><strong>运算符</strong></li></ol><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><h3 id="什么是变量" tabindex="-1"><a class="header-anchor" href="#什么是变量" aria-hidden="true">#</a> 什么是变量</h3><p>所谓变量，其实一开始是源自于数学。而在计算机语言中，变量指的是 <strong>能够存储计算结果或者能够表示值的抽象概念</strong>。</p><p>我们可以通过变量名来访问变量，在 Python 中，变量通常是可变的，它不仅仅能够表示数字，还能是任意数据类型。</p><h3 id="变量命名规则" tabindex="-1"><a class="header-anchor" href="#变量命名规则" aria-hidden="true">#</a> 变量命名规则</h3><p>Python 中，是通过标识符来给变量命名，而标识符就是用于给程序中变量、类、方法命名的符号。简单来说，标识符就是合法的名字。而什么是合法的名字呢？那我们就来看看 Python 中标识符的命名规则。</p><p>Python 中，标识符 <strong>必须以字母、下划线开头，然后后面可以跟上任意数目的字母、数字以及下划线，而且也区分大小写</strong>。总结起来就是如下几点：</p><ol><li><p><strong>变量名只能包含字母、数字和下划线，而且只能以字母或下划线开头，不能以数字开头</strong>，比如我们可以把一个变量命名为 <code>cunyu_1943、_cunyu1943</code> 但是不能命名为 <code>1943_cunyu</code>；</p></li><li><p><strong>变量名中间不能包含空格，但是可以用下划线来进行分割</strong>，比如可以命名为 <code>student_name</code>，但不能命名为 <code>student name</code>；</p></li><li><p><strong>变量名应该尽量简短切具有描述性</strong>，比如我们变量名为 <code>name</code>，那别人一看就知道这是表示名字的，但如果我们命名为 <code>n</code>，那可能就得花更多的时间来搞清楚它到底是啥意思；</p></li><li><p><strong>不要把 Python 中的关键字和内置函数名用做变量名</strong>，Python 中常见的关键字和内置函数如下表；</p></li></ol><table><thead><tr><th style="text-align:left;">关键字</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>and</code></td><td style="text-align:left;">逻辑运算符</td></tr><tr><td style="text-align:left;"><code>as</code></td><td style="text-align:left;">创建别名</td></tr><tr><td style="text-align:left;"><code>assert</code></td><td style="text-align:left;">用于调试</td></tr><tr><td style="text-align:left;"><code>break</code></td><td style="text-align:left;">跳出循环</td></tr><tr><td style="text-align:left;"><code>class</code></td><td style="text-align:left;">定义类</td></tr><tr><td style="text-align:left;"><code>continue</code></td><td style="text-align:left;">继续循环的下一个迭代</td></tr><tr><td style="text-align:left;"><code>def</code></td><td style="text-align:left;">定义函数</td></tr><tr><td style="text-align:left;"><code>del</code></td><td style="text-align:left;">删除对象</td></tr><tr><td style="text-align:left;"><code>elif</code></td><td style="text-align:left;">在条件语句中使用，等同于 else if</td></tr><tr><td style="text-align:left;"><code>else</code></td><td style="text-align:left;">用于条件语句</td></tr><tr><td style="text-align:left;"><code>except</code></td><td style="text-align:left;">处理异常，发生异常时如何执行</td></tr><tr><td style="text-align:left;"><code>False</code></td><td style="text-align:left;">布尔值，比较运算的结果</td></tr><tr><td style="text-align:left;"><code>finally</code></td><td style="text-align:left;">处理异常，无论是否存在异常，都将执行一段代码</td></tr><tr><td style="text-align:left;"><code>for</code></td><td style="text-align:left;">创建 for 循环</td></tr><tr><td style="text-align:left;"><code>from</code></td><td style="text-align:left;">导入模块的特定部分</td></tr><tr><td style="text-align:left;"><code>global</code></td><td style="text-align:left;">声明全局变量</td></tr><tr><td style="text-align:left;"><code>if</code></td><td style="text-align:left;">写一个条件语句</td></tr><tr><td style="text-align:left;"><code>import</code></td><td style="text-align:left;">导入模块</td></tr><tr><td style="text-align:left;"><code>in</code></td><td style="text-align:left;">检查列表、元组等集合中是否存在某个值</td></tr><tr><td style="text-align:left;"><code>is</code></td><td style="text-align:left;">测试两个变量是否相等</td></tr><tr><td style="text-align:left;"><code>lambda</code></td><td style="text-align:left;">创建匿名函数</td></tr><tr><td style="text-align:left;"><code>None</code></td><td style="text-align:left;">表示 <code>null</code> 值</td></tr><tr><td style="text-align:left;"><code>nonlocal</code></td><td style="text-align:left;">声明非局部变量</td></tr><tr><td style="text-align:left;"><code>not</code></td><td style="text-align:left;">逻辑运算符</td></tr><tr><td style="text-align:left;"><code>or</code></td><td style="text-align:left;">逻辑运算符</td></tr><tr><td style="text-align:left;"><code>pass</code></td><td style="text-align:left;"><code>null</code> 语句，一条什么都不做的语句</td></tr><tr><td style="text-align:left;"><code>raise</code></td><td style="text-align:left;">产生异常</td></tr><tr><td style="text-align:left;"><code>return</code></td><td style="text-align:left;">退出函数并返回值</td></tr><tr><td style="text-align:left;"><code>True</code></td><td style="text-align:left;">布尔值，比较运算的结果</td></tr><tr><td style="text-align:left;"><code>try</code></td><td style="text-align:left;">编写 <code>try...except</code> 语句</td></tr><tr><td style="text-align:left;"><code>while</code></td><td style="text-align:left;">创建 <code>while</code> 循环</td></tr><tr><td style="text-align:left;"><code>with</code></td><td style="text-align:left;">用于简化异常处理</td></tr><tr><td style="text-align:left;"><code>yield</code></td><td style="text-align:left;">结束函数，返回生成器</td></tr></tbody></table><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;"></th><th style="text-align:left;">内置函数</th><th style="text-align:left;"></th><th></th></tr></thead><tbody><tr><td style="text-align:left;"><code>abs()</code></td><td style="text-align:left;"><code>delattr()</code></td><td style="text-align:left;"><code>hash()</code></td><td style="text-align:left;"><code>memoryview()</code></td><td><code>set()</code></td></tr><tr><td style="text-align:left;"><code>all()</code></td><td style="text-align:left;"><code>dict()</code></td><td style="text-align:left;"><code>help()</code></td><td style="text-align:left;"><code>min()</code></td><td><code>setattr()</code></td></tr><tr><td style="text-align:left;"><code>any()</code></td><td style="text-align:left;"><code>dir()</code></td><td style="text-align:left;"><code>hex()</code></td><td style="text-align:left;"><code>next()</code></td><td><code>slice()</code></td></tr><tr><td style="text-align:left;"><code>ascii()</code></td><td style="text-align:left;"><code>divmod()</code></td><td style="text-align:left;"><code>id()</code></td><td style="text-align:left;"><code>object()</code></td><td><code>sorted()</code></td></tr><tr><td style="text-align:left;"><code>bin()</code></td><td style="text-align:left;"><code>enumerate()</code></td><td style="text-align:left;"><code>input()</code></td><td style="text-align:left;"><code>oct()</code></td><td><code>staticmethod()</code></td></tr><tr><td style="text-align:left;"><code>bool()</code></td><td style="text-align:left;"><code>eval()</code></td><td style="text-align:left;"><code>int()</code></td><td style="text-align:left;"><code>open()</code></td><td><code>str()</code></td></tr><tr><td style="text-align:left;"><code>breakpoint()</code></td><td style="text-align:left;"><code>exec()</code></td><td style="text-align:left;"><code>isinstance()</code></td><td style="text-align:left;"><code>ord()</code></td><td><code>sum()</code></td></tr><tr><td style="text-align:left;"><code>bytearray()</code></td><td style="text-align:left;"><code>filter()</code></td><td style="text-align:left;"><code>issubclass()</code></td><td style="text-align:left;"><code>pow()</code></td><td><code>super()</code></td></tr><tr><td style="text-align:left;"><code>bytes()</code></td><td style="text-align:left;"><code>float()</code></td><td style="text-align:left;"><code>iter()</code></td><td style="text-align:left;"><code>print()</code></td><td><code>tuple()</code></td></tr><tr><td style="text-align:left;"><code>callable()</code></td><td style="text-align:left;"><code>format()</code></td><td style="text-align:left;"><code>len()</code></td><td style="text-align:left;"><code>property()</code></td><td><code>type()</code></td></tr><tr><td style="text-align:left;"><code>chr()</code></td><td style="text-align:left;"><code>frozenset()</code></td><td style="text-align:left;"><code>list()</code></td><td style="text-align:left;"><code>range()</code></td><td><code>vars()</code></td></tr><tr><td style="text-align:left;"><code>classmethod()</code></td><td style="text-align:left;"><code>getattr()</code></td><td style="text-align:left;"><code>locals()</code></td><td style="text-align:left;"><code>repr()</code></td><td><code>zip()</code></td></tr><tr><td style="text-align:left;"><code>compile()</code></td><td style="text-align:left;"><code>globals()</code></td><td style="text-align:left;"><code>map()</code></td><td style="text-align:left;"><code>reversed()</code></td><td><code>__import__()</code></td></tr><tr><td style="text-align:left;"><code>complex()</code></td><td style="text-align:left;"><code>hasattr()</code></td><td style="text-align:left;"><code>max()</code></td><td style="text-align:left;"><code>round()</code></td><td></td></tr></tbody></table><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>要处理各种文本、图形、音频、视频等数据，光使用数值类型是远远不够的，我们需要更多的数据类型来定义不同的数据。在 Python 中，主要有如下几种数据类型：</p><h3 id="数字" tabindex="-1"><a class="header-anchor" href="#数字" aria-hidden="true">#</a> 数字</h3><p>数字数据类型用于存储数值，他们是 <strong>不可改变</strong> 的数据类型。也就是说，每改变一个数字数据类型，就会分配一个新的对象。</p><p>当我们给变量指定一个值时，数字对象就会被创建，而如果我们要删除这些对象的引用，就可以使用 <code>del</code> 语句；</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建对象</span>
number <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment"># 删除引用</span>
<span class="token keyword">del</span> number
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python 支持如下不同的数字类型；</p><ul><li><code>int</code>：整型（⚠️ Python 2.x 中有 <code>int</code> 和 <code>long</code> 之分，但是 Python 3.x 中只有 <code>int</code>），能够处理任意大小的整数，而且支持常见的二进制、八进制、十进制以及十六进制；</li><li><code>float</code>：浮点类型，也就是数学中的小数。一个浮点数的小数点位置是可变的，它不仅可以表示成数学写法（<code>456.78</code>），还支持科学记数法（<code>4.5678e2</code>）；</li><li><code>complex</code>：复数类型，由实部和虚部组成，形如 <code>a + bj</code> 的形式，和数学中的复数表示一样，只是把 <code>i</code> 变成了 <code>j</code>；</li></ul><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><p>以单引号或双引号括起来的任意文本，例如 <code>“cunyu1943”</code> 和 <code>‘cunyu1943’</code>，而且还可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&#39;&#39;&#39;
公众号：村雨遥
blog：cunyu1943.site
&#39;&#39;&#39;</span>

“”“
公众号：村雨遥
blog：cunyu1943<span class="token punctuation">.</span>site
”“”
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python 中字符串有 2 种取值顺序：</p><ol><li><strong>从左向右索引</strong>，索引值从 <code>0</code> 开始，最大索引值是字符串长度减 <code>1</code>；</li><li><strong>从右向左索引</strong>，索引值从 <code>-1</code> 开始，最大索引值是字符串开头；</li></ol><p>如果我们要从字符串汇总获取一小段子字符串，则可以使用 <code>[头下标:尾下标]</code> 来进行截取。注意 <strong>左闭右开</strong> 原则，即通过 <code>[头下标:尾下标]</code> 方式获取的子字符串包含头下标的字符，但不包含尾下标的字符；</p><p>加入我们的字符串 <code>s = &#39;abcdef’</code>，则通过不同方式索引的结果如下图：</p><figure><img src="`+s+'" alt="图片源自菜鸟教程" tabindex="0" loading="lazy"><figcaption>图片源自菜鸟教程</figcaption></figure><h3 id="列表" tabindex="-1"><a class="header-anchor" href="#列表" aria-hidden="true">#</a> 列表</h3><p><code>list</code> 是一种 <strong>有序</strong> 的集合，能随时向其中添加和删除元素，用 <code>[]</code> 标识，内部元素用逗号隔开，元素可以是字符、数字、字符串等数据类型，是 Python 中最常用的复合数据类型。类似于字符串，也可以用 <code>[头下标:尾下标]</code> 的方式来进行截取相应子列表，索引方式同字符串，示例如下：</p><figure><img src="'+i+`" alt="源自菜鸟教程" tabindex="0" loading="lazy"><figcaption>源自菜鸟教程</figcaption></figure><p><code>list</code> 中常用方法如下：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>len(list)</code></td><td>列表元素个数</td></tr><tr><td><code>list(seq)</code></td><td>将元组转换为列表</td></tr><tr><td><code>list.pop()</code></td><td>删除 <code>list</code> 末尾的元素</td></tr><tr><td><code>list.pop(index)</code></td><td>删除 <code>list</code> 中索引位置为 <code>index</code> 的元素</td></tr><tr><td><code>list.append(obj)</code></td><td>在列表末尾添加新的对象</td></tr><tr><td><code>list.count(obj)</code></td><td>统计某个元素在列表中出现的次数</td></tr><tr><td><code>list.insert(index, obj)</code></td><td>将对象插入列表指定位置</td></tr><tr><td><code>list.remove(obj)</code></td><td>移除列表中某个值的第一个匹配项</td></tr><tr><td><code>list.reverse()</code></td><td>反转列表中元素</td></tr><tr><td><code>list.index(obj)</code></td><td>从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td><code>list.sort(cmp=None, key=None, reverse=False)</code></td><td>对原列表进行排序，<strong>reverse = True</strong> 降序， <strong>reverse = False</strong> 升序（默认）</td></tr></tbody></table><p>如果我们要实现不同列表连接，应该这么办呢，此时我们可以使用 <code>+</code> 来连接不同的数组；</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list2 <span class="token operator">+</span> list2<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而如果我们想要某个列表重复，则可以使用 <code>*</code> ；</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list1 <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元组" tabindex="-1"><a class="header-anchor" href="#元组" aria-hidden="true">#</a> 元组</h3><p><code>tuple</code> 也是一种类似于 <code>list</code> 的 <strong>有序</strong> 列表，用 <code>()</code> 标识，内部元素用逗号隔开。它俩的一个最大区别在于： <code>tuple</code> 一旦初始化之后，就不能再修改了，相当于只读列表，所以 <code>tuple</code> 不像 <code>list</code> 一样有类似 <code>append()、insert()</code> 等方法；</p><p>常用方法如下：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>len(tuple)</code></td><td>计算元组元素个数</td></tr><tr><td><code>tuple(seq)</code></td><td>将列表转换为元组</td></tr><tr><td><code>max(tuple)</code></td><td>返回元组中元素最大值</td></tr><tr><td><code>min(tuple)</code></td><td>返回元组中元素最小值</td></tr></tbody></table><p>如果我们要定义一个空的元组，可以用如下的方式：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">tuple</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而如果元组中只有一个元素时，为了避免歧义，通常需要定义成如下形式：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="字典" tabindex="-1"><a class="header-anchor" href="#字典" aria-hidden="true">#</a> 字典</h3><p>列表是有序的对象集合，而字典则是无序的对象集合，字典用 <code>{}</code>标识，元素间用逗号分隔，每个元素由 <code>key:value</code> 的形式组成。</p><p>两者之间的区别在于：字典中的元素是通过键值对来存取的，而不是通过偏移存取。</p><p>字典值虽然能够没有限制，但是键是有限制的，主要有如下两点需要记住：</p><ol><li>不允许同一个键出现两次；</li><li>键必须不可变，所以它可以是数字、字符串或元组，但是不能用列表；</li></ol><p>字典也有许多方法供我们使用，主要方法总结如下：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>len(dict)</code></td><td>计算字典元素个数，即键的总数</td></tr><tr><td><code>str(dict)</code></td><td>输出字典可打印的字符串表示</td></tr><tr><td><code>type(variable)</code></td><td>返回输入的变量类型，如果变量是字典就返回字典类型</td></tr><tr><td><code>dict.clear()</code></td><td>删除字典内所有元素</td></tr><tr><td><code>dict.copy()</code></td><td>返回一个字典的浅复制</td></tr><tr><td><code>dict.haskey(key)</code></td><td>如果键在字典 <code>dict</code> 里返回 <code>True</code>，否则返回 <code>False</code></td></tr><tr><td><code>dict.get(key)</code></td><td>返回指定键的值</td></tr><tr><td><code>dict.keys()</code></td><td>以列表返回一个字典所有的键</td></tr><tr><td><code>dict.values()</code></td><td>以列表返回字典中的所有值</td></tr><tr><td><code>dict.items()</code></td><td>以列表返回可遍历的(键, 值) 元组数组</td></tr><tr><td><code>pop(key)</code></td><td>删除字典给定键 <code>key</code> 所对应的值，返回值为被删除的值</td></tr><tr><td><code>popitem()</code></td><td>返回并删除字典中的最后一对键和值</td></tr></tbody></table><h3 id="布尔值" tabindex="-1"><a class="header-anchor" href="#布尔值" aria-hidden="true">#</a> 布尔值</h3><p>布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>。在Python中，可以直接用<code>True</code>、<code>False</code> 直接表示布尔值，也可以通过布尔运算计算出来。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token boolean">False</span>
<span class="token boolean">False</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span>
<span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><p>Python 支持多种运算符，但是运算符之间也是有优先级的，下表大致按照优先级从高到低的顺序列出了所有运算符，下面分别介绍运算符的类别；</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>**</code></td><td style="text-align:left;">指数 (最高优先级)</td></tr><tr><td style="text-align:left;"><code>~ + -</code></td><td style="text-align:left;">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td style="text-align:left;"><code>* / % //</code></td><td style="text-align:left;">乘，除，取模和取整除</td></tr><tr><td style="text-align:left;"><code>+ -</code></td><td style="text-align:left;">加法减法</td></tr><tr><td style="text-align:left;"><code>&gt;&gt; &lt;&lt;</code></td><td style="text-align:left;">右移，左移运算符</td></tr><tr><td style="text-align:left;"><code>&amp;</code></td><td style="text-align:left;">位 &#39;<code>AND</code>&#39;</td></tr><tr><td style="text-align:left;">\`^</td><td style="text-align:left;">\`</td></tr><tr><td style="text-align:left;"><code>&lt;= &lt; &gt; &gt;=</code></td><td style="text-align:left;">比较运算符</td></tr><tr><td style="text-align:left;"><code>&lt;&gt; == !=</code></td><td style="text-align:left;">等于运算符</td></tr><tr><td style="text-align:left;"><code>= %= /= //= -= += *= **=</code></td><td style="text-align:left;">赋值运算符</td></tr><tr><td style="text-align:left;"><code>is is not</code></td><td style="text-align:left;">身份运算符</td></tr><tr><td style="text-align:left;"><code>in not in</code></td><td style="text-align:left;">成员运算符</td></tr><tr><td style="text-align:left;"><code>not and or</code></td><td style="text-align:left;">逻辑运算符</td></tr></tbody></table><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h3><p>假设变量 <code>a = 10, b = 20</code>：</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>+</code></td><td style="text-align:left;">加 - 两个对象相加</td><td style="text-align:left;"><code>a + b</code> 输出结果 30</td></tr><tr><td style="text-align:left;"><code>-</code></td><td style="text-align:left;">减 - 得到负数或是一个数减去另一个数</td><td style="text-align:left;"><code>a - b</code> 输出结果 -10</td></tr><tr><td style="text-align:left;"><code>*</code></td><td style="text-align:left;">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td style="text-align:left;"><code>a * b</code> 输出结果 200</td></tr><tr><td style="text-align:left;"><code>/</code></td><td style="text-align:left;">除 - <code>x</code> 除以 <code>y</code></td><td style="text-align:left;"><code>b / a</code> 输出结果 2</td></tr><tr><td style="text-align:left;"><code>%</code></td><td style="text-align:left;">取模 - 返回除法的余数</td><td style="text-align:left;"><code>b % a</code> 输出结果 0</td></tr><tr><td style="text-align:left;"><code>**</code></td><td style="text-align:left;">幂 - 返回 <code>x</code> 的 <code>y</code> 次幂</td><td style="text-align:left;"><code>a**b </code> 为 10 的 20 次方， 输出结果 100000000000000000000</td></tr><tr><td style="text-align:left;"><code>//</code></td><td style="text-align:left;">取整除 - 返回商的整数部分（<strong>向下取整</strong>）</td><td style="text-align:left;"><code>&gt;&gt;&gt; 9//2 4 &gt;&gt;&gt; -9//2 -5</code></td></tr></tbody></table><h3 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h3><p>假设变量 <code>a = 10, b = 20</code>：</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>==</code></td><td style="text-align:left;">等于 - 比较对象是否相等</td><td style="text-align:left;"><code>(a == b)</code> 返回 <code>False</code></td></tr><tr><td style="text-align:left;"><code>!=</code></td><td style="text-align:left;">不等于 - 比较两个对象是否不相等</td><td style="text-align:left;"><code>(a != b) </code> 返回 <code>True</code></td></tr><tr><td style="text-align:left;"><code>&lt;&gt;</code></td><td style="text-align:left;">不等于 - 比较两个对象是否不相等。<strong>python3 已废弃。</strong></td><td style="text-align:left;"><code>(a &lt;&gt; b) </code>返回 <code>True</code>。这个运算符类似 !=</td></tr><tr><td style="text-align:left;"><code>&gt;</code></td><td style="text-align:left;">大于 - 返回 <code>x</code> 是否大于 <code>y</code></td><td style="text-align:left;"><code>(a &gt; b)</code> 返回 <code>False</code></td></tr><tr><td style="text-align:left;"><code>&lt;</code></td><td style="text-align:left;">小于 - 返回 <code>x</code> 是否小于 <code>y</code>。所有比较运算符返回 1 表示真，返回 0 表示假。这分别与特殊的变量 <code>True</code> 和 <code>False</code> 等价</td><td style="text-align:left;"><code>(a &lt; b) </code>返回 <code>True</code></td></tr><tr><td style="text-align:left;"><code>&gt;=</code></td><td style="text-align:left;">大于等于 - 返回 <code>x</code> 是否大于等于 <code>y</code></td><td style="text-align:left;"><code>(a &gt;= b)</code> 返回 <code>False</code></td></tr><tr><td style="text-align:left;"><code>&lt;=</code></td><td style="text-align:left;">小于等于 - 返回 <code>x</code> 是否小于等于 <code>y</code></td><td style="text-align:left;"><code>(a &lt;= b)</code> 返回 <code>True</code></td></tr></tbody></table><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h3><p>假设变量 <code>a = 10, b = 20</code>：</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>=</code></td><td style="text-align:left;">简单的赋值运算符</td><td style="text-align:left;"><code>c = a + b</code> 将 <code>a + b</code> 的运算结果赋值为 <code>c</code></td></tr><tr><td style="text-align:left;"><code>+=</code></td><td style="text-align:left;">加法赋值运算符</td><td style="text-align:left;"><code>c += a</code> 等效于 <code>c = c + a</code></td></tr><tr><td style="text-align:left;"><code>-=</code></td><td style="text-align:left;">减法赋值运算符</td><td style="text-align:left;"><code>c -= a</code> 等效于 <code>c = c - a</code></td></tr><tr><td style="text-align:left;"><code>*=</code></td><td style="text-align:left;">乘法赋值运算符</td><td style="text-align:left;"><code>c *= a</code> 等效于 <code>c = c * a</code></td></tr><tr><td style="text-align:left;"><code>/=</code></td><td style="text-align:left;">除法赋值运算符</td><td style="text-align:left;"><code>c /= a</code> 等效于<code> c = c / a</code></td></tr><tr><td style="text-align:left;"><code>%=</code></td><td style="text-align:left;">取模赋值运算符</td><td style="text-align:left;"><code>c %= a</code> 等效于 <code>c = c % a</code></td></tr><tr><td style="text-align:left;"><code>**=</code></td><td style="text-align:left;">幂赋值运算符</td><td style="text-align:left;"><code>c \\**= a</code> 等效于 <code>c = c ** a</code></td></tr><tr><td style="text-align:left;"><code>//=</code></td><td style="text-align:left;">取整除赋值运算符</td><td style="text-align:left;"><code>c //= a</code> 等效于 <code>c = c // a</code></td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><p>假设变量 <code>a = 10, b = 20</code>：</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">逻辑表达式</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>and</code></td><td style="text-align:left;"><code>x and y</code></td><td style="text-align:left;">布尔&quot;与&quot; - 如果 <code>x</code> 为 <code>False</code>，<code>x and y</code> 返回 <code>False</code>，否则它返回 <code>y</code> 的计算值</td><td style="text-align:left;"><code>(a and b)</code> 返回 20</td></tr><tr><td style="text-align:left;"><code>or</code></td><td style="text-align:left;"><code>x or y</code></td><td style="text-align:left;">布尔&quot;或&quot; - 如果 <code>x</code> 是非 0，它返回 <code>x</code> 的值，否则它返回 <code>y</code> 的计算值</td><td style="text-align:left;"><code>(a or b)</code> 返回 10</td></tr><tr><td style="text-align:left;"><code>not</code></td><td style="text-align:left;"><code>not x</code></td><td style="text-align:left;">布尔&quot;非&quot; - 如果 <code>x</code> 为 <code>True</code>，返回 <code>False</code> 。如果 <code>x</code> 为 <code>False</code>，它返回 <code>True</code></td><td style="text-align:left;"><code>not(a and b)</code> 返回 <code>False</code></td></tr></tbody></table><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h3><p>假设变量 <code>a = 60, b = 13</code>：</p><p>按位运算符石将数字转换为二进制之后来进行计算的，则 <code>a = 00111100、b = 00001101</code></p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&amp;</code></td><td style="text-align:left;">按位与运算符：参与运算的两个值,如果两个相应位都为 1,则该位的结果为 1,否则为 0</td><td style="text-align:left;"><code>(a &amp; b)</code> 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td style="text-align:left;">\`</td><td style="text-align:left;">\`</td><td style="text-align:left;">按位或运算符：只要对应的二个二进位有一个为 1 时，结果位就为 1</td></tr><tr><td style="text-align:left;"><code>^</code></td><td style="text-align:left;">按位异或运算符：当两对应的二进位相异时，结果为 1</td><td style="text-align:left;"><code>(a ^ b)</code> 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td style="text-align:left;"><code>~</code></td><td style="text-align:left;">按位取反运算符：对数据的每个二进制位取反,即把 1 变为 0,把 0 变为 1 。<strong>~x</strong> 类似于 <strong>-x-1</strong></td><td style="text-align:left;"><code>(~a ) </code>输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。</td></tr><tr><td style="text-align:left;"><code>&lt;&lt;</code></td><td style="text-align:left;">左移动运算符：运算数的各二进位全部左移若干位，由 <strong>&lt;&lt;</strong> 右边的数字指定了移动的位数，高位丢弃，低位补 0。</td><td style="text-align:left;"><code>a &lt;&lt; 2</code> 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td style="text-align:left;"><code>&gt;&gt;</code></td><td style="text-align:left;">右移动运算符：把 &quot;&gt;&gt;” 左边的运算数的各二进位全部右移若干位，<strong>&gt;&gt;</strong> 右边的数字指定了移动的位数</td><td style="text-align:left;"><code>a &gt;&gt; 2</code> 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><h3 id="成员运算符" tabindex="-1"><a class="header-anchor" href="#成员运算符" aria-hidden="true">#</a> 成员运算符</h3><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>in</code></td><td style="text-align:left;">如果在指定的序列中找到值返回 <code>True</code>，否则返回 <code>False</code>。</td><td style="text-align:left;"><code>x</code> 在 <code>y</code> 序列中 , 如果 <code>x</code> 在 <code>y</code> 序列中返回 <code>True</code></td></tr><tr><td style="text-align:left;"><code>not in</code></td><td style="text-align:left;">如果在指定的序列中没有找到值返回 <code>True</code>，否则返回 <code>False</code>。</td><td style="text-align:left;"><code>x</code> 不在 <code>y</code> 序列中 , 如果 <code>x</code> 不在 <code>y</code> 序列中返回 <code>True</code></td></tr></tbody></table><h3 id="身份运算符" tabindex="-1"><a class="header-anchor" href="#身份运算符" aria-hidden="true">#</a> 身份运算符</h3><p>身份运算符用于比较两个对象的存储单元：</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>is</code></td><td style="text-align:left;"><code>is</code> 是判断两个标识符是不是引用自一个对象</td><td style="text-align:left;"><code>x is y</code>, 类似 <code>id(x) == id(y)</code> , 如果引用的是同一个对象则返回 <code>True</code>，否则返回 <code>False</code></td></tr><tr><td style="text-align:left;"><code>is not</code></td><td style="text-align:left;"><code>is not</code> 是判断两个标识符是不是引用自不同对象</td><td style="text-align:left;"><code>x is not y</code> ， 类似 <code>id(a) != id(b)</code>。如果引用的不是同一个对象则返回结果 <code>True</code>，否则返回 <code>False</code></td></tr></tbody></table><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>好了，文章到这里也算🈶️挺多内容了，赶紧去仔细看看，然后动手实践起来吧。</p><p>如果你觉得我的文章对你有所帮助，那就赶紧去关注我吧。另外，为了方便大家交流，我还特意创建了微信交流群，如果你也有兴趣加入，关注我的公众号（村雨遥）回复 <strong>加群</strong>，我人工拉你入群哦。</p><h2 id="⏳-联系" tabindex="-1"><a class="header-anchor" href="#⏳-联系" aria-hidden="true">#</a> ⏳ 联系</h2><p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p><p>扫一扫，探索另一个全新的世界。</p><figure><img src="`+e+'" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',90);function g(y,x){const t=l("Share");return o(),a("div",null,[p,n(t,{colorful:""})])}const b=d(r,[["render",g],["__file","20210402-language-element.html.vue"]]);export{b as default};
