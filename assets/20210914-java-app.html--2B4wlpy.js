import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as n,e as s}from"./app-X8k1FHBG.js";const i="/zzdxy/assets/f71546df34e73baa93cae1d1b10c830b-MkzAsWls.png",o="/zzdxy/assets/68ec843db0696ba14e7b7d9837e53ad9-ji-_eHzd.png",c="/zzdxy/assets/179f79e1e8445c1e7b6a7de2723c4845-jBMEUvLS.png",d="/zzdxy/assets/af56e65bf33369897c860d19b6a6537d-sGKnmO88.png",l="/zzdxy/assets/430123c951a1061b2a8f3669876da1ee-vqEdUiXH.png",t="/zzdxy/assets/61d1aa5347ab34d5923180d5036f6926-t3GhV0qL.png",r="/zzdxy/assets/2233a0ba9b7a2261170803a4ef89d26f-yhDe1B1c.png",p="/zzdxy/assets/cffaa858bea34df06f88230506d01620-8Ss8I0pq.png",u="/zzdxy/assets/ec8b180d1673a5e889961e2d972f3210-t3by2rqS.png",g="/zzdxy/assets/2d0d0aa5adee9fd5f756e3bdb0cd705b-NCTbCdvi.png",f="/zzdxy/assets/bf17a258aaa8fae4ec8a55e3f39e1255-Fex3ka2A.png",m="/zzdxy/assets/c3e6f20cf409e842b1e1c2b219b58464-5EbRGm3p.png",v="/zzdxy/assets/6380310c50b5b853aa3f84861fc06034-I4d5gNnw.png",b="/zzdxy/assets/df8e27534d5ed9b913dc647837e9dab5-2Ym9rtCV.png",k="/zzdxy/assets/c7510f468bf4e16a42bf4e59e25dffc5-x8KKuTHv.png",h="/zzdxy/assets/421747d7cc7be0688f1a71614e13cff3-MOIVjTmp.png",y="/zzdxy/assets/7b0c9354865783a461df50ee8a0344dd-xKt2Xttd.png",z="/zzdxy/assets/d76ef859fa7e96b20f35ce9d8071692c-WzFlKN87.png",x="/zzdxy/assets/12edb796ce2da0302b24f5802288e655-PO5iBLq6.png",_={},w=s('<h1 id="创建-java-入门应用" tabindex="-1"><a class="header-anchor" href="#创建-java-入门应用" aria-hidden="true">#</a> 创建 Java 入门应用</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>本篇文章中，我们将学习如何使用 IDEA 来创建、运行并打包我们的第一个 <code>Hello World!</code> Java 程序。通过阅读该教程，希望大家能对如何使用 IDEA 来创建、运行并打包 Java 程序有一个简单的了解，熟悉一下 IDEA 的一些简单使用技巧，去感受 IDEA 为我们开发者所带来的便利，接下来我们就来具体看看具体的创建、运行以及打包过程。</p><h2 id="创建一个-java-项目" tabindex="-1"><a class="header-anchor" href="#创建一个-java-项目" aria-hidden="true">#</a> 创建一个 Java 项目</h2><p>首先，我们来看看，如何利用 IDEA 来创建一个 Java 项目，以下是具体的创建过程。</p><ol><li>打开 IDEA 主界面，然后点击 <code>New Project</code>。</li></ol><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>接着选中左侧的 <code>Java</code> 选项，然后设置项目的 <code>JDK</code>，这里如果你事先安装好了 <code>JDK</code>，一般 IDEA 会自动检测出来，如果没有检测出来，那么选中 <code>Add JDK …</code>，然后去找你所安装 <code>JDK</code> 的路径即可，最后则是选择最下方的 <code>Next</code>。</li></ol><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>选择是否从模板创建，默认 IDEA 自带有模板，如果你要基于改模板创建，那么就勾选 <code>Create project from template</code>，默认我们不勾选，则是创建一个空项目，这里直接点击 <code>Next</code> 进入下一步即可。</li></ol><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="4"><li>设置项目名以及项目存放路径，这里可以根据自己的需要来自定义，我们这里以 <code>HelloWolrd</code> 为示例，设置好项目名和项目存放路径后直接 <code>Finish</code> 即可。</li></ol><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="5"><li>这时候我们的项目就创建好了，创建好项目结构如下图所示。</li></ol><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="编写代码" tabindex="-1"><a class="header-anchor" href="#编写代码" aria-hidden="true">#</a> 编写代码</h2><p>虽然我们的项目创建好了，但是里边啥都没有，这时候我们就需要来编写我们的代码了。</p><ol><li>首先，我们在项目工具窗口鼠标右击 <code>src</code> 文件夹，然后选择 <code>New</code>，接着选择 <code>Java Class</code>（也可以直接使用快捷键 <code>Alt + Insert</code>）。</li></ol><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>接着在 <code>Name</code> 域输入 <code>com.cunyu1943.helloworld.HelloWorld</code>，然后回车，接着 <code>com.cunyu1943.hellowold</code> 包和 <code>HelloWorld</code> 类就创建好了。</li></ol><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cunyu1943<span class="token punctuation">.</span>helloworld</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Created with IntelliJ IDEA.
 *
 * <span class="token keyword">@author</span> : 村雨遥
 * <span class="token keyword">@version</span> : 1.0
 * <span class="token keyword">@project</span> : HelloWorld
 * <span class="token keyword">@package</span> : com.cunyu1943.helloworld
 * <span class="token keyword">@className</span> : HelloWorld
 * <span class="token keyword">@createTime</span> : 2021/9/14 9:53
 * <span class="token keyword">@email</span> : 747731461@qq.com
 * @公众号 : 村雨遥
 * <span class="token keyword">@website</span> : https://cunyu1943.github.io
 * <span class="token keyword">@description</span> :
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>然后输入 <code>main</code> 并选择 <code>main()</code> 方法的声明，接着在 <code>main()</code> 方法中输入如下打印 <code>Hello World!</code> 的代码。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cunyu1943<span class="token punctuation">.</span>helloworld</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Created with IntelliJ IDEA.
 *
 * <span class="token keyword">@author</span> : 村雨遥
 * <span class="token keyword">@version</span> : 1.0
 * <span class="token keyword">@project</span> : HelloWorld
 * <span class="token keyword">@package</span> : com.cunyu1943.helloworld
 * <span class="token keyword">@className</span> : HelloWorld
 * <span class="token keyword">@createTime</span> : 2021/9/14 9:53
 * <span class="token keyword">@email</span> : 747731461@qq.com
 * @公众号 : 村雨遥
 * <span class="token keyword">@website</span> : https://cunyu1943.github.io
 * <span class="token keyword">@description</span> : Hello World 类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编译并运行项目" tabindex="-1"><a class="header-anchor" href="#编译并运行项目" aria-hidden="true">#</a> 编译并运行项目</h2><p>代码写好之后，我们先编译下代码，选择工具栏中的编译按钮（也可以使用快捷键 <code>Ctrl + F9</code>），项目就会自动进行编译。</p><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>编译如果没有出错，那我们就可以接着运行项目了。点击 <code>main()</code> 方法之前的绿色三角箭头，项目就会运行起来了（也可以使用快捷键 <code>Ctrl + Shift + F10</code>。</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>或者点击工具栏中的绿色三角箭头即可运行（或者使用快捷键 <code>Shift + F10</code>），不过此时运行的是整个项目，而上面的方法则是只运行当前类中的主方法。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后就在控制台就可以看到我们程序的输出了。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="打包项目为-jar-应用" tabindex="-1"><a class="header-anchor" href="#打包项目为-jar-应用" aria-hidden="true">#</a> 打包项目为 JAR 应用</h2><p>依次点击 <code>File -&gt; Project Structure</code>，进入项目结构（或者使用快捷键 <code>Ctrl + Shift + Alt + S</code>），然后进入选中 <code>Project Settings -&gt; Artifacts</code>。</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击左上角的 <code>+</code>，然后选中 <code>JAR -&gt; From modules with dependencies</code>，接着会进入 <code>Create JAR from Modules</code>，将 <code>Main Class</code> 设置为刚才的 <code>HelloWolrd</code>，最后点击 <code>ok</code> 即可。</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>确定并 <code>apply</code> 之后，此时项目打包就配置好了，然后选择菜单栏中的 <code>Build -&gt; Build Artifacts</code>，然后点击 <code>HelloWorld:jar</code> 并选择 <code>Build</code>，然后等待打包完成即可。</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接着在我们项目的 <code>out -&gt; artifacts</code> 目录下，就可以找到 <code>HelloWorld.jar</code> 了，此时我们项目的打包工作也完成了。</p><figure><img src="'+z+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="运行-jar-应用" tabindex="-1"><a class="header-anchor" href="#运行-jar-应用" aria-hidden="true">#</a> 运行 JAR 应用</h2><p>既然我们把项目打包了，那这个时候我们就不需要再在 IDEA 中就能运行我们的项目。找到我们打包好的 <code>HelloWorld.jar</code>，然后在控制台中运行如下命令即可。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> HelloWorld.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到同样打印出了 <code>Hello Wolrd!</code>，说明我们项目打包成功，而且也将其顺利运行。</p><figure><img src="`+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>今天的内容就到此结束了，本文主要讲了如何利用 IDEA 来创建、编译、运行、打包我们的 Java 项目。如果你有更多关于 IDEA 使用的小技巧，欢迎在评论区留言。</p><p>创作不易，如果你觉得本文对你有所帮助，那就来一波点赞关注吧。</p>',53),j=[w];function A(H,W){return e(),n("div",null,j)}const D=a(_,[["render",A],["__file","20210914-java-app.html.vue"]]);export{D as default};
