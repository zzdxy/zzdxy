import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,e as t}from"./app-Svquv1Du.js";const e={},o=t(`<h1 id="仓库、坐标及依赖管理" tabindex="-1"><a class="header-anchor" href="#仓库、坐标及依赖管理" aria-hidden="true">#</a> 仓库、坐标及依赖管理</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>在我们创建使用 Maven 项目的过程中，当需要用到第三方的插件时，都是通过依赖管理来达成，也就是 Maven 项目中必有的 <code>pom.xml</code> 文件。POM（Project Object Model），即 <strong>项目对象模型</strong>，其中定义了 Maven 项目的形式。因此，<code>pom.xml</code> 可以看做是 Maven 项目中的导航。</p><h2 id="maven-仓库" tabindex="-1"><a class="header-anchor" href="#maven-仓库" aria-hidden="true">#</a> Maven 仓库</h2><p>所谓仓库，就和我们平常说的粮仓啥的差不多，其实都是用来存放东西的。只不过在 Maven 项目中，仓库使用来存放我们项目所使用的 jar 包以及 Maven 所使用的各种 jar 包的。</p><p>而根据仓库存放位置的不同，我们可将其分为 <strong>本地仓库</strong> 和 <strong>远程仓库</strong>。</p><p>其中，本地仓库也就是我们个人 PC 中存放 jar 包的文件夹，用于存放 Maven 项目所需的 jar。</p><p>而远程仓库则指的是存放在互联网中的仓库，我们可以将其进一步细分为 <strong>中央仓库</strong>、<strong>中央仓库镜像</strong>、<strong>私服</strong>。</p><ul><li><strong>中央仓库</strong>：全世界最权威的一个仓库，我们所有的开发人员都可以共享使用，地址为：https://repo.maven.apache.org。</li><li><strong>中央仓库镜像</strong>：顾名思义，它就是中央仓库的一个备份，它分散在各大洲的重要城市，方便各个地方的程序员使用起来更快捷。</li><li><strong>私服</strong>：私服则是处于安全考虑，一般搭建在局域网中，仅提供给公司内部人员使用。</li></ul><p>那我们如何使用仓库呢？或者说一个 Maven 项目从仓库中获取资源的顺序是怎样的呢？</p><p>通常来讲，当我们要使用 Maven 仓库中的资源时，是不需要我们去人为干预的。假设我们要使用某一个驱动，我们首先去 <code>pom.xml</code> 中进行配置，接着 Maven 将自动先去检查我们的本地仓库中是否存在该资源，如果没有，那么就到私服中午查找，如果还没有找到，那么就到中央仓库镜像中去查询，最后如果连镜像仓库中也没法找到，那就只有到中央仓库去进行搜索了。</p><h2 id="maven-坐标" tabindex="-1"><a class="header-anchor" href="#maven-坐标" aria-hidden="true">#</a> Maven 坐标</h2><p>坐标，其实就相当于我们人的身份证，它是唯一的，用于标识一个项目。一个坐标的组成一般有如下几部分，前三者必须，<code>packaging</code> 可选，<code>classifier</code> 不能直接定义。</p><ul><li><strong>groupId</strong>：定义 Maven 项目隶属的实际组织，一般约定以创建该项目的组织名称的逆向域名开头。比如说公司的域名是：google.com，那么我们就可以将 <code>groupId</code> 设置为 <code>com.google</code>。</li><li><strong>artifactId</strong>：定义实际项目中的一个 Maven 项目（模块），推荐使用实际项目名作为前缀。</li><li><strong>version</strong>：定义 Maven 项目当前所处版本，一般使用三位数字进行标识，如 <code>1.1.1</code>。</li><li><strong>packaging</strong>：项目打包方式，可以是 <code>jar</code>、<code>war</code>、<code>rar</code>、<code>ear</code>、<code>pom</code>，默认使用 <code>jar</code>。</li><li><strong>classifier</strong>：帮助定义构建输出的一些附属构建，与主构件对应。</li><li><strong>dependencies</strong>：添加项目所需的 <code>jar</code> 所对应的 Maven 坐标,，表示我们项目中所需的各种资源说明。</li><li><strong>dependency</strong>：<code>dependencies</code> 的一个子标签，一个 <code>dependency</code> 对应一个坐标。</li><li><strong>properties</strong>：用于设置属性。</li><li><strong>scope</strong>：表示依赖的范围，通常有如下几种：</li></ul><table><thead><tr><th>依赖范围</th><th>编译期有效</th><th>测试期有效</th><th>运行时有效</th><th>打包有效</th></tr></thead><tbody><tr><td><code>compile</code></td><td>😄</td><td>😄</td><td>😄</td><td>😄</td></tr><tr><td><code>test</code></td><td>😡</td><td>😄</td><td>😡</td><td>😡</td></tr><tr><td><code>privided</code></td><td>😄</td><td>😄</td><td>😡</td><td>😡</td></tr><tr><td><code>runtime</code></td><td>😡</td><td>😄</td><td>😄</td><td>😄</td></tr><tr><td><code>system</code></td><td>😄</td><td>😄</td><td>😡</td><td>😡</td></tr></tbody></table><p>以下就是一个最简单的 Maven 坐标实例：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.cunyu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>MavenDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="依赖冲突" tabindex="-1"><a class="header-anchor" href="#依赖冲突" aria-hidden="true">#</a> 依赖冲突</h2><h3 id="冲突产生原因" tabindex="-1"><a class="header-anchor" href="#冲突产生原因" aria-hidden="true">#</a> 冲突产生原因</h3><p>Maven 项目中，通常都会定义血多 <code>dependency</code>，每个 <code>dependency</code> 内部也会定义它的 <code>dependency</code>，而有时各个依赖之间会产生冲突，冲突的原因通常主要是 <strong>由于 <code>jar</code> 包依赖的传递性</strong>，如果在一个项目中同时引入了一个依赖的不同版本，就可能导致依赖冲突。</p><h3 id="解决冲突的办法" tabindex="-1"><a class="header-anchor" href="#解决冲突的办法" aria-hidden="true">#</a> 解决冲突的办法</h3><p>当冲突产生时，需要如何解决呢？通常我们有两种处理策略：</p><ul><li><strong>Maven 的默认处理策略</strong>：</li></ul><ol><li><strong>最短路径优先</strong>：对于不同路径长度的 <code>jar</code> 包，优先选择路径更短的生效。</li><li><strong>最先声明优先</strong>：当路径一样时，如 <code>A -&gt; B -&gt; C</code> ，<code>E -&gt; F -&gt; C</code>，那么则谁先声明则先选择谁生效。</li></ol><ul><li><strong>移除依赖：用于排除某项依赖的依赖包</strong></li></ul><p>除开上述策略外，我们也可以手动在 <code>pom.xml</code> 中使用 <code>&lt;exclusion&gt;</code> 标签来排除发生冲突的依赖包，如下面用于排除 <code>spring-core</code> 冲突的例子：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>今天关于 Maven 的仓库和坐标的相关知识，以及 Maven 中依赖产生冲突的原因和如何解决冲突的内容就到此结束了。个人水平有限可能有些遗漏的方面，如果你有更多关于以上方面的知识，欢迎评论交流。既然差不多讲完了 Maven 中的核心知识点，那么下一次我们就来看看怎么使用 Maven 来进行实战吧。</p>`,29),p=[o];function c(d,l){return a(),s("div",null,p)}const g=n(e,[["render",c],["__file","20200709-pom.html.vue"]]);export{g as default};
