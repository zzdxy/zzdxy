import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as s,o,c,a as e,b as t,d as i,e as p}from"./app-nKMPWVUx.js";const d="/zzdxy/assets/b361ffbd2c1441bf853fa32cd64c7479-ChdPsvBV.webp",l="/zzdxy/assets/57056782c34445b69f2ff934ece24c83-KEeuN55F.webp",r="/zzdxy/assets/02ef542d6e334658bf5175f3fb7046d7-RJhAp8OV.webp",u={},g=p(`<h1 id="集成-security-入门小实例" tabindex="-1"><a class="header-anchor" href="#集成-security-入门小实例" aria-hidden="true">#</a> 集成 Security 入门小实例</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p><code>Spring Security</code> 是 <code>Spring</code> 家族中一个强大可定制的身份验证和访问控制框架，和 <code>Shiro</code> 一样，它们都具有认证、授权、加密等用于权限管理的功能。但相比于 <code>Shiro</code>，<code>Spring Security</code> 的功能无疑更加强大。而且作为 <code>Spring</code> 家族中的一份子，配合家族中的其它兄弟 - <code>Spring Boot</code>、<code>Spring Cloud</code> 使用起来更加丝滑。</p><p>今天就来看看，如何在 <code>Spring Boot</code> 集成 <code>Spring Security</code>，实现最简单的认证授权功能。</p><h2 id="集成过程" tabindex="-1"><a class="header-anchor" href="#集成过程" aria-hidden="true">#</a> 集成过程</h2><p>要在 <code>Spring Boot</code> 集成 <code>Security</code>，其实很简单，可以总结为如下几个步骤：</p><ol><li>首先是创建一个 <code>Spring Boot</code> 项目。</li><li>添加 <code>Spring Security</code> 相关依赖。</li></ol><h3 id="创建-spring-boot-项目" tabindex="-1"><a class="header-anchor" href="#创建-spring-boot-项目" aria-hidden="true">#</a> 创建 Spring Boot 项目</h3><p>这个过程只要你学习过 Spring Boot，那么你肯定是已经很熟悉了，所以在这里我也就不再赘述了。当然，如果你对这个过程还是不太熟悉，那么可以参考我之前的文章。</p><h3 id="添加相关依赖" tabindex="-1"><a class="header-anchor" href="#添加相关依赖" aria-hidden="true">#</a> 添加相关依赖</h3><p>项目创建好之后，一般默认是已经添加了 <code>Web</code> 依赖，这个时候，我们只需要在项目的 <code>pom.xml</code> 文件中添加 <code>Spring Security</code> 的相关依赖即可。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动项目" tabindex="-1"><a class="header-anchor" href="#启动项目" aria-hidden="true">#</a> 启动项目</h3><p>完成上面步骤的操作后，接下来我们直接启动项目，然后在浏览器中访问以下地址：</p><blockquote><p><code>http://localhost:8080</code></p></blockquote><p>不出意外应该会跳出以下的界面，让我们登录。此时你可能会很纳闷，为什么我们只加了个 <code>Spring Security</code> 的依赖，怎么就需要登陆了呢？而且，登录的话，用户名和密码又是多少呢？</p><p>再仔细观察浏览器的地址栏，此时我们访问的地址也变了，变成了：</p><blockquote><p><code>http://localhost:8080/login</code></p></blockquote><p>这又是怎么一回事呢？</p><p>原来这就是 <code>Spring Security</code> 为我们的项目所提供的保护机制。在添加 <code>Spring Security</code> 之后，此时再去访问项目，它就会自动重定向到 <code>Security</code> 所提供的登录页面，也就是下面的界面。</p><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同样的 <code>Spring Security</code> 也为我们所提供了一个默认的用户名，也就是 <code>user</code>，至于密码，这就谁都说不准了。因为它会随着我们项目的每次启动而自动生成，所以每次的登录密码都是不一样的。至于要如何获取，那就得去我们的 <code>IDEA</code> 查看控制台查看日志了。</p><p>查看日志我们可以发现如下的一行，其实这就是 <code>Spring Security</code> 所提供的登录密码了。这是一个 <code>UUID</code> 字符串，是 <code>Spring Security</code> 为默认的 <code>user</code> 用户所生成的临时密码。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Using generated security password: 67511bb5-a3e4-4113-9e47-4d733956c860
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="修改默认登录用户密码" tabindex="-1"><a class="header-anchor" href="#修改默认登录用户密码" aria-hidden="true">#</a> 修改默认登录用户密码</h3><p>虽然 <code>Security</code> 提供了默认的 <code>user</code> 用户，但是大家都知道这是默认的，而且需要每次去日志中找登录密码，那有没有方法可以自定义我们的用户和密码呢？答案是，有的。</p><p><code>Security</code> 为我们提供了配置，我们可以在项目的配置文件 <code>application.yml</code> 中去定义自己的用户名和密码，然后它就会覆盖掉 <code>Security</code> 为我们提供的默认用户和密码。</p><p>在项目的配置文件中配置用户和密码，当然，项目生成的默认配置文件是位于 <code>resources</code> 目录下的 <code>application.properties</code>，所以需要将其后缀改成 <code>.yml</code>。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">security</span><span class="token punctuation">:</span>
    <span class="token key atrule">user</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> cunyu1943
      <span class="token key atrule">password</span><span class="token punctuation">:</span> cunyu1943@
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后重启我们的项目，就可以用我们配置的用户和密码来进行登陆了。</p><h3 id="创建页面" tabindex="-1"><a class="header-anchor" href="#创建页面" aria-hidden="true">#</a> 创建页面</h3><p>新建一个 <code>Controller</code> 页面，用于打印最经典的 <code>Hello World!</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello World！&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新启动项目后，在浏览器中访问以下地址：</p><blockquote><p><code>http://localhost:8080/hello</code></p></blockquote><p>然后 Spring Security 就会重定向到 <code>http://localhost:8080/login</code> 页面，此时我们用上面配置的用户名和密码进行登录，登录成功后就会跳转到我们的 <code>/hello</code> 页面了，页面中会打印 <code>Hello World!</code></p><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>以上就是 <code>Spring Boot</code> 集成 <code>Spring Security</code> 的实例了，主要演示了最经典的 <code>Hello World</code> 程序。关于更多 <code>Spring Security</code> 的知识，我们后续的文章再见吧！</p><p>最后，关于本文的中的代码，我已经上传到云端，有需要的小伙伴可以自取。</p>',41),h={href:"https://github.com/cunyu1943/java-learning-demos",target:"_blank",rel:"noopener noreferrer"};function k(b,m){const n=s("ExternalLinkIcon");return o(),c("div",null,[g,e("blockquote",null,[e("p",null,[e("a",h,[t("➛ 传送门"),i(n)])])])])}const S=a(u,[["render",k],["__file","20220604-security.html.vue"]]);export{S as default};
