import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as l,a as n,b as s,d as e,e as a}from"./app-Svquv1Du.js";const i="/zzdxy/assets/akwEee-_VqJmIkP.webp",u="/zzdxy/assets/aE9fSO-T-Vdyyfh.webp",d="/zzdxy/assets/aENcM8-oC744s2O.webp",r="/zzdxy/assets/aVTv3n-fsYfhmi4.webp",k={},v=a('<h1 id="java-进阶面试知识点" tabindex="-1"><a class="header-anchor" href="#java-进阶面试知识点" aria-hidden="true">#</a> Java 进阶面试知识点</h1><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h2><h3 id="异常类层次结构" tabindex="-1"><a class="header-anchor" href="#异常类层次结构" aria-hidden="true">#</a> 异常类层次结构</h3><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从结构图可以看出，所有异常均继承自 <code>Throwable</code> 类，它有两个重要的子类：<code>Exception</code> 和 <code>Error</code> ，各自又包含大量子类。</p><ol><li><strong>Exception</strong></li></ol><p><strong>程序本身可以处理的异常</strong>，又可以分为 <strong>受检异常</strong> 和  <strong>非受检异常</strong> ，<strong>受检异常</strong> 可以用 <code>try...catch...</code> 语句进行捕获处理，而且能从异常中恢复。但 <strong>非受检异常</strong> 是程序运行时错误，会导致程序崩溃而无法恢复。</p><ol start="2"><li><strong>Error</strong></li></ol><p><strong>程序无法处理的错误</strong>，表示程序运行过程中较严重的问题，大多与 coder 所做操作无关，而是代码运行时 JVM 出现的问题。此时说明故障发生于虚拟机本身、或者发生在虚拟机试图执行应用时。</p><h3 id="throwable-常用方法" tabindex="-1"><a class="header-anchor" href="#throwable-常用方法" aria-hidden="true">#</a> Throwable 常用方法</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>public String getMessage()</code></td><td>返回异常发生时的简要描述</td></tr><tr><td><code>public String toString()</code></td><td>返回异常发生时的详细信息</td></tr><tr><td><code>public String getLocalizeMessage()</code></td><td>返回异常对象的本地化信息，若子类重写该方法，可以生成本地化信息，若未重写，则返回信息同 <code>getMessage()</code></td></tr><tr><td>方法</td><td></td></tr><tr><td><code>public void printStackTrace()</code></td><td>在控制台中打印异常对象封装的异常信息</td></tr></tbody></table><h3 id="try-catch-finally-和-try-with-resources" tabindex="-1"><a class="header-anchor" href="#try-catch-finally-和-try-with-resources" aria-hidden="true">#</a> try-catch-finally 和 try-with-resources</h3><ol><li><strong>try-catch-finally</strong><ul><li><strong>try</strong> ：用于捕获异常，后接零个或多个 <code>catch</code>，没有 <code>catch</code> 则必须加上 <code>finally</code>；</li><li><strong>catch</strong>：用于处理 <code>try</code> 捕获到的异常；</li><li><strong>finally</strong>：无论是否捕获/处理异常，<code>finally</code> 块中内容均会执行，就算 <code>try</code> 或 <code>catch</code> 中有 <code>return</code> 语句，<code>finally</code> 中代码也将在方法返回之前执行；</li></ul></li><li><strong>try-with-resources</strong></li></ol><p>当我们有必须要关闭的资源时，建议优先使用 <code>try-with-resources</code>，这样写出的代码更加简短清晰。</p><ol start="3"><li><strong>两者对比</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// try-catch-finally</span>
<span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:/demo.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// try-with-resources</span>
<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:/demo.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="io" tabindex="-1"><a class="header-anchor" href="#io" aria-hidden="true">#</a> IO</h2><h3 id="io-流的定义" tabindex="-1"><a class="header-anchor" href="#io-流的定义" aria-hidden="true">#</a> IO 流的定义</h3><p>IO 流是一种数据的流从源头流到目的地，如文件拷贝操作，输入和输出流都包括了。输入流从文件中读取数据存储到进程，然后输出流从进程中读取数据写入到目标文件；</p><h3 id="io-分类" tabindex="-1"><a class="header-anchor" href="#io-分类" aria-hidden="true">#</a> IO 分类</h3><p>Java IO 共涉及 40 多个类，均从如下 4 个抽象类中派生而来：</p><ol><li><code>InputStream</code>：所有输入流的基类，<strong>字节输入流</strong></li><li><code>OutputStream</code>：所有输出流的基类，<strong>字节输出流</strong></li><li><code>Reader</code>：所有输入流的基类，<strong>字符输入流</strong></li><li><code>Writer</code>：所有输出流的基类，<strong>字符输出流</strong></li></ol><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="字节流-vs-字符流" tabindex="-1"><a class="header-anchor" href="#字节流-vs-字符流" aria-hidden="true">#</a> 字节流 vs 字符流</h3>',25),m={href:"https://www.zhihu.com/question/39262026",target:"_blank",rel:"noopener noreferrer"},b=a('<ol><li><strong>字节流</strong></li></ol><p><code>1 Byte = 8 bit</code>，<strong>字节流处理的最基本单位为单个字节</strong>，默认不使用缓冲区，而是直接操作磁盘文件，常用于处理音频、图片等媒体文件二进制数据；</p><ol start="2"><li><strong>字符流</strong></li></ol><p><code>1 char = 2 Byte = 16 bit</code>，<strong>字符流处理的最基本的单元是 Unicode 码元</strong>，更适合对于操作需要通过 IO 在内存中频繁处理字符串的情况，因为字符流具有缓冲区，性能更高，常用于处理文本数据；</p><ol start="3"><li><strong>有了字节流，为什么还要字符流？</strong></li></ol><p>字节流由 JVM 将字节转换而来，但是该过程非常耗时，而且一旦编码未知就很容易导致乱码。为了解决这个问题，所以提供了一个直接操作字符的接口，从而方便我们对字符进行流处理。</p><h3 id="bio、nio-和-aio" tabindex="-1"><a class="header-anchor" href="#bio、nio-和-aio" aria-hidden="true">#</a> BIO、NIO 和 AIO</h3>',7),h={href:"https://zhuanlan.zhihu.com/p/83597838",target:"_blank",rel:"noopener noreferrer"},g=a(`<ol><li><strong>BIO (Blocking I/O)</strong></li></ol><p><strong>BIO 特点</strong>：就是 IO 执行的两个阶段用户进程都会阻塞住；</p><p>最传统的一种 IO 模型，在读写过程中会发生阻塞现象。当线程发出 IO 请求后，内核查看数据是否就绪，若未就绪就等待数据就绪，此时用户线程处于阻塞状态，用户线程交出 CPU。一旦数据准备就绪，内核就将数据拷贝到用户线程并返回结果给用户线程，此时用户线程才接触阻塞状态。</p><p><strong>同步阻塞</strong> I/O 模式，数据的读取写入必须阻塞在一个线程内等待其完成。适合于连接数较小（小于单机 1000）且固定的框架，该方式对服务器资源要求较高，并发局限于应用中，是 JDK 1.4 之前唯一的选择。该模式让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。</p><p>线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的，因此，需要更加高效的模式来处理更高的并发量。</p><p>假设一个烧开水的场景，有一排水壶在烧开水，BIO 的工作模式就是， 一个线程对应一个水壶，在当前水壶烧开后，才去处理下一个水壶。但是实际上线程在等待水壶烧开的时间段什么都没有做。</p><p>总结而言，一个典型的读操作流程大致为：</p><ul><li>用户进程调用 <code>recvfrom</code> 系统调用，内核此时开始 IO 第一阶段：<strong>准备数据，将数据拷贝到内核缓冲区中</strong>；</li><li>等到数据拷贝到操作系统内核缓冲区后，进入 IO 第二阶段：<strong>将数据从内核缓冲区拷贝到用户内存，然后内核返回结果，用户进程才会解除 <strong><code>**block**</code></strong> 状态，重新运行起来</strong>；</li></ul><ol start="2"><li><strong>NIO (Non-blocking/New I/O)</strong></li></ol><p><strong>NIO 特点</strong>：用户进程需要不断的主动询问内核数据准备好没有；</p><p>用户线程不断询问内核数据是否就绪，即 NIO 不会交出 CPU，而是一直占用 CPU，直到数据准备好。</p><p>NIO 是一种 <strong>同步非阻塞</strong> 的 I/O 模型，在 Java 1.4 中引入了 NIO 框架，对应 <code>java.nio</code> 包，提供了 Channel , Selector，Buffer 等抽象，适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器。NIO 中的 N 可以理解为 <code>Non-blocking</code>，不单纯是 <code>New</code>。它支持 <strong>面向缓冲</strong> 的，<strong>基于通道</strong> 的 I/O 操作方法。</p><p>NIO 提供了与传统 BIO 模型中的 <code>Socket</code> 和 <code>ServerSocket</code> 相对应的 <code>SocketChannel</code> 和 <code>ServerSocketChannel</code> 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞 I/O 来提升开发速率和更好的维护性；对于 <strong>高负载、高并发的（网络）应用</strong>，应使用 NIO 的非阻塞模式来开发。</p><p>还拿烧开水场景来说，NIO 的做法是让一个线程不断的轮询每个水壶的状态，看看是否有水壶的状态发生了改变，从而进行下一步的操作。</p><ol start="3"><li><strong>AIO (Asynchronous I/O)</strong></li></ol><p>AIO 中，<strong>有一个线程不断去轮询多个 Socket 的状态，只有当 Socket 真正有读写事件时，才真正调用实际的 IO 读写操作</strong>。</p><p>AIO 也就是 NIO 2，在 Java 7 中引入了 NIO 的改进版 NIO 2,它是 <strong>异步非阻塞</strong> 的 IO 模型，适合连接数目多且连接比较长（重操作）的架构，比如相册服务器。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</p><p>AIO 是异步 IO 的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO 操作本身是同步的。</p><p><strong>AIO 比 NIO 效率高的原因在于在 NIO 中，不断询问 Socket 状态是通过用户线程去实现的，但在 AIO 中，轮询 Socket 状态是内核来进行的，效率比用户线程高</strong>。</p><p>对应烧开水场景中就是，为每个水壶上面装了一个开关，水烧开之后，水壶会自动通知我水烧开了。</p><h3 id="读取大数据量文件-如何选择流" tabindex="-1"><a class="header-anchor" href="#读取大数据量文件-如何选择流" aria-hidden="true">#</a> 读取大数据量文件，如何选择流？</h3><p>选用字节流时，选择 <code>BufferedInputStream</code> 和 <code>BufferedOutputStream</code>；</p><p>选用字符流时，选用 <code>BufferedReader</code> 和 <code>BufferedWriter</code>；</p><h3 id="nio" tabindex="-1"><a class="header-anchor" href="#nio" aria-hidden="true">#</a> NIO</h3><h4 id="nio-与-io-的区别" tabindex="-1"><a class="header-anchor" href="#nio-与-io-的区别" aria-hidden="true">#</a> NIO 与 IO 的区别？</h4><table><thead><tr><th>IO</th><th>NIO</th></tr></thead><tbody><tr><td>面向流</td><td>面向缓冲</td></tr><tr><td>阻塞 IO</td><td>非阻塞 IO</td></tr><tr><td>无</td><td>选择器</td></tr><tr><td>少量连接，但每次要发送大量数据</td><td>大量连接，但连接每次只发送少量数据</td></tr></tbody></table><p>NIO 是为了弥补传统 IO 不足而诞生，但也存在如下缺点：<strong>因为 NIO 是面向缓冲区的操作，每次的数据处理均是对缓冲区进行的，所以在数据处理之前必须判断缓冲区的数据是否完整或已经读取完毕，如果没有，则假设数据只读取了一部分，对不完整的数据处理无任何意义。</strong></p><h4 id="nio-核心组件" tabindex="-1"><a class="header-anchor" href="#nio-核心组件" aria-hidden="true">#</a> NIO 核心组件</h4><ol><li>NIO 核心组件可以分为如下三个： <ul><li>channel</li><li>buffer</li><li>selector</li></ul></li><li><strong>channel</strong></li></ol><p>一个 <code>channel</code> （通道）代表和某一实体的连接，该实体可以是文件、网络套接字等。即 NIO 中的 <code>channel</code> 相当于一个中介，用于程序和操作系统底层 I/O 服务进行交互；</p><p>一般最常用的通道实现有：</p><ul><li><code>FileChannel</code>：读写文件；</li><li><code>DatagramChannel</code>：UDP 协议网络通信；</li><li><code>SocketChannel</code> ：TCP 协议网络通信；</li><li><code>ServerSocketChannel</code>：监听 TCP 连接；</li></ul><ol start="3"><li><strong>buffer</strong></li></ol><p>NIO 中的缓冲区不是一个简单的 <code>byte</code> 数组，而是封装过的 <code>Buffer</code> 类，NIO 提供了 <code>ByteBuffer、CharBuffer、IntBuffer</code> 等，他们之间的区别在于读写缓冲区时的单位长度不一样；</p><p><code>buffer</code> 有如下基本操作来进行读写数据：</p><ul><li>将数据写入 <code>buffer</code>；</li><li>调用 <code>buffer.flip()</code>；</li><li>将数据从  <code>buffer</code> 中读取数据；</li><li>调用 <code>buffer.clean</code> 或 <code>buffer.compact()</code>；</li></ul><ol start="4"><li><strong>selector</strong></li></ol><p>选择器是一个特殊组件，用于采集各个通道的状态。现将通道注册到选择器，并设置好关心的时间，然后就可以通过调用 <code>select()</code> 方法，等待事件发生即可；</p><h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h2><h3 id="collections-工具类" tabindex="-1"><a class="header-anchor" href="#collections-工具类" aria-hidden="true">#</a> Collections 工具类</h3><p><code>java.util.Collections</code> 工具类提供了许多常用方法，而且都是静态（<code>static</code>）的，可以分为如下几类：</p><ol><li><strong>排序（主要针对 List 接口）</strong></li></ol><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>void reverse(List list)</code></td><td>反转指定 <code>List</code></td></tr><tr><td>集合中元素的顺序</td><td></td></tr><tr><td><code>void shuffle(List list)</code></td><td>对 <code>List</code></td></tr><tr><td>中的元素进行随机排序（洗牌）</td><td></td></tr><tr><td><code>void sort(List list)</code></td><td>对 <code>List</code></td></tr><tr><td>里的元素根据自然升序排序</td><td></td></tr><tr><td><code>void sort(List list, Comparator c)</code></td><td>自定义比较器进行排序</td></tr><tr><td><code>void swap(List list, int i, int j)</code></td><td>将指定 <code>List</code></td></tr><tr><td>集合中 <code>i</code></td><td></td></tr><tr><td>处元素和 <code>j</code></td><td></td></tr><tr><td>处元素进行交换</td><td></td></tr><tr><td><code>void rotate(List list, int distance)</code></td><td>将所有元素向右移位指定长度，如果 <code>distance</code></td></tr><tr><td>等于 <code>size</code></td><td></td></tr><tr><td>那么结果不变</td><td></td></tr></tbody></table><ol start="2"><li><strong>查找、替换（主要针对 Collection 接口）</strong></li></ol><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>int binarySearch(List list, Object key)</code></td><td>使用二分搜索法，以获得指定对象在 <code>List</code></td></tr><tr><td>中的索引，前提是集合有序</td><td></td></tr><tr><td><code>int max(Collection coll)</code></td><td>返回最大元素</td></tr><tr><td><code>int max(Collection coll, Comparator c)</code></td><td>根据自定义比较器，返回最大元素</td></tr><tr><td><code>int min(Collection coll)</code></td><td>返回最小元素</td></tr><tr><td><code>int min(Collection coll, Comparator c)</code></td><td>根据自定义比较器，返回最小元素</td></tr><tr><td><code>void fill(List list, Object obj)</code></td><td>使用指定对象填充 <code>List</code></td></tr><tr><td><code>int frequency(Collection c, Object o)</code></td><td>返回指定集合中指定对象出现的次数</td></tr><tr><td><code>int indexOfSubList(List list, List target)</code></td><td>统计 <code>target</code></td></tr><tr><td>在 <code>list</code></td><td></td></tr><tr><td>中第一次出现的索引，找不到则返回 -1</td><td></td></tr><tr><td><code>boolean replaceAll(List list, Object oldVal, Object newVal)</code></td><td>替换</td></tr></tbody></table><ol start="3"><li><strong>同步控制</strong></li></ol><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>synchronizedCollection(Collection&lt;T&gt; c)</code></td><td>返回指定 <code>collection</code></td></tr><tr><td>支持的同步（线程安全的）<code>collection</code></td><td></td></tr><tr><td><code>synchronizedList(List&lt;T&gt; list)</code></td><td>返回指定列表支持的同步（线程安全的）<code>List</code></td></tr><tr><td><code>synchronizedMap(Map&lt;K,V&gt; m)</code></td><td>返回由指定映射支持的同步（线程安全的）<code>Map</code></td></tr><tr><td><code>synchronizedSet(Set&lt;T&gt; s)</code></td><td>返回指定 <code>set</code></td></tr><tr><td>支持的同步（线程安全的）<code>set</code></td><td></td></tr></tbody></table><ol start="4"><li><strong>设置不可变集合</strong></li></ol><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>emptyXxx()</code></td><td>返回一个空的不可变的集合对象，此处的集合可以是 <code>List</code></td></tr><tr><td>、<code>Set</code></td><td></td></tr><tr><td>、 <code>Map</code></td><td></td></tr><tr><td><code>singletonXxx()</code></td><td>返回一个只包含指定对象（只有一个或一个元素）的不可变集合对象，此处的集合可以是 <code>List</code></td></tr><tr><td>、<code>Set</code></td><td></td></tr><tr><td>、 <code>Map</code></td><td></td></tr><tr><td><code>unmodifiableXxx()</code></td><td>返回指定集合对象的不可变视图，此处的集合既可以是<code>List</code></td></tr><tr><td>、<code>Set</code></td><td></td></tr><tr><td>、 <code>Map</code></td><td></td></tr></tbody></table><h3 id="arrays-工具类" tabindex="-1"><a class="header-anchor" href="#arrays-工具类" aria-hidden="true">#</a> Arrays 工具类</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>sort()</code></td><td>排序</td></tr><tr><td><code>binarySearch</code></td><td>二分查找</td></tr><tr><td><code>equals()</code></td><td>比较</td></tr><tr><td><code>fill()</code></td><td>填充</td></tr><tr><td><code>asList()</code></td><td>转换为列表</td></tr><tr><td><code>toString()</code></td><td>转换为字符串</td></tr><tr><td><code>copyOf()</code></td><td>复制</td></tr></tbody></table><ol><li><code>sort()</code></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 数字排序</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 字符串排序</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 字符串反向排序</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 数字反向排序，此时要使用封装类</span>
<span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a4 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a4<span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a4<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 区间排序</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a5 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a5<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a5<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a5<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>bianrySearch()</code></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">312</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;原数组为：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> dim1 <span class="token operator">:</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">+</span> dim1 <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 排序</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\n排序后为：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">312</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;关键字2的返回值为：&quot;</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>equals()</code></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Arrays.equals(e, f):&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><code>fill()</code></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 全部填充</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前数组容器：&quot;</span><span class="token operator">+</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 区间填充</span>
<span class="token comment">// 填充的开始位</span>
<span class="token class-name">Integer</span> startIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 填充的结束位</span>
<span class="token class-name">Integer</span> endIndex <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> startIndex<span class="token punctuation">,</span> endIndex<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前数组容器：&quot;</span><span class="token operator">+</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><code>asList()</code></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li><code>toString()</code></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array02 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;悟空&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;八戒&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;唐僧&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array02<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array02<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li><code>copyOf()</code></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// array 和 array02 互不相干</span>

<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;array1的数组长度:&quot;</span> <span class="token operator">+</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 根据实际情况扩容</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> array<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;array2的数组长度:&quot;</span> <span class="token operator">+</span> array2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;array1:&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;array2:&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有关集合的更多内容，可以参看 <a href="4.Java%E5%AE%B9%E5%99%A8">Java 容器知识点总结</a>。</p><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2>`,67),y={href:"https://juejin.im/post/5b614848e51d45355d51f792",target:"_blank",rel:"noopener noreferrer"},f=a(`<h3 id="什么是泛型-使用泛型的好处" tabindex="-1"><a class="header-anchor" href="#什么是泛型-使用泛型的好处" aria-hidden="true">#</a> 什么是泛型？使用泛型的好处？</h3><p>泛型是 JDK 5 后引入的新特性，提供了 <strong>编译期的类型安全检测机制</strong>，确保将正确类型的对象放入集合，避免了运行时报 <code>ClassCastException</code>。其本质是 <strong>参数化类型</strong>，即所操作的数据类型被指定为一个参数。</p><p><strong>注意</strong>：虽然编译期在编译过程中移除了参数的类型信息，但会保证类或方法内部参数类型的一致性；</p><h3 id="泛型的工作机制" tabindex="-1"><a class="header-anchor" href="#泛型的工作机制" aria-hidden="true">#</a> 泛型的工作机制？</h3><p>类型擦除：指 Java 编译器生成的字节码不包含泛型信息；</p><p>泛型是通过 <strong>类型擦除</strong> 来实现，编译期在 <strong>编译时擦除所有类型相关信息</strong>，因此在运行时不存在任何类型相关的信息。我们无法在运行时访问到类型参数，因为编译器已经把泛型类型转换成了原始类型。</p><h3 id="泛型的三种使用方式" tabindex="-1"><a class="header-anchor" href="#泛型的三种使用方式" aria-hidden="true">#</a> 泛型的三种使用方式</h3><ul><li><strong>泛型类</strong>：通过传入不同类型的数据，可以存储相应类型的数据；</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 一个泛型类声明如下，在实例化时，必须指定 T 的具体类型</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> 

    <span class="token keyword">private</span> <span class="token class-name">T</span> key<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Generic</span><span class="token punctuation">(</span><span class="token class-name">T</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setKey</span><span class="token punctuation">(</span><span class="token class-name">T</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
        <span class="token keyword">return</span> key<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>泛型接口</strong>：泛型接口未传入泛型实参时，与泛型类的定义相同，在声明类的时候，需将泛型的声明也一起加到类中；若泛型接口传入类型参数时，实现该泛型接口的实现类，则所有使用泛型的地方都要替换成传入的实参类型；</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 一个泛型接口声明如下，要实现该接口，可以不指定具体类型，也可以指定具体类型</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Generator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 不指定具体类型</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneratorImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Generator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 指定具体类型</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneratorImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Generator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>泛型方法</strong>：可以存在泛型类中，也可以存在普通类中，<strong>如果用泛型方法能够解决的问题，就尽量使用泛型方法</strong>。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 一个具体的泛型方法声明如下，使用该方法时，我们可以传入不同类型的参数，提高复用率</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">E</span> <span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span> <span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inputArray <span class="token punctuation">)</span>
<span class="token punctuation">{</span>         
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token class-name">E</span> element <span class="token operator">:</span> inputArray <span class="token punctuation">)</span><span class="token punctuation">{</span>        
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;%s &quot;</span><span class="token punctuation">,</span> element <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型通配符" tabindex="-1"><a class="header-anchor" href="#泛型通配符" aria-hidden="true">#</a> 泛型通配符？</h3><ul><li><strong>T（type）</strong>：表示具体的一个 Java 类型；</li><li><strong>K V（key value）</strong>：代表 Java 键值对；</li><li><strong>E（element）</strong>：代表 Element；</li><li><strong>?</strong>：表示不确定的 Java 类型；</li></ul><h3 id="限定通配符和非限定通配符" tabindex="-1"><a class="header-anchor" href="#限定通配符和非限定通配符" aria-hidden="true">#</a> 限定通配符和非限定通配符？</h3><p><strong>限定通配符</strong> 对类型进行限制，分为两种（<code>&lt;? extends T&gt;</code> 和 <code>&lt;? super T&gt;</code>）.<code>&lt;? extends T&gt;</code> 通过确保类型必须为 <code>T</code> 的子类来设定类型的上界；而 <code>&lt;? super T&gt;</code> 通过确保类型必须是 <code>T</code> 的父类来设定类型的下界。泛型类型必须用限定内的类型来进行初始化，否则将导致编译错误。</p><p><strong>非限定通配符</strong>，<code>&lt;?&gt;</code>，可以用任意类型来替代。</p><h3 id="可以把-list-传递给一个接受-list" tabindex="-1"><a class="header-anchor" href="#可以把-list-传递给一个接受-list" aria-hidden="true">#</a> 可以把 List 传递给一个接受 List</h3><p>不可以，因为 <code>List&lt;String&gt;</code> 中只能用来存储 <code>String</code>，而  <code>List&lt;Object&gt;</code> 中却能存储任意类型的对象（<code>String、Integer</code> 等） 。</p><h3 id="array-中是否可以使用泛型" tabindex="-1"><a class="header-anchor" href="#array-中是否可以使用泛型" aria-hidden="true">#</a> Array 中是否可以使用泛型？</h3><p>不可以，但是用 <code>List</code> 来代替 <code>Array</code>，因为 <code>List</code> 可以提供编译期的类型安全保证，但 <code>Array</code> 不能。</p><h2 id="多线程" tabindex="-1"><a class="header-anchor" href="#多线程" aria-hidden="true">#</a> 多线程</h2><h3 id="线程、进程、程序" tabindex="-1"><a class="header-anchor" href="#线程、进程、程序" aria-hidden="true">#</a> 线程、进程、程序</h3>`,26),w={href:"https://juejin.im/post/5c932660f265da612524ad6d",target:"_blank",rel:"noopener noreferrer"},I=a('<ol><li><strong>程序</strong></li></ol><p>程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个<strong>静态</strong>的概念。</p><ol start="2"><li><strong>线程</strong></li></ol><p>有时被称为轻量进程(Lightweight Process，LWP），<strong>是程序执行流的最小单元，是被系统独立调度和分派的基本单位</strong>。线程是比进程更小的执行单位，一个进程在执行过程中可能会产生多个线程，但 <strong>不同于进程是同类的多个线程共享同一块内存空间和一组系统资源</strong>。</p><ol start="3"><li><strong>进程</strong></li></ol><p>进程是据有独立功能的程序在某个数据集合上的一次运行活动，<strong>也是操作系统进行资源分配和保护的基本单位</strong>，因此是动态的。</p><p>从 <strong>原理</strong> 角度上看：进程是支持程序执行的一种系统机制，对 CPU 上运行程序的活动规律进行抽象。</p><p>从 <strong>实现</strong> 角度看：进程是一种数据结构，用来准确的刻画运行程序的状态和系统动态变化状况。</p><p>系统运行一个程序即是一个进程从创建，运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如 CPU 时间，内存空间，文件，输入输出设备的使用权等等。</p><p>换句话说，当程序在执行时，将会被操作系统载入内存中。 线程是进程划分成的更小的运行单位。<strong>线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定</strong>，因为同一进程中的线程极有可能会相互影响。</p><p>从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。</p><h3 id="线程基本状态" tabindex="-1"><a class="header-anchor" href="#线程基本状态" aria-hidden="true">#</a> 线程基本状态</h3><table><thead><tr><th>状态</th><th>说明</th></tr></thead><tbody><tr><td><code>NEW</code></td><td>初始状态，创建线程，但还未调用 <code>start()</code></td></tr><tr><td>方法</td><td></td></tr><tr><td><code>RUNNABLE</code></td><td>运行状态，“就绪” 和 “运行” 两种状态统称 “运行中”</td></tr><tr><td><code>BLOCKED</code></td><td>阻塞状态，表示线程阻塞于锁</td></tr><tr><td><code>WAITING</code></td><td>等待状态，线程进行等待状态，进入该状态表示当前线程需要等待其他线程做出通知或中断</td></tr><tr><td><code>TIME_WAITING</code></td><td>超时等待状态，不同于 <code>WAITING</code></td></tr><tr><td>，经过指定时间后可以自行返回</td><td></td></tr><tr><td><code>TERMINATED</code></td><td>终止状态，表示线程执行完毕</td></tr></tbody></table><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图源自《Java 并发编程艺术》，可以看出一个线程的状态变迁过程：</p><p>线程创建后处于 <code>NEW</code> 状态，然后调用 <code>start()</code> 方法后开始运行，此时处于 <code>READY</code> 状态，接着一旦可运行状态的线程获得了 CPU 时间片之后，就处于 <code>RUNNING</code> 状态。如果线程执行了 <code>wait()</code> 方法，则进入 <code>WAITING</code> 状态。进入 <code>WAITING</code> 状态的线程池需要依靠其他线程的通知后才能返回 <code>RUNNING</code> 状态。而 <code>TIME_WAITING</code> 状态相当于在 <code>WAITING</code> 状态的基础上增加了超时限制，当超时后线程将自动返回 <code>RUNNABLE</code> 状态。当线程调用同步方法后，如果没有获取到锁，线程将进入 <code>BLOCKED</code> 状态。同时，如果线程执行了 <code>RUNNABLE</code> 的 <code>run()</code> 方法，线程将进入 <code>TERMINATED</code> 状态。</p><h3 id="使用多线程的三种方式" tabindex="-1"><a class="header-anchor" href="#使用多线程的三种方式" aria-hidden="true">#</a> 使用多线程的三种方式</h3><ol><li><strong>继承 Thread 类</strong></li></ol><p>需要实现 <code>run()</code> 方法，其底层也实现了 <code>Runnable</code> 接口。当调用 <code>start()</code> 方法启动一个线程时，虚拟机会将该线程放入就绪队列中等待被调度，当一个线程被调度时会执行该线程的 <code>run()</code>方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyThread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">MyThread</span> myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;运行结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>实现 Runnable 接口</strong></li></ol><p>使用 <code>Runnable</code> 实例再创建一个 <code>Thread</code> 实例，然后调用 <code>Thread</code> 实例中的 <code>start()</code> 方法来启动线程。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyRunnable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Runnable</span> runnable<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> thread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;运行结束！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>实现 Callable 接口</strong></li></ol><p>相比于 <code>Runnable</code>，<code>Callable</code> 可以有返回值，结果通过 <code>FutureTask</code> 进行封装；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">MyCallable</span> myCallable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>myCallable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;运行结束！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线程优先级" tabindex="-1"><a class="header-anchor" href="#线程优先级" aria-hidden="true">#</a> 线程优先级</h3><p>每个线程都有各自优先级，默认情况下均为 <code>Thread.NORM_PRIORITY(5)</code>。线程优先级能在程序中表明该线程的重要性，若许多线程均处于就绪状态，系统就会根据优先级来决定哪一个线程优先进入运行状态。线程优先级均在 <code>Thread.MIN_PRIORITY(1)</code> 到 <code>Thread.MAX_PRIORITY(10)</code> 之间，数字越大，优先级越高，线程优先级有以下两个特点：</p><ul><li><strong>继承性</strong>：如 A 线程启动 B 线程，则 B 线程的优先级和 A 线程一样；</li><li><strong>随机性</strong>：线程优先级高的不一定每次都先执行完，只能说是优先开始执行；</li></ul><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射" aria-hidden="true">#</a> 反射</h2>`,33),x={href:"https://zhuanlan.zhihu.com/p/80519709",target:"_blank",rel:"noopener noreferrer"},O=a('<h3 id="反射的定义及作用" tabindex="-1"><a class="header-anchor" href="#反射的定义及作用" aria-hidden="true">#</a> 反射的定义及作用？</h3><p>反射（<code>Reflection</code>）允许运行中的 Java 程序获取自身信息，并且可以操作类或对象的内部属性。<strong>核心</strong> 是 <strong>JVM 在运行时才动态加载类或调用方法/访问属性，无需事先知道运行对象是谁</strong>，主要提供如下功能：</p><ul><li><strong>运行时</strong> 判断任意一个对象所属类；</li><li><strong>运行时</strong> 构造任意一个类的对象；</li><li><strong>运行时</strong> 判断任意一个类所具有的成员变量和方法；</li><li><strong>运行时</strong> 调用任意一个对象的方法；</li><li>生成动态代理</li></ul><p><code>Class</code> 和 <code>java.lang.reflect</code> 共同对反射提供了支持，<code>java.lang.reflect</code> 类库中主要包含了如下三个类：</p><ul><li><strong>Field</strong>：用 <code>get()</code> 和 <code>set()</code> 方法来读取和修改 <code>Field</code> 对象相关联的成员属性；</li><li><strong>Method</strong>：利用 <code>invoke()</code> 方法调用与 <code>Method</code> 对象相关联的方法；</li><li><strong>Constructor</strong>：利用 <code>Construcctor</code> 中的 <code>newInstance()</code> 创建新的对象；</li></ul><h3 id="反射的优缺点" tabindex="-1"><a class="header-anchor" href="#反射的优缺点" aria-hidden="true">#</a> 反射的优缺点</h3><ol><li><strong>静态和动态编译</strong></li></ol><ul><li><strong>静态编译</strong>：在编译时确定类型，绑定对象</li><li><strong>动态编译</strong>：在运行时确定类型，绑定对象</li></ul><p>两者区别在于，动态编译能最大化支持多态，降低类的耦合性。</p><ol start="2"><li><strong>优点</strong></li></ol><ul><li>运行时判断类，动态加载类，提高了代码的灵活度；</li><li>最大化支持多态，降低类的耦合性；</li></ul><ol start="3"><li><strong>缺点</strong></li></ol><ul><li><strong>性能开销</strong>：反射相当于一系列解释操作，告知 JVM 要做的事，比直接的代码要慢；</li><li><strong>安全限制</strong>：反射要求程序必须在一个无安全限制的环境下运行，如果一个程序必须要在安全的环境中运行，那么就无法应用反射了；</li><li><strong>内部暴露</strong>：我们虽然可以动态操作改变类的属性，但同时也暴露了类的内部；</li></ul><h3 id="反射的基本运用" tabindex="-1"><a class="header-anchor" href="#反射的基本运用" aria-hidden="true">#</a> 反射的基本运用</h3><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="如何利用反射创建对象" tabindex="-1"><a class="header-anchor" href="#如何利用反射创建对象" aria-hidden="true">#</a> 如何利用反射创建对象</h3><ol><li>通过 <code>Class.forName()</code> 获取一个对象；</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># 前提是已知类的全路径名
<span class="token class-name">Class</span> class2 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;全限名&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用 <code>.class</code> 属性；</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># 前提是已知要操作的类
<span class="token class-name">Class</span> class2 <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>使用类对象的 <code>getClass()</code> 方法；</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span> class3 <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="反射中的一些注意事项" tabindex="-1"><a class="header-anchor" href="#反射中的一些注意事项" aria-hidden="true">#</a> 反射中的一些注意事项</h3><ol><li>反射会额外消耗一定系统资源，因此如果不需要动态创建一个对象，那么就尽量别用反射；</li><li>反射调用方法时可以忽略权限检查，因此可能会破坏封装性而导致安全问题；</li></ol><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解" aria-hidden="true">#</a> 注解</h2>`,25),S={href:"https://www.cnblogs.com/acm-bingzi/p/javaAnnotation.html",target:"_blank",rel:"noopener noreferrer"},j=a('<h3 id="什么是注解" tabindex="-1"><a class="header-anchor" href="#什么是注解" aria-hidden="true">#</a> 什么是注解？</h3><p>Java 注解是附加在代码中的一些元信息，从 Java 5 开始引入的特性，用于一些工具在编译、运行时进行解析和使用，起着 **说明、配置的功能。**不会也不能影响代码实际逻辑，只起辅助性作用。</p><h3 id="注解的用途" tabindex="-1"><a class="header-anchor" href="#注解的用途" aria-hidden="true">#</a> 注解的用途？</h3><ol><li>生成文档，比如 <code>@param、@return</code> 等用于给方法生成文档；</li><li>跟踪代码依赖性，实现替代配置文件功能；</li><li>在编译时进行格式检查，如 <code>@Override</code> 放在方法前，表明该方法要覆盖父类方法；</li></ol><h3 id="注解的原理" tabindex="-1"><a class="header-anchor" href="#注解的原理" aria-hidden="true">#</a> 注解的原理？</h3><p>注解实质上是继承了 <code>Annotation</code> 的特殊接口，具体实现类是 Java 运行时生成的动态代理类。当我们通过反射机制获取注解的时候，返回的是 Java 运行时所生成的动态代理对象。通过该代理对象来调用自定义注解（方法）的方法，最终会调用 <code>AnnotationInvocationHandler</code> 的 <code>invoke()</code> 方法。方法从 <code>memberValues</code> 中索引出对应值（<code>memberValues</code> 是一个 <code>Map</code>，来源于 Java 常量池）。</p><h3 id="元注解" tabindex="-1"><a class="header-anchor" href="#元注解" aria-hidden="true">#</a> 元注解</h3><p><code>java.lang.annotation</code> 中提供了四种元注解，用于注解其他注解（一般用于我们自定义注解时）。</p><table><thead><tr><th>元注解</th><th>说明</th></tr></thead><tbody><tr><td><code>Retention</code></td><td>定义注解声明周期：</td></tr></tbody></table><ol><li><code>SOURCE</code> ：编译阶段</li><li><code>CLASS</code> ：类加载时</li><li><code>RUNTIME</code> ：始终不丢弃 | | <code>Documented</code> | 是否将该注解信息加入 Java 文档 | | <code>Target</code> | 定义注解作用域</li><li><code>CONSTRUCTOR</code></li><li><code>FIELD</code></li><li><code>LOCAL_VARIABLE</code></li><li><code>METHOD</code></li><li><code>PACKAGE</code></li><li><code>PARAMETER</code></li><li><code>TYPE</code> | | <code>Inherited</code> | 定义注解和子类的关系 |</li></ol><h3 id="自定义注解的规则" tabindex="-1"><a class="header-anchor" href="#自定义注解的规则" aria-hidden="true">#</a> 自定义注解的规则</h3><ol><li>注解应该定义为  <code>@interface</code>；</li><li>参数成员只能用 <code>public</code> 或 <code>default</code> 两个访问控制符；</li><li>参数成员只能有 8 大基本数据类型和 <code>String、Enum、Class、annotation</code> 等数据类型及其数组；</li><li>获取类方法或字段的注解信息，必须通过反射技术来获取 <code>Annotation</code> 对象；</li><li>注解中可以定义成员；</li></ol>',12);function q(T,N){const t=p("ExternalLinkIcon");return c(),l("div",null,[v,n("p",null,[s("推荐阅读："),n("a",m,[s("https://www.zhihu.com/question/39262026"),e(t)])]),b,n("p",null,[s("推荐阅读："),n("a",h,[s("https://zhuanlan.zhihu.com/p/83597838"),e(t)])]),g,n("p",null,[s("推荐阅读："),n("a",y,[s("https://juejin.im/post/5b614848e51d45355d51f792"),e(t)])]),f,n("p",null,[s("推荐阅读："),n("a",w,[s("https://juejin.im/post/5c932660f265da612524ad6d"),e(t)])]),I,n("p",null,[s("推荐阅读："),n("a",x,[s("https://zhuanlan.zhihu.com/p/80519709"),e(t)])]),O,n("p",null,[s("推荐阅读："),n("a",S,[s("https://www.cnblogs.com/acm-bingzi/p/javaAnnotation.html"),e(t)])]),j])}const _=o(k,[["render",q],["__file","20240203-java-advanced.html.vue"]]);export{_ as default};
