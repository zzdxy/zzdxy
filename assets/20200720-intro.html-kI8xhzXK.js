import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,e as p}from"./app-Svquv1Du.js";const i="/zzdxy/assets/7294d205368932cf9f740cda96d73cd9-01XrMAxS.webp",t="/zzdxy/assets/a7e669fff1ccfbd462d1e7187781f9b0-KpkLnlPF.webp",e={},o=p('<h1 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>为了解决我们开发者在 J2EE 开发时所遇到的众多问题，Rob Johnson 等人发起了 Spring 框架项目。Spring 是一个开源的 J2EE 应用程序框架，是针对 Bean 的生命周期进行管理的轻量级容器。它既可以单独用于构建程序，也能和当前众多的 Web 框架进行组合使用，能够十分方便的降低当前企业应用开发的复杂性。既然 Spring 如此强大，那我们今天就来探究一下 Spring 的内容。</p><h2 id="spring-概览" tabindex="-1"><a class="header-anchor" href="#spring-概览" aria-hidden="true">#</a> Spring 概览</h2><p>Spring 其实是一个很大的范围概称，包含着许多分支，在正式了解 Spring 之前，我们先来看看 Spring 家族中的主要分支。</p><h3 id="spring-framewok" tabindex="-1"><a class="header-anchor" href="#spring-framewok" aria-hidden="true">#</a> Spring FrameWok</h3><p>Spring 领域中其他一切的基础，提供了 <strong>核心容器和依赖注入框架</strong>，还提供了一些基本数据持久性支持，特别是基于模板的 JDBC 文件。</p><h3 id="spring-boot" tabindex="-1"><a class="header-anchor" href="#spring-boot" aria-hidden="true">#</a> Spring Boot</h3><p>Spring Boot 不仅提供了 <strong>启动依赖和自动配置</strong>，还提供了如下的其他特性：</p><ol><li><p>Actuator 提供了对应用程序内部工作方式的运行时监控，包括端点、线程 dump 信息、应用程序健康状况和应用程序可用的环境属性。</p></li><li><p>灵活的环境属性规范。</p></li><li><p>核心框架的辅助测试之外的额外测试支持。</p></li></ol><h3 id="spring-data" tabindex="-1"><a class="header-anchor" href="#spring-data" aria-hidden="true">#</a> Spring Data</h3><p>将应用程序的数据存储库抽象为简单的 Java 接口，同时当定义方法用于驱动数据进行存储和检索的问题时，对方法使用了命名约定。此外还能处理几种不同类型的数据库，包括包括关系型（JPA）、文档型（Mongo）、图型（Neo4j）等。</p><h3 id="spring-security" tabindex="-1"><a class="header-anchor" href="#spring-security" aria-hidden="true">#</a> Spring Security</h3><p>Spring Security 解决了广泛的应用程序安全性需求，包括身份验证、授权和 API 安全性等一系列工作。</p><h3 id="spring-integration-和-spring-batch" tabindex="-1"><a class="header-anchor" href="#spring-integration-和-spring-batch" aria-hidden="true">#</a> Spring Integration 和 Spring Batch</h3><p>Spring Integration 解决了实时集成，即数据在可用时进行处理。相反，Spring Batch 解决了批量集成的问题，允许在一段时间内收集数据，直到某个触发器（可能是一个时间触发器）发出信号，表示该处理一批数据。</p><h3 id="spring-cloud" tabindex="-1"><a class="header-anchor" href="#spring-cloud" aria-hidden="true">#</a> Spring Cloud</h3><p>Spring Cloud 是一组用 Spring 开发云本地应用程序的项目。</p><p>Spring 是为了减少 EJB 的复杂性而创建的一套解决方案，而 EJB 过于臃肿，使用 Spring 能够让 Java Bean 之间进行有效的解耦。而且 Spring 不仅仅局限于服务端的开发，在测试性和松耦合方面均有较好表现。</p><h2 id="什么是-spring" tabindex="-1"><a class="header-anchor" href="#什么是-spring" aria-hidden="true">#</a> 什么是 Spring</h2><h3 id="spring-简介" tabindex="-1"><a class="header-anchor" href="#spring-简介" aria-hidden="true">#</a> Spring 简介</h3><p>我们日常所说的 Spring，实际上指的是 Spring Framework，属于 Spring 家族的一个分支。</p><p>Spring 的核心是一个 <strong>容器</strong>，常称为 <strong>Spring 应用程序上下文</strong>，用于创建和管理应用程序组件。组件（或 Bean）在 Spring 应用程序上下文中连接在一起互相构成一个完整的应用程序。</p><p>那么是如何将各种 Bean 连接在一起呢？这就是 Spring 中最重要的特性之一：<strong>依赖注入（DI）</strong>。</p><p><strong>依赖注入（DI）</strong>：通过依赖注入的应用程序 <strong>不是</strong> 由组件自身创建和维护其所依赖的其他 Bean 的生命周期，<strong>而是依赖于单独的实体（容器）来创建和维护所有组件，并将这些组件注入需要他们的 Bean，通常是通过构造函数或属性访问器方法来完成</strong>。</p><h3 id="spring-的特点" tabindex="-1"><a class="header-anchor" href="#spring-的特点" aria-hidden="true">#</a> Spring 的特点</h3><ul><li><p>方便解耦，简化开发过程；</p></li><li><p>支持面向切面编程（Aop），方便我们不用修改源码就能对功能进行增强；</p></li><li><p>整合支持 Junit，方便程序的测试；</p></li><li><p>既可以独立构建程序，也支持各种框架，而且大大降低各种框架使用难度；</p></li><li><p>支持事务管理，方便进行事物操作；</p></li><li><p>降低了各种 API 的开发难度；</p></li></ul><h3 id="spring-的组成" tabindex="-1"><a class="header-anchor" href="#spring-的组成" aria-hidden="true">#</a> Spring 的组成</h3><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Spring 是一个分层架构，主要由如下 7 大模块所构成。Spring 模块位于核心容器，定义了创建、配置和管理 Bean 的方式。</p><ol><li><p><strong>Spring Core</strong>：提供 Spring 框架基本功能，主要组件是 BeanFactory，是工厂模式的实现，通过 IOC 机制将应用程序的配置和依赖性规范与实际的应用程序代码分开。</p></li><li><p><strong>Spring Context</strong>：一个配置文件，给 Spring 框架提供上下文信息，上下文包括 JNDI、EJB、电子邮件、国际化、校验和调度等企业服务。</p></li><li><p><strong>Spring AOP</strong> ：通过配置管理特性，Spring AOP 直接将 AOP（面向切面）功能集成到 Spring 框架。从而我们能够十分方便的使用 Spring 框架来管理任何支持 AOP 的对象。模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用该组件，可以不依赖其他组件九江声明性事务管理集成到应用程序中。</p></li><li><p><strong>Spring DAO</strong>：JDBC DAO 抽象层提供了有意义的异常层次结构，可以用来管理异常处理和不同数据库供应商抛出的错误信息。异常层次结构简化了错误处理，而且极大降低了需要编写的异常代码数量。Spring DAO 面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</p></li><li><p><strong>Spring ORM</strong>：Spring 框架中插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map，这些都遵从 Spring 的通用事务和 DAO 异常层次结构；</p></li><li><p><strong>Spring Web</strong>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文，所以 Spring 框架支持与 Jakarta Structs 的集成。同时该模块还简化了处理多部分请求以及请求参数绑定到域对象的工作。</p></li><li><p><strong>Spring Web MVC</strong>：MVC 是一个全功能的构建 Web 应用的 MVC 实现，可以通过策略接口对 MVC 框架实现高度可配置。而且 MVC 还容纳了 JSP、Velocity、Tiles 等视图技术。</p></li></ol><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="xml-配置-vs-java-配置" tabindex="-1"><a class="header-anchor" href="#xml-配置-vs-java-配置" aria-hidden="true">#</a> XML 配置 VS Java 配置</h3><p>对于之前的版本，Spring 容器将各个组件连接起来的方式是通过 XML 配置，但现在的版本中更多的是使用基于 Java 的配置，如下面基于 XML 的配置等效于基于 Java 的配置。</p><ul><li>基于 XML 配置</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>productService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">calss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.cunyu.ProductService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>consumerService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.cunyu.ConsumerService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>productService<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>基于 Java 配置</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceConfig</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ProductService</span> <span class="token function">productService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ConsumerService</span> <span class="token function">consumerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConsumerService</span><span class="token punctuation">(</span><span class="token function">productService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在基于 Java 的配置中，<code>@Configuration</code> 向 Spring 表明该类是一个配置类，为 Spring 应用程序上下文提供 Bean。而 <code>@Bean</code> 注解则指示类方法返回的对象应作为 Beans 添加到应用程序上下文中。</p><p>那你可能想，既然之前有了 XML 配置的方式，那么为什么后来的版本中又加入了基于 Java 的配置方式呢？基于 Java 的配置方式相比于 XML 的配置方式，<strong>包含了更高的类型安全性和更高的可重构性</strong>。而且仅当 Spring 无法自动配置组件时，才需要通过 <strong>XML的配置方式</strong> 或者 <strong>基于 Java 的配置方式</strong> 来进行显式配置。</p><p><strong>自动配置</strong> 即 <strong>自动装配 + 组件扫描</strong>。有赖于 <strong>组件扫描</strong>，Spring 能 <strong>自动从应用程序的类路径中发现组件，同时将其创建为 Spring 应用程序上下文中的 Bean</strong>。而通过 <strong>自动装配，Spring 将自动将组件与其所依赖的其他 Bean 一起注入</strong>。</p><p>最近随着 Spring Boot 的推出，自动配置的优势进一步加强，在这种配置中，Spring Boot 将根据 <strong>类路径中的条目、环境变量和其他因素，合理猜测所需配置的组件，将其连接在一起</strong>。Spring Boot 中的自动配置大大减少了构建应用程序所需的显式配置的数量，增强了 Spring 开发的能力。</p><h2 id="初始化-spring-应用程序" tabindex="-1"><a class="header-anchor" href="#初始化-spring-应用程序" aria-hidden="true">#</a> 初始化 Spring 应用程序</h2><h3 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构" aria-hidden="true">#</a> 项目结构</h3><p>对于一个 Spring 项目而言，其结构主要包括以下部分：</p><ol><li><code>src/main/java</code>：该目录主要包含应用程序的源码，主要可分为如下几类：</li></ol><ul><li><ul><li><code>build</code> ：工程启动类；</li><li><code>entity</code> ：实体类；</li></ul></li><li><ul><li><code>mapper</code> ：数据访问层；</li><li><code>service</code> ：数据服务层，业务类代码；</li></ul></li><li><ul><li><code>controller</code> ：前端访问控制器；</li><li><code>config</code> ：配置信息类；</li></ul></li><li><ul><li><code>dto</code>：数据传输层；</li><li><code>utils</code> ：工具类；</li></ul></li><li><ul><li><code>constant</code> ：常用接口类；</li><li><code>vo</code> ：数据传输类；</li></ul></li><li><ul><li><code>Application.java</code>：项目的启动类；</li></ul></li></ul><ol><li><p><code>src/main/resources</code>：相关资源文件；</p></li><li><p><code>src/test/java</code>：测试相关代码；</p></li><li><p><code>src/test/resources</code>：测试相关资源；</p></li><li><p><code>pom.xml</code>：Maven 构建规范，包含一些项目及依赖方面的配置。</p></li></ol><h3 id="项目启动类" tabindex="-1"><a class="header-anchor" href="#项目启动类" aria-hidden="true">#</a> 项目启动类</h3><p>项目启动类，即运行 jar 文件时用来引导应用程序执行的类，也就是项目结构中的 <code>Application.java</code>，下面是一个项目启动类的实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TacoCloudApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">TacoCloudApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>@SpringBootApplication</code> 注解说明该类是一个 Spring 引导应用程序，但实际上它是组合了下列三个注解的复合应用注解：</p><ul><li><p><code>@SpringBootConfiguration</code>：<strong>指定该类为配置类</strong>。</p></li><li><p><code>@EnableAutoConfiguration</code>：<strong>启用 Spring 自动配置</strong>。</p></li><li><p><code>@ComponentScan</code>：<strong>启用组件扫描</strong>。允许声明其他带有 <code>@Component</code>、<code>@Controller</code>、<code>@Service</code> 等注解的类，以便让Spring 自动发现他们并将他们注册为 Spring 应用程序上下文中的组件。</p></li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>OK，总结一下今天的内容，主要讲了：</p><ol><li><p>Spring 家族成员的内容；</p></li><li><p>Spring 的概念</p></li><li><p>Spring 的特点</p></li><li><p>Spring 的组成</p></li><li><p>配置 Spring 的两种方式</p></li><li><p>一个 Spring 项目常见的项目结构</p></li></ol><p>好了，以上就是今天的所有内容了。原创不易，如果你觉得我的内容对你有所帮助，那就帮忙点赞关注吧！</p>`,57),c=[o];function r(l,u){return a(),s("div",null,c)}const k=n(e,[["render",r],["__file","20200720-intro.html.vue"]]);export{k as default};
