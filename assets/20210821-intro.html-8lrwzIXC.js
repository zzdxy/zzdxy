import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as i,c as a,e as s}from"./app-WwTsJovB.js";const d="/zzdxy/assets/3e844de7150edd7572c5885d74ca460a-6BX6UCz7.webp",l="/zzdxy/assets/c696aad772c19064a510611f2aba510b-oEuosbBb.webp",n="/zzdxy/assets/9157f1aefe0a16896cbe9b6cb1207b03-1lNLLmWX.webp",t="/zzdxy/assets/b44a87d43582438e868d9c6a12d2d4d1-lhTcudXS.webp",r="/zzdxy/assets/c4981f9ac4f58604c550987bd1431b4e-g6ahXA8Q.webp",o="/zzdxy/assets/262779ed07c117d6754f62975cee3f18-vX8zZrUR.webp",c={},h=s('<h1 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>说到 Redis，大家可能第一反应就是它是当前最受欢迎的 NoSQL 数据库之一。那么在正式介绍 Redis 之前，我们先来看看关于 NoSQL 的一些相关信息，比如它是什么，又比如它的一些特点以及它的一些分类。那么我们接下来就从以上三个方面来对 NoSQL 的相关历史做一个简单介绍，然后再去看看 Redis 的相关知识。</p><h3 id="什么是-nosql" tabindex="-1"><a class="header-anchor" href="#什么是-nosql" aria-hidden="true">#</a> 什么是 NoSQL</h3><blockquote><p><strong>NoSQL = Not Only SQL</strong></p></blockquote><p><strong>泛指非关系型数据库</strong>，随 Web2.0 的诞生，传统关系型数据库难以应对 Web2.0，尤其是超大规模的高并发社区。NoSQL 在当今大数据程序下较为流行。</p><h3 id="nosql-特点" tabindex="-1"><a class="header-anchor" href="#nosql-特点" aria-hidden="true">#</a> NoSQL 特点</h3><ol><li><strong>高扩展性</strong>（数据间无关系，容易扩展）</li><li><strong>大数据量高性能</strong>（官方给定数据，写操作 8w次/s，读操作 11w次/s）</li><li><strong>数据类型多样</strong>（无需事先设计数据库，随取随用）</li><li><strong>高可用</strong></li><li>传统 RDBMS 和 NoSQL <ul><li>传统 RDBMS <ul><li>结构化组织</li><li>SQL</li><li>数据和关系均存在单独的表中</li><li>操作数据定义语言</li><li>严格的一致性</li><li>基础的事务</li><li>……</li></ul></li><li>NoSQL <ul><li>不仅仅是数据</li><li>无固定查询语言</li><li>键值对存储，列存储、文档存储、图形数据库</li><li>最终一直性</li><li>CAP 定理和 BASE</li><li>高性能，高可用，高可拓</li><li>……</li></ul></li></ul></li></ol><h3 id="nosql-的四大分类" tabindex="-1"><a class="header-anchor" href="#nosql-的四大分类" aria-hidden="true">#</a> NoSQL 的四大分类</h3><p>NoSQL 主要可以分为如下四大类，然后关于各类的实例、应用场景、数据模型以及各个类型的一些优缺点，可以参见下面的表。</p><ol><li><strong>KV 键值对</strong></li><li><strong>文档型数据库（bson &amp; json）</strong></li><li><strong>列存储数据库</strong></li><li><strong>图关系数据库</strong></li></ol><table><thead><tr><th>分类</th><th>实例</th><th>应用场景</th><th>数据模型</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><strong>键值对（key-value）</strong></td><td>Redis、Voldemort</td><td>内存缓存，用于处理大量数据的高访问负载，也可用于日志系统等</td><td>key 指向 value 的键值对，通常是用 HashTable 来实现</td><td>查找速度快</td><td>数据无结构化，通常只被当做字符串或二进制数据</td></tr><tr><td><strong>列存储数据库</strong></td><td>HBase</td><td>分布式文件系统</td><td>以列簇式存储，讲同一列数据存储在一起</td><td>1. 查找速度快<br>2. 扩展性强<br>3. 更容易进行分布式扩展</td><td>功能相对局限</td></tr><tr><td><strong>文档型数据库</strong></td><td>MongoDb</td><td>Web 应用，类似于 Key-Value</td><td>key-value 对应的键值对，value 为结构化的数据</td><td>1. 数据结构要求宽松<br>2. 表结构可变，无需像关系型数据库一样预先定义表结构</td><td>查询性能低，且查询语法不统一</td></tr><tr><td><strong>图形数据库（Graph）</strong></td><td>Neo4j、InfoGrid</td><td>社交网络、推荐系统等</td><td>图结构</td><td>可以利用图结构相关算法，如最短路径寻址、N度关系查找等</td><td>许多时候需要对整个图进行计算才能得到最终结果，效率不高；而且做分布式集群较困难</td></tr></tbody></table><h2 id="什么是-redis" tabindex="-1"><a class="header-anchor" href="#什么是-redis" aria-hidden="true">#</a> 什么是 Redis</h2><p>以上对 NoSQL 做了一个简介之后，接下来就轮到我们今天的主角 - Redis 了。接下来，我将从相关简介，如何安装以及常用基本操作几个方面来对 Redis 进行介绍。</p><h3 id="redis-特点" tabindex="-1"><a class="header-anchor" href="#redis-特点" aria-hidden="true">#</a> Redis 特点</h3><p>Redis 是一个高性能的开源的 <code>key-value</code> 数据库，底层由 C 语言实现，相比于其他同类型产品，有如下特点。</p><ul><li>支持数据持久化，可以将内存中的数据保存在磁盘中，重启时再次加载使用即可；</li><li>不仅支持 <code>key-value</code> 类型的数据，同时还支持 <code>list、set、hash、zset</code> 等数据结构的存储；</li><li>支持 <code>master-slave</code> 模式的数据备份；</li></ul><h3 id="redis-优势" tabindex="-1"><a class="header-anchor" href="#redis-优势" aria-hidden="true">#</a> Redis 优势</h3><ul><li>高性能；</li><li>支持的数据类型丰富；</li><li>原子性，要么成功执行，要么失败完全不执行。单个操作时原子性的，多个操作也支持事务，通过 <code>MULTI</code> 和 <code>EXEC</code> 指令封装；</li><li>支持其他丰富的特性，如 <code>publish/subscribe</code>，通知，<code>key</code> 过期等；</li></ul><h3 id="redis-的应用场景" tabindex="-1"><a class="header-anchor" href="#redis-的应用场景" aria-hidden="true">#</a> Redis 的应用场景</h3><ol><li>内存存储、持久化</li><li>高效率，可以用于高速缓存</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器</li><li>任务队列</li><li>数据过期处理</li><li>应用排行榜</li><li>……</li></ol><h3 id="redis-和其他-key-value-数据库的不同" tabindex="-1"><a class="header-anchor" href="#redis-和其他-key-value-数据库的不同" aria-hidden="true">#</a> Redis 和其他 key - value 数据库的不同</h3><ol><li>Redis 的数据结构更加复杂且提供对他们的原子性操作，而且基于基本数据结构的同时也对程序员透明，无需进行额外抽象；</li><li>Redis 运行在内存中但是可以持久化到硬盘，所以在对不同数据集进行高速读写是需要权衡内存大小，数据量不能大于硬件内存；</li></ol><h2 id="redis-安装" tabindex="-1"><a class="header-anchor" href="#redis-安装" aria-hidden="true">#</a> Redis 安装</h2><h3 id="windows-下安装" tabindex="-1"><a class="header-anchor" href="#windows-下安装" aria-hidden="true">#</a> Windows 下安装</h3><ol><li>去下载安装包，https://github.com/tporadowski/redis/releases，支持 32 和 64 位，按需下载即可；</li><li>解压缩下载后的压缩包，并存在你自己指定的目录；</li></ol><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>打开终端，然后切换到 Redis 目录，运行如下命令即可：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./redis-server.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="4"><li>打开另一个窗口，在 Redis 目录下运行另一个 Redis，然后进行设置和取出键值对测试；</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./redis-cli.exe
<span class="token comment"># 设置键值对</span>
<span class="token builtin class-name">set</span> key <span class="token string">&quot;cunyu&quot;</span>
<span class="token comment"># 取出键值对</span>
get
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+n+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="linux-下安装" tabindex="-1"><a class="header-anchor" href="#linux-下安装" aria-hidden="true">#</a> Linux 下安装</h3><ol><li>下载最新版本安装包，http://redis.cn/download</li><li>使用如下命令解压安装包到你需要存储的位置，然后进行编译</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>＃　解压
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> redis-6.0.6.tar.gz
＃　进入文件夹
<span class="token builtin class-name">cd</span> redis-6.0.6
＃　编译
<span class="token function">make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>在一个终端中启动服务端</li></ol><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="4"><li>在另一个终端中启动客户端进行测试</li></ol><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><p>当在控制台中获取中文键值时，可能会出现乱码的情况，此时，可以通过在启动客户端时加入 <code>--raw</code> 参数即可解决；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 可能乱码的启动方式</span>
./redis-cli
<span class="token comment"># 解决乱码的启动方式</span>
./redis-cli <span class="token parameter variable">--raw</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基本操作及常识" tabindex="-1"><a class="header-anchor" href="#基本操作及常识" aria-hidden="true">#</a> 基本操作及常识</h2><ol><li>选择对应数据库</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># redis 默认提供 16 个数据库，默认使用 0 号数据库</span>
<span class="token keyword">select</span> num<span class="token punctuation">(</span>数据库编号<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>获取数据库名</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>get name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>查看数据库大小</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>DBSIZE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>查看数据库所有 key</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>keys *
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>清空数据库</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 清空所有数据库</span>
FLUSHALL

<span class="token comment"># 清空当前数据库</span>
flush db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>查看某 key 是否存在</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>EXISTS key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="7"><li>移除当前 key</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>move key value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="8"><li>设置 key 过期时间</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># time 时间单位为秒</span>
EXPIRE key <span class="token function">time</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="9"><li>查看当前 key 的类型</li></ol><div class="language-time line-numbers-mode" data-ext="time"><pre class="language-time"><code>type key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>OK，以上就是今天的所有内容了。主要介绍了 NoSQL 的相关知识，接着引入 Redis 的特点、优点、应用场景、和其他同类型数据库的区别、然后介绍 Redis 的安装以及安装过程中需要注意的事项，最后则是对 Redis 在日常使用时使用最频繁的一些命令进行了说明。</p><p>最后，原创不宜，如果你觉得本文对你有所帮助，还请各位点赞关注一波，也算是对我的一种鼓励吧，让我能够继续坚持！</p>`,66),u=[h];function b(v,m){return i(),a("div",null,u)}const f=e(c,[["render",b],["__file","20210821-intro.html.vue"]]);export{f as default};
