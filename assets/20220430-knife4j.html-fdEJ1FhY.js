import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as i,a as n,b as s,d as t,e}from"./app-Svquv1Du.js";const l="/zzdxy/assets/8b6f5004e1f91d1abcffbb8b4d380b2e-20240205215323505-Vx5zJHX0.webp",u="/zzdxy/assets/3365c280ea9b48d4fde5b80e3d0847bb-20240205215323532-b5ZOZMNQ.webp",d="/zzdxy/assets/cf1fa1440de711f1e1788c5897d31808-20240205215323517-FdxtunjA.webp",r="/zzdxy/assets/10ee44265c16148cbed2a8a34a676f6a-20240205215323531-gCSi8S9c.webp",k={},m=e('<h1 id="集成-knife4j" tabindex="-1"><a class="header-anchor" href="#集成-knife4j" aria-hidden="true">#</a> 集成 Knife4j</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>之前介绍了如何在 <code>Spring Boot</code> 中集成 <code>Swagger2</code> 和 <code>Swagger3</code>，对于我们日常的接口管理已经够用了。但是作为一个颜值党，无论是 <code>Swagger2</code> 还是 <code>Swagger3</code>，都难以满足我们的审美。而且 <code>Swagger2</code> 和 <code>Swagger3</code> 都已经好久没更新了，更新还是比较慢的。</p>',3),v={href:"https://doc.xiaominfo.com/knife4j/",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"Swagger",-1),b=n("code",null,"Swagger",-1),f=n("code",null,"Spring Boot",-1),h=n("code",null,"Knife4j",-1),y=n("h2",{id:"集成过程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#集成过程","aria-hidden":"true"},"#"),s(" 集成过程")],-1),w=n("h3",{id:"创建-spring-boot-项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#创建-spring-boot-项目","aria-hidden":"true"},"#"),s(" 创建 Spring Boot 项目")],-1),x=n("code",null,"Spring Boot",-1),_=n("code",null,"Knife4j",-1),j=n("code",null,"Spring Boot",-1),q=n("code",null,"Spring Boot",-1),S=n("code",null,"Spring",-1),B={href:"https://cunyu1943.github.io/JavaPark/java/spring-boot/the-methods-to-create-springboot-project.html",target:"_blank",rel:"noopener noreferrer"},A=e(`<h3 id="添加依赖" tabindex="-1"><a class="header-anchor" href="#添加依赖" aria-hidden="true">#</a> 添加依赖</h3><p>既然是用 <code>Maven</code> 来管理项目依赖，那我们在项目 <code>pom.xml</code> 中引入 <code>Knife4j</code> 的相关依赖包，引入代码如下。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>knife4j-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置添加" tabindex="-1"><a class="header-anchor" href="#配置添加" aria-hidden="true">#</a> 配置添加</h3><p>接着在项目中创建一个配置包 <code>config</code>，用于配置 <code>Swagger</code> 的配置依赖。在这里可以配置扫描的 <code>controller</code> 所在的包，设置接口文档的标题、描述、作者信息等。</p><p>这里其实和 <code>Swagger2</code> 和 <code>Swagger3</code> 很相似，<code>Swagger</code> 也是可以通过配置类来指定这些信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cunyu<span class="token punctuation">.</span>springbootknife4jdemo<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>xiaoymin<span class="token punctuation">.</span>knife4j<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">EnableKnife4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">ApiInfoBuilder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">PathSelectors</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">RequestHandlerSelectors</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ApiInfo</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">Contact</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span><span class="token class-name">DocumentationType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">Docket</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">EnableSwagger2</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableSwagger2</span>
<span class="token annotation punctuation">@EnableKnife4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Knife4jConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span><span class="token constant">SWAGGER_2</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">useDefaultResponseMessages</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">&quot;com.cunyu.springbootknife4jdemo.controller&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Kinfe4j 集成测试文档&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">&quot;村雨遥&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://cunyu.gitub.io/JavaPark&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;747731461@qq.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&quot;v1.1.0&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">&quot;API测试文档&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写-controller-层" tabindex="-1"><a class="header-anchor" href="#编写-controller-层" aria-hidden="true">#</a> 编写 Controller 层</h3><p>接着我们编写一个测试的 <code>controller</code>，用于在 <code>Knife4j</code> 中展示用，代码如下。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">&quot;测试模块&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;姓名&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;入门程序，Hello World&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/helloWorld&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World，&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动测试" tabindex="-1"><a class="header-anchor" href="#启动测试" aria-hidden="true">#</a> 启动测试</h3><p>然后将项目启动起来，接着到浏览器中去打开 <code>http://localhost:8080/doc.html</code>，就会出现以下的主界面。这里有我们之前在配置类中所设置的一些接口信息，此外，还对接口进行了统计。因为我们代码中只写了一个 <code>POST</code> 的请求，所以这里统计出只有一个 <code>POST</code> 请求。</p><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>打开具体接口，这里就有我们接口的请求和响应的一些情况说明。</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击左侧 <code>调试</code> 按钮，我们就可以在 <code>Knife4j</code> 中测试我们的接口。</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="踩过的坑" tabindex="-1"><a class="header-anchor" href="#踩过的坑" aria-hidden="true">#</a> 踩过的坑</h2><p>当然，如果你按照以上步骤顺利打开了 <code>Knife4j</code> 的文档管理页面，那接下来的内容你大可不必了解。但如果你按照上边步骤搭建过程中也出现了问题，那不妨看看以下是否有你遇到的 <code>Bug</code>。</p><h3 id="空指针异常" tabindex="-1"><a class="header-anchor" href="#空指针异常" aria-hidden="true">#</a> 空指针异常</h3><p>首先是报空指针异常，报错信息如下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Failed to start bean <span class="token string">&#39;documentationPluginsBootstrapper&#39;</span><span class="token punctuation">;</span> nested exception is java.lang.NullPointerException
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>经过查询资料可知，这是因为 <code>Springfox</code> 使用的路径匹配是基于 <code>AntPathMatcher</code> 的，但是由于我使用的是 <code>Spring Boot 2.6.x</code> 版本，正好这个版本使用的是 <code>PathPatternMatcher</code>，所以才会出现这个问题。所以这里主要可以通过两种方式来解决。</p><p>第一种，无可厚非，就是将我们的 <code>Spring Boot</code> 的版本降低，从 <code>2.6.x</code> 降到 <code>2.5.x</code>，此时就应该是可以了，这里可以自己去试一下。</p><p>第二种，既然我们都已经用上 <code>2.6.x</code> 版本了，那我们就是不想降低版本咋整。此时，我们只需要在主程序启动类中加上 <code>@EnableWebMvc</code> 这个注解。然后再次启动程序，你就会发现启动成功了！</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableWebMvc</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootKnife4jDemoApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringbootKnife4jDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="请求路径未找到" tabindex="-1"><a class="header-anchor" href="#请求路径未找到" aria-hidden="true">#</a> 请求路径未找到</h3><p>一山放过一山拦，以为翻过了上面的山，就能成功了。没想到出师不利，这不又遇到了报错请求路径未找到。</p><p>当我们成功启动项目后，在浏览器中打开 <code>http://localhost:8080/doc.html</code>，却没想到迎接我们的不是成功界面，而是下面的 <code>Whitelabel Error Page</code>。</p><p>然后到 <code>IDEA</code> 中一看日志，程序照常运行，也没报错，但是给我们抛出了一个 <code>WARN</code>，警告信息如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>No mapping <span class="token keyword">for</span> GET /doc.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是因为我们为了解决上面的 <code>Bug</code> 而使用到了 <code>@EnableWebMvc</code>，由于它实现了 <code>WebMvcConfigurer</code> 接口，所以会导致我们访问识别。</p><p>这时候问题就来了，上面又需要这个注解，但是下面这个问题又不需要，那该怎么办呢？</p><p>其实很简单，既然我们要保留 <code>@EnableWebMvc</code>，那我们去配置个规则不就好了。</p><p>在项目的 <code>config</code> 包下，我们新建一个配置类 <code>WebMvcConfigurer</code> 记成 <code>WebMvcConfigurationSupport</code> 类，接着将 <code>dom.html</code> 过滤掉即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/static/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;doc.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/META-INF/resources/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/webjars/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/META-INF/resources/webjars/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成上述配置后，再去运行项目，再到浏览器中去访问 <code>http://localhost:8080/doc.html</code> 应该就能正常访问 Knife4j 文档管理页面了。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>以上就是 <code>Spring Boot</code> 中集成 <code>Knife4j</code> 文档管理工具的内容了，这里主要讲了下如何集成并且进行一个最简单的接口调试，关于更多 <code>Knife4j</code> 的个性化功能，可以去它的官网了解下。</p><p>此外，对于文中集成是所遇到的 <code>Bug</code>，如果你没有遇到，那么你应该顺利集成了，如果你也有遇到，那么不妨跟着我去试一下解决的办法。</p><p>最后的最后，关于本文中所涉及的代码，我已经开源了，有需要到小伙伴可以去自取哦。</p>`,42),E={href:"https://github.com/cunyu1943/java-learning-demos/tree/main/springboot-knife4j-demo",target:"_blank",rel:"noopener noreferrer"};function R(I,K){const a=p("ExternalLinkIcon");return c(),i("div",null,[m,n("p",null,[s("偶然之间发现了一个国产的接口文档管理工具 "),n("a",v,[s("Knife4j"),t(a)]),s("，它基于 "),g,s(" 而来，但是又对 "),b,s(" 进行了增强，增加两个越来越多的个性化需求，可以说兼具颜值与实力了。今天我们就来看看，如何在 "),f,s(" 中集成 "),h,s(" 这个接口文档管理工具。")]),y,w,n("p",null,[s("既然要在 "),x,s(" 中使用 "),_,s("，那首先就得创建一个 "),j,s(" 项目。当然，我在之前已经写过文章介绍如何创建 "),q,s(" 项目了，所以这里不再赘述。如果你还对 "),S,s(" Boot 创建方式不太熟悉，可以参考我之前的文章："),n("a",B,[s("Spring Boot 基础教程：创建项目的 3 种方式 | JavaPark"),t(a)])]),A,n("blockquote",null,[n("p",null,[n("a",E,[s("springboot-knife4j-demo"),t(a)])])])])}const C=o(k,[["render",R],["__file","20220430-knife4j.html.vue"]]);export{C as default};
