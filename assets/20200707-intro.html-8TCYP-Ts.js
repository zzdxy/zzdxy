import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as s,e}from"./app-X8k1FHBG.js";const t="/zzdxy/assets/07b231ac8f0c6addd6c9baba7e69bae4-1htdCqN3.webp",i="/zzdxy/assets/7723ba221f40ec7f0d5beefb7542f47a-drvGYvr7.webp",o="/zzdxy/assets/6761f1ec34dbb0f014b10d8134424a64-Ldqd3bd-.webp",l="/zzdxy/assets/27d6940eb47536577ab32d83d880752e-8Ql8CD4k.webp",p="/zzdxy/assets/8db1d5da10c87044b037bb192d00bea2-sIXOOVaj.webp",c="/zzdxy/assets/e36aee427c695641584f215e3d97145b-zNCzNuq0.webp",d="/zzdxy/assets/168fbc6eee963079342fa276d8b9aa8a-5GfVkipS.webp",r="/zzdxy/assets/940699ffc4d8704d0370faa22fa337e2-OdGhv9Cl.webp",u="/zzdxy/assets/c73f0bb7e00acb4eece937dd37afe39e-fLtvUcS-.webp",g={},v=e(`<h1 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>在我们之前的开发过程中，往往会遇到以下问题：</p><ul><li>一个项目就是一个工程，当项目过大时，难以管理；</li><li>项目中的 jar 包（也就是我们的依赖文件），需要我们手动进行移动到 Web 项目的 <code>WEB-INF/lib</code> 目录中；</li><li>jar 一般是通过下载或其他人打包后获取；</li><li>各个 jar 包之间繁琐的依赖关系需要我们自行解决；</li></ul><p>针对以上的问题，我们提出采用项目管理工具来对我们的项目进行管理，而这就是我们今天所要讲的 Maven。</p><p>通过使用 Maven，我们就能将一个大型的项目拆分为多个工程。此外，通过 Maven，我们可以很方便的对各个 jar 包进行统一管理，而且它也能解决各个包之间的依赖关系。</p><h2 id="什么是-maven" tabindex="-1"><a class="header-anchor" href="#什么是-maven" aria-hidden="true">#</a> 什么是 Maven</h2><p>Maven 是一个项目管理工具，包含了一个项目对象模型（<code>Project Object Model</code>），反映在配置中就是 <code>pom.xml</code> 文件。其中包含了一个项目的生命周期、一个依赖管理系统，以及定义在项目生命周期阶段的插件（<code>plugin</code>）和目标（<code>goal</code>）。</p><p>其中 Maven 最核心的两大概念包括 <strong>依赖管理</strong> 和 <strong>项目构建</strong>。</p><ul><li><strong>依赖管理</strong>：提供对 <code>jar</code> 的统一管理。（Maven 提供了一个中央仓库，当我们在项目中添加完依赖后，Maven 就会自动去中央仓库中下载相关依赖）。</li><li><strong>项目构建</strong>：Maven 提供对项目的编译、测试、打包、部署、上传到私服等。</li></ul><h2 id="maven-安装" tabindex="-1"><a class="header-anchor" href="#maven-安装" aria-hidden="true">#</a> Maven 安装</h2><p>Maven 属于 Java 项目，因此使用 Maven 必须依赖于 JDK。</p><p>首先我们要确保我们的电脑上已经安装了 JDK，可以使用如下命令来进行确认。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果出现如下的提示，则说明我们的 JDK 安装成功了（当然，你可能和我安装的不是一个版本，但只要出现下面类似的提示，就代表你也成功了）。</p><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>安装好 JDK 之后，然后接下来在安装 Maven，安装过程如下：</p><ol><li>下载 Maven，下载地址：https://maven.apache.org/download.cgi。如下图，我们在 Windows 中一般选择第二项进行下载，而在 macOS 或者 Linux 系统中，则选择第一项进行下载。</li></ol><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>将下载后的压缩包进行解压</li></ol><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>配置环境变量</li></ol><p>这里需要配置环境变量，一个是新建一个系统变量用于指向 Maven 解压缩后的路径，另一个则是修改 Path 变量环境，新加上一条指向 Maven 的 bin 目录的路径。</p><ul><li>MAVEN_HOME：即刚才解压缩后 Maven 的存放路径</li></ul><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Path：<code>%MAVEN_HOME%\\bin</code></li></ul><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="4"><li>校验安装是否成功</li></ol><p>当我们配置环境变量之后，此时就可以打开一个新的 cmd 窗口，然后利用如下校验命令来测试我们的 Maven 是否安装成功，安装成功则会出现如下提示。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="maven-目录结构" tabindex="-1"><a class="header-anchor" href="#maven-目录结构" aria-hidden="true">#</a> Maven 目录结构</h2><p>安装好 Maven 之后，其目录和内容如下，各目录内容如下：</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>bin</strong></li></ul><p>包含 mvn 运行的脚步，用于配置 Java 命令，准备好 classpath 和相关的 Java 系统属性，然后执行 Java 命令。</p><ul><li><strong>boot</strong></li></ul><p>只包含一个文件，是一个类加载器框架，相对于默认的 Java 类加载器，提供了更丰富的语法以方便配置。</p><ul><li><strong>conf</strong></li></ul><p>包含 <code>settings.xml</code> ，通过修改该文件，能在机器中全局定制 Maven 的行为。</p><ul><li><strong>lib</strong></li></ul><p>包含所有 Maven 运行时所需的 Java 类库，Maven 本身是分模块开发，所以里边有不同模块之类的类库。此外还包含了一些 Maven 用到的第三方依赖。</p><h2 id="maven-配置" tabindex="-1"><a class="header-anchor" href="#maven-配置" aria-hidden="true">#</a> Maven 配置</h2><h3 id="仓库镜像配置" tabindex="-1"><a class="header-anchor" href="#仓库镜像配置" aria-hidden="true">#</a> 仓库镜像配置</h3><p>通常安装好 Maven 之后就可以使用了，但是由于 Maven 的中央仓库服务器位于国外，国内使用网速较慢，所以我们最好将中央仓库换为国内的阿里云镜像。</p><p>打开 <code>apache-maven-xxx/conf/</code> 目录下的 <code>settings.xml</code> 文件，然后在 <code>mirrors</code> 节点下加入如下配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="本地仓库配置" tabindex="-1"><a class="header-anchor" href="#本地仓库配置" aria-hidden="true">#</a> 本地仓库配置</h3><p>安装好 Maven 后，本地仓库默认在 <code>当前用户名/.m2/repository</code> 下，但是这个位置比较隐蔽，所以建议自定义为其他路径：</p><p>还是打开 <code>apache-maven-xxx/conf/</code> 目录下的 <code>settings.xml</code> 文件，然后将如下路径修改为自己要设置的本地仓库，比如我的本地仓库路径如下图：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">&gt;</span></span>/path/to/local/repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>好了，以上就是关于我们日常项目开发中经常使用的 Maven 的相关知识点了。文章介绍了 Maven 是干什么的，以及我们应该如何安装 Maven 和安装后常见的一些设置，最后则是对 Maven 的目录结构进行详解。而在下一篇博客中，我将讲述 Maven 中最常见的命令，看看大家都是用什么命令来进行工作的吧！</p>',55),m=[v];function b(h,f){return n(),s("div",null,m)}const M=a(g,[["render",b],["__file","20200707-intro.html.vue"]]);export{M as default};
