import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as c,c as t,a as e,b as a,d as s,e as n}from"./app-nKMPWVUx.js";const r="/zzdxy/assets/d129c163bfb14533ad38844607808030-FsXqj9IF.webp",l="/zzdxy/assets/d2ab8bfcb35a4b65b08a80fb15047b25-Irbk9yIe.webp",u="/zzdxy/assets/6122b0668d65457d98601503ce079660-y2tj8l2v.webp",g="/zzdxy/assets/33ac00bbeecb40a4b9d8c9ac2f8d845a-vbdWfl5R.webp",p="/zzdxy/assets/65a1e46ad4944cf88da661fdaa64e27e-pH14A9qa.webp",h="/zzdxy/assets/28806f5981a5420c9000e5ec1a3d5794-SGX767qE.webp",b="/zzdxy/assets/e45101bacfe645d681b9445223e2558c-nQ9HJCJF.webp",m="/zzdxy/assets/f263ad2e4ba943089bc164f3ffa1028d-wlT8PNk3.webp",f="/zzdxy/assets/5d23f2e7cafe49b5adcf4d605ee60209-bQC_snOE.webp",_="/zzdxy/assets/ce1fbd19b3bf45bbaa86b66d171c5921-4LKX9dLV.webp",v={},x=n('<h1 id="hugo-github-pages-博客搭建教程" tabindex="-1"><a class="header-anchor" href="#hugo-github-pages-博客搭建教程" aria-hidden="true">#</a> Hugo + Github Pages 博客搭建教程</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>有了利用 <code>Hexo</code>、<code>docsify</code>、<code>vuepress</code> 等框架来搭建博客的经历之后，我们来今天又来看看 <code>Hugo</code>。<code>Hugo</code> 是一款基于 <code>Go</code> 语言而实现的静态网站生成器，具有简单易用、高效易扩展、快速部署的特点。</p><p>这里先给出 <code>Hugo</code> 的中英文官方文档，方便大家遇到问题时查阅：</p>',4),k={href:"https://www.gohugo.org/",target:"_blank",rel:"noopener noreferrer"},z=e("code",null,"Hugo",-1),y={href:"https://gohugo.io/documentation/",target:"_blank",rel:"noopener noreferrer"},H=e("code",null,"Hugo",-1),w=e("p",null,[a("接下来就来看看，如何利用 "),e("code",null,"Hugo"),a(" 来搭建一个博客。")],-1),q=e("h2",{id:"搭建过程",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#搭建过程","aria-hidden":"true"},"#"),a(" 搭建过程")],-1),L=e("h3",{id:"安装-hugo",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装-hugo","aria-hidden":"true"},"#"),a(" 安装 Hugo")],-1),S=e("p",null,[a("既然要使用 "),e("code",null,"Hugo"),a("，那么首先需要对它进行安装。如果要通过二进制安装包的方式进行安装，那么首先需要到这里去进行选择适合自己平台的安装包，然后下载它。")],-1),E={href:"https://github.com/gohugoio/hugo/releases",target:"_blank",rel:"noopener noreferrer"},I=n('<p>这里不仅有适合 <code>Windows</code> 平台的安装包，还包括了 <code>Linux</code> 平台和 <code>macOS</code> 平台的安装包。不仅如此，针对不同用户，还细心地提供了 <code>32</code> 位和 <code>64</code> 位来供选择。更甚至针对不同架构的芯片也提供了相应的安装包，可以说是十分细心了。</p><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不过这里我演示主要是基于 <code>macOS</code> 平台，所以我就不通过安装包的形式来进行安装了，这里通过 <code>homebrew</code> 一行命令就能够轻松搞定。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>brew <span class="token function">install</span> hugo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果你的 <code>macOS</code> 上还没有安装 <code>homebrew</code>，那么先抓紧去安装下吧。</p><p>这里温馨提示下，国内用户依照 <code>homebrew</code> 官网的方式来进行安装基本上都是会失败的，所以这里给大家推荐另一种安装方式，通过以下脚本进行安装即可。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/bin/bash <span class="token parameter variable">-c</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://gitee.com/ineo6/homebrew-install/raw/master/install.sh<span class="token variable">)</span></span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="检查是否成功" tabindex="-1"><a class="header-anchor" href="#检查是否成功" aria-hidden="true">#</a> 检查是否成功</h3><p>虽然通过上述的命令安装后，控制台是提示我们安装成功了，但我们心里没谱呀，就想看看到低安装成功了没。那这个时候就可以通过查看 <code>Hugo</code> 版本号的方式，来却 <code>Hugo</code> 是否安装成功。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hugo version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果安装成功了，那么执行命令后就会像我们上面那样，提示你所安装的 <code>Hugo</code> 的版本。</p><h3 id="初始化网站" tabindex="-1"><a class="header-anchor" href="#初始化网站" aria-hidden="true">#</a> 初始化网站</h3><p>既然安装好了，接下来就是初始化我们的网站目录了。通过以下命令，我们就能够完成 <code>Hugo</code> 项目的初始化了！</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hugo new site <span class="token punctuation">[</span>项目名称<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hugo new site JavaPark
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>项目初始化后，得到的目录如下。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里主要需要需要注意 <code>config.toml</code> ，这是项目的配置文件，主要用于配置 <code>Hugo</code>，该文件中的配置会对整个工程有效。<code>theme</code> 目录下主要用于放置主题，里边一般还会有一个 <code>theme.toml</code>，用于配置主题。</p><p>默认情况下，<code>config.toml</code> 里边只会有以下三个配置。</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="设置主题" tabindex="-1"><a class="header-anchor" href="#设置主题" aria-hidden="true">#</a> 设置主题</h3><p>为了给我们的网站设置样式，我们需要去选择一个喜欢的主题。<code>Hugo</code> 虽然不像 <code>Hexo</code> 提供了较多的主题，但是也还是有很多不错的，大家可以去皮肤列表找。</p>',26),N={href:"https://themes.gohugo.io/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://themes.gohugo.io/themes/hugo-theme-m10c/",target:"_blank",rel:"noopener noreferrer"},O=e("code",null,"m10c",-1),B=e("code",null,"theme",-1),C=n(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接着到项目配置文件 <code>config.toml</code> 中，设置主题。</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token key property">theme</span> <span class="token punctuation">=</span> <span class="token string">&quot;m10c&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+f+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="预览" tabindex="-1"><a class="header-anchor" href="#预览" aria-hidden="true">#</a> 预览</h3><p>设置好主题之后，就可以进行预览了！使用如下命令启动 <code>Hugo</code> 服务器，然后进入 <code>http://localhost:1313</code> 就可以进行预览了！</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hugo server <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>以上就是如何利用 <code>Hugo</code> 搭建一个博客了，主要从 <code>Hugo</code> 安装、初始化项目、主题设置、预览等几个方面介绍了 <code>Hugo</code> 的使用，剩下的就是写作了。这是件很难的事，希望大家能一直坚持下去。其实 <code>Hugo</code> 里边还有好多玩法，这里就不做一一介绍了，大家可以去官网探索更多玩法。</p>',11);function F(G,J){const o=i("ExternalLinkIcon");return c(),t("div",null,[x,e("ol",null,[e("li",null,[e("a",k,[z,a(" 中文文档"),s(o)])]),e("li",null,[e("a",y,[H,a(" 英文文档"),s(o)])])]),w,q,L,S,e("blockquote",null,[e("p",null,[e("a",E,[a("下载链接"),s(o)])])]),I,e("blockquote",null,[e("p",null,[e("a",N,[a("皮肤列表"),s(o)])])]),e("p",null,[a("这里我选择了一个皮肤 "),e("a",V,[O,s(o)]),a("，进入我们初始化的项目，然后利用如下命令将主题下载到 "),B,a(" 文件夹下。")]),C])}const j=d(v,[["render",F],["__file","20220611-hugo.html.vue"]]);export{j as default};
