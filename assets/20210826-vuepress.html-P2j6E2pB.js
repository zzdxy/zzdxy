import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as c,c as o,a as s,b as n,d as p,e as a}from"./app-WwTsJovB.js";const l="/zzdxy/assets/5052e39e5de806967f5dcd97619b2984-_eJVZ5ME.webp",u="/zzdxy/assets/182c48f80f42f1b2085b0b3684e9b1fc-nS9PIYCh.webp",d="/zzdxy/assets/73b1aebaa00a49182756a17adac2430c-8bJ2fKB9.webp",r="/zzdxy/assets/263ad40d8338b257f2b8852e7b622cad-Jidn2BpQ.webp",k="/zzdxy/assets/a057ab9c0039b346a0f90a0b2ce30c5a-O7kS3VWk.webp",m="/zzdxy/assets/f2ec4500b986f31f6c1e56b32079c17a-HXr98103.webp",b="/zzdxy/assets/6d49049a1ba67ac80b5c6480e79da729-xesPUH1F.webp",h="/zzdxy/assets/8c815342f2679356f1cccc9c28f97f3f-Dk3r9fNk.webp",g={},v=a('<h1 id="vuepress-github-actions-实现博客自动部署" tabindex="-1"><a class="header-anchor" href="#vuepress-github-actions-实现博客自动部署" aria-hidden="true">#</a> Vuepress + GitHub Actions 实现博客自动部署</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>正常我们利用 Vuepress 搭建一个文档博客之后，往往都是通过如下步骤来部署一篇博客：</p><ol><li><p>首先写文章；</p></li><li><p>写完文章之后生成静态文件，这里一般使用的是 <code>npm run build</code> 命令，但也有使用 <code>yarn build</code> 的；</p></li><li><p>将我们生成的静态文件推送到 Github Pages；</p></li><li><p>访问我们对应的网址，查看我们的推送是否成功。</p></li></ol><p>上述步骤看似简单，但一旦文档过多时，生成静态文件就十分耗费时间。这时候我们就想了，有不有一种方法，能够帮我们自动构建静态文件然后部署到 Github Pages 上呢。刚好，Github 官方提供了这个一个工具：Github Actions。利用它，我们就能够将重心转移到创作之后，每次创作之后推送到远程之后它就会自动后续工作，接下来我们就来看看如何利用 Github Action 实现自动部署我们的博客。</p><h2 id="生成-token" tabindex="-1"><a class="header-anchor" href="#生成-token" aria-hidden="true">#</a> 生成 Token</h2>',6),f=s("code",null,"Settings -> Developer settings -> Personal access tokens",-1),_={href:"https://github.com/settings/tokens",target:"_blank",rel:"noopener noreferrer"},y=s("code",null,"Generate new token",-1),x=s("code",null,"Expiration",-1),z=s("code",null,"No expiration",-1),w=s("code",null,"repo",-1),G=s("code",null,"Generate Token",-1),S=a('<figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="设置-secrets" tabindex="-1"><a class="header-anchor" href="#设置-secrets" aria-hidden="true">#</a> 设置 Secrets</h2><p>进入你存放你博客源码的项目，然后以此点击 <code>Settings -&gt; Secrets</code>，接着点击右上角的 <code>New repository secret</code>，新建一个 <code>Secret</code>。这里的名字要命名为 <code>ACCESS_TOKEN</code>，然后 <code>Value</code> 就是我们上一步中所生成的 Token。</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="编写-action" tabindex="-1"><a class="header-anchor" href="#编写-action" aria-hidden="true">#</a> 编写 Action</h2><p>进入项目的的 <code>Actions</code> 选项，然后新建一个 <code>workflow</code>（我是因为已经建立过了，所以才是下面的界面），默认新建的 <code>workflow</code> 名字是 <code>main.yml</code> 这个可以自己自定义，根据你自己喜好来就行了。</p><figure><img src="'+k+'" alt="image-20210826100501499" tabindex="0" loading="lazy"><figcaption>image-20210826100501499</figcaption></figure><p>生成后的 <code>main.yml</code> 位于项目的 <code>.github/workflows</code> 目录下。</p><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来是在 <code>main.yml</code> 中填入如下信息即可，具体实例的可以参考我的博客实例：</p><blockquote><p>https://github.com/cunyu1943/cunyu1943.github.io/</p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># name 可以自定义</span>
<span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy GitHub Pages

<span class="token comment"># 触发条件：在 push 到 main/master 分支后，新的 Github 项目 应该都是 main，而之前的项目一般都是 master</span>
<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> main

<span class="token comment"># 任务</span>
<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">build-and-deploy</span><span class="token punctuation">:</span>
    <span class="token comment"># 服务器环境：最新版 Ubuntu</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token comment"># 拉取代码</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">persist-credentials</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

      <span class="token comment"># 生成静态文件</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build
        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install <span class="token important">&amp;&amp;</span> npm run docs<span class="token punctuation">:</span>build

      <span class="token comment"># 部署到 GitHub Pages</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> JamesIves/github<span class="token punctuation">-</span>pages<span class="token punctuation">-</span>deploy<span class="token punctuation">-</span>action@releases/v3
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">ACCESS_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment"># 也就是我们刚才生成的 secret</span>
          <span class="token key atrule">BRANCH</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages <span class="token comment"># 部署到 gh-pages 分支，因为 main 分支存放的一般是源码，而 gh-pages 分支则用来存放生成的静态文件</span>
          <span class="token key atrule">FOLDER</span><span class="token punctuation">:</span> docs/.vuepress/dist <span class="token comment"># vuepress 生成的静态文件存放的地方</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="验证" tabindex="-1"><a class="header-anchor" href="#验证" aria-hidden="true">#</a> 验证</h2><p>经过上面的的步骤配置好之后，就可以点击仓库的 <code>Actions</code> 来查看部署情况了。</p><figure><img src="`+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果是绿色的，说明自动部署成功了，如果是红色，那就说明部署失败。这个时候我们可以点进去看看部署失败的日志信息。</p><p>以我部署失败的一个实例来讲，可以看到主要是在部署步骤出了问题，我们就可以根据给出的错误日志来找出问题所在，然后找方法解决它了。</p><p>我这里错误的大体意思就是说我 Vuepress 项目下的的 <code>dist</code> 目录不存在，而解决方法则是在 Vuepress 的配置文件中的 <code>dist</code> 设置为 <code>docs/.vuepress/dist</code> 即可。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>以上就是关于 Vuepress + Github Actions 实现自动部署的所有内容了，如果对你有所帮助，那就帮忙点赞关注吧！</p><p>最后，贴出我的博客地址，可以去看看效果！</p><ul><li>项目文件：https://github.com/cunyu1943/cunyu1943.github.io</li><li>预览地址：https://cunyu1943.github.io/</li></ul>',25);function V(A,E){const e=i("ExternalLinkIcon");return c(),o("div",null,[v,s("p",null,[n("要部署 Actions，那么它就需要有能够操作我们仓库的权限，因此需要提前设置个人访问令牌（Github personal access）。设置方法如下：进入 Github 后，点击我们的头像，然后依次进入 "),f,n("，对应地址就是 "),s("a",_,[n("Token 生成"),p(e)]),n("。然后点击右上方的 "),y,n("，接着输入 token 的名字，这个名字可以随意，不过还是推荐根据它的用途来命名。然后选 "),x,n("，也就是这个 Token 的有效期，如果我们要长期用，建议选为 "),z,n("，意思就是无期限。最后就是选权限，一般来讲这里选 "),w,n(" 就够了，但是如果你不确定，那就全都选上也行。然后点击 "),G,n("，会生成一个令牌，注意这里它只会出现一次，一旦刷新该网页就不见了，所以最好把它复制到你的备忘录备份一下，而且我们待会也是需要用到这个 Token 的。")]),S])}const T=t(g,[["render",V],["__file","20210826-vuepress.html.vue"]]);export{T as default};
