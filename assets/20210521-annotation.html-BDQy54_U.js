import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,e}from"./app-X8k1FHBG.js";const t={},o=e(`<h1 id="spring-bean-注解详解" tabindex="-1"><a class="header-anchor" href="#spring-bean-注解详解" aria-hidden="true">#</a> Spring Bean 注解详解</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>本篇博客中，我们将会讨论用于声明不同类型 Beans 的几种最常用的 Spring Bean 注解。</p><p>众所周知，Spring 容器中有许多配置 Bean 的方法，我们既可以通过 XML 配置，也可以在配置类中使用 <code>@Bean</code> 注解来声明 Beans。此外，我们还可以使用 <code>org.springframework.stereotype</code> 包中的一个注解来对类进行标记，然后把其余工作交给组件扫描即可。</p><h2 id="组件扫描" tabindex="-1"><a class="header-anchor" href="#组件扫描" aria-hidden="true">#</a> 组件扫描</h2><p>在 Spring 中，一旦我们启用了组件扫描， Spring 就会自动扫描包中的 Bean。</p><p>通过使用 <code>@ComponentScan</code> ，Spring 就会自动去扫描那些带有注释配置的类，我们可以使用 <code>basePackages</code> 或者 <code>value</code> 参数（两者是一样的，<code>value</code> 只不过是 <code>basePackages</code> 的另一种称呼）来直接指定我们所要扫描的包的名称，然后 Spring 就会去扫描我们指定包下所有带有 <code>@Component</code> 注解的类，然后将其自动注册为一个 Bean。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token comment">// 以下两者之一即可</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.cunyu.annotions&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// @ComponentScan(value = &quot;com.cunyu.annotions&quot;)</span>
<span class="token keyword">class</span> <span class="token class-name">PetFactoryConfig</span><span class="token punctuation">{</span>
    ……
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，我们还可以使用 <code>basePackageClasses</code> 参数来指向基础包中的类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackageClasses <span class="token operator">=</span> <span class="token class-name">PetFactoryConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">PetFactoryConfig</span><span class="token punctuation">{</span>
    ……
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>basePackages</code> 和 <code>basePackageClasses</code> 两个参数都是数组类型的，所以在传参时我们可以为他们提供多个包。</p><p>而如果没有为 <code>@ComponentScan</code> 指定参数，那么 Spring 就只会扫描和 <code>@ComponentScan</code> 注释的类位于同一个包的带有 <code>@Component</code> 注解的其他类，然后将它们自动创建为一个 Bean。</p><p><code>@ComponentScan</code> 充分利用了 Java 8 中的重复注解特性，因此我们能够用它来多次标记一个类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.cunyu.annotions&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackageClasses <span class="token operator">=</span> <span class="token class-name">PetFactoryConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">PetFactoryConfig</span><span class="token punctuation">{</span>
    ……
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除开上面的方式来标记一个类外，我们还可以使用 <code>@CompentScans</code> 来将多个 <code>@ComponentScan</code> 包含起来，用于指定多个 <code>@ComponentScan</code> 配置。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScans</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.cunyu.annotions&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackageClasses <span class="token operator">=</span> <span class="token class-name">PetFactoryConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">PetFactoryConfig</span><span class="token punctuation">{</span>
    ……
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除开使用注解的方式来实现组件扫描之外，我们还可以通过配置 XML 来进行，只需要在我们的配置文件中如下内容即可：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span><span class="token attr-name">;</span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span><span class="token attr-name">;</span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/context<span class="token punctuation">&quot;</span></span><span class="token attr-name">;</span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>c</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/c<span class="token punctuation">&quot;</span></span><span class="token attr-name">;</span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/p<span class="token punctuation">&quot;</span></span><span class="token attr-name">;</span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>;

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.cunyu.dao<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.cunyu.service<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.cunyu.controller<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>context:component-scan</code> 元素将实现同注解 <code>@ComponentScan</code> 一样的效果，即扫描 <code>com.cunyu</code> 包下所有带有 <code>@Component</code> 注解的类，并将它们注册创建为 Bean。</p><h2 id="component" tabindex="-1"><a class="header-anchor" href="#component" aria-hidden="true">#</a> @Component</h2><p>上一小节中我们讲了 <code>@ComponentScan</code> 会自动扫描组件过程中会去扫描那些带有 <code>@Component</code> 注解的类，并将其注册创建为 Bean，比如下面的例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">{</span>
    ……
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>Cat</code> 类中带有 <code>@Component</code> 注解，当 Spring 自动扫描时，就会去扫描 <code>Cat</code> 这个类，并创建一个名为 <code>cat</code> 的 Bean 实例。</p><p><strong>注意</strong>：默认情况下，使用 <code>@ComponentScan</code> 去扫描 <code>@Component</code> 注解的类，生成对应类的 Bean 实例时，Bean 实例具有与类名相同的名称，但不同的是 Bean 实例的首字母是小写，而一般类名首字母是大写。</p><p><code>@Component</code> 是任意 Spring 管理组建的通用构造型，当组件不好归类时，一般使用该注解，又可以分为如下几个常用元注解：</p><ul><li><code>@Repository</code>：位于持久层，能将数据库操作跑出的原生异常转换为 Spring 持久层异常，用于标注数据访问组件，即 DAO 组件；</li><li><code>@Service</code>：位于业务逻辑层，只是标注该类位于业务层逻辑；</li><li><code>@Configuration</code>：用于定义配置类，可替换 XML 配置文件，被注解的类内部包含一个或多个被 <code>@Bean</code> 注解的方法，这些方法将会被 <code>AnnotationConfigApplicaitonContext</code> 或者 <code>AnnotaionConfigWebApplicationContext</code> 类扫描，并用于构建 Bean 定义，初始化 Spring 容器；</li><li><code>@Controller</code>：属于 Spring MVC 的注解，进行前端请求的处理、转发、重定向；用于标注控制层组件；</li></ul><p>它们是针对不同使用场景而采取的带有特定功能化的注解组件，其实质功能其实和 <code>@Component</code> 一样。因此，如果一个类被 <code>@Component</code> 注解了，那么就可以根据这个类的实际功能，利用 <code>@Repository</code>、<code>@Service</code> … 等代替，而且代替后的注解会具备更多的功能。</p><h2 id="repository" tabindex="-1"><a class="header-anchor" href="#repository" aria-hidden="true">#</a> @Repository</h2><p>DAO（Data Access Object，数据访问对象，为某种类型的数据库或其他持久性机制提供一个抽象接口的对象） 或者 Repository 类通常代表应用程序中的数据访问层，我们一般倾向于使用 <code>@Repository</code> 注解。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PetRepository</span><span class="token punctuation">{</span>
    ……
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用 <code>@Repository</code> 注解，它将启用自动持久化异常转换。此时，当我们使用一些持久化框架，比如 Hibernate、MyBatis……时，当带有 <code>@Repository</code> 注解的类在抛出本地异常时，就会自动将其转换为 Spring 中的 <code>DataAccessException</code> 的子类。</p><p>而要启动异常转换，我们就需要自己去声明我们 <code>PersistenceExceptionTranslationPostProcessor</code> 的实例，声明的方式可以分为注解性和 XML 配置型。但是一般而言，Spring 都会自动帮我们去完成这个过程，所以我们就不再需要自己去手动声明了。</p><ul><li><strong>注解型</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">PersistenceExceptionTranslationPostProcessor</span> <span class="token function">exceptionTranslation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PersistenceExceptionTranslationPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>XML 配置型</strong></li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.dao.annotion.PersistenceExceptionTranslationPostProcessor<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="service" tabindex="-1"><a class="header-anchor" href="#service" aria-hidden="true">#</a> @Service</h2><p>对于应用程序中的业务逻辑，一般都是位于服务层，因此我们使用 <code>@Service</code> 注解一个类，来指明该类属于服务层。表示定义一个 Bean，自动根据所标注的组件实例化一个首字母为小写的 Bean。实例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PetService</span><span class="token punctuation">{</span>
    ……
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中 <code>PetService</code> 类被标注为一个 Bean，其名称为 <code>petServie</code>。</p><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> @Configuration</h2><p>一般用于配置类，而且还可以包含用 <code>@Bean</code> 所注解的 Bean 定义方法，实例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PetFactoryConfig</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Dog</span> <span class="token function">dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>既然说了使用 <code>@Confgiuration</code> 可以和 XML 配置文件互换，那么以上的配置类等价于如下配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dog<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>com.cunyu.dao.Dog<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：使用 <code>@Configuration</code> 注解时，一般需要遵循如下原则：</p><ol><li><code>@Configuration</code> 注解的类不可以是 <code>final</code> 类型；</li><li><code>@Configuration</code> 注解的类不可以是匿名类；</li><li>嵌套的 <code>@Configuration</code> 必须是静态类；</li></ol><h2 id="controller" tabindex="-1"><a class="header-anchor" href="#controller" aria-hidden="true">#</a> @Controller</h2><p><code>@Controller</code> 注解是一个类级别的注解，当把它用在类上时，表示该类在 Spring MVC 中充当控制器，该类将被 Spring 自动扫描，一般我们在该类中加入 <code>@RequestMapping(&quot;…&quot;)</code>，就可以直接使用浏览器来访问对应界面进行逻辑处理了。实例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PetController</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;你好，村雨遥！&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ……
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，当我们去浏览器中访问 <code>localhost:8080/hello</code> 时，页面中就会显示 <code>你好，村雨遥！</code> 这条信息。</p><p>注意，<code>@Controller</code> 注解的类下，我们又发现了 <code>RequestMapping</code> 注解，该注解主要 6 个属性，分别介绍如下：</p><ul><li><code>value</code> ：用于指定浏览器指定的地址；</li><li><code>method</code>，指定请求的 method 类型，一般有 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>，而现在我们一般使用对应的注解 <code>@GetMapping</code>、<code>@PostMapping</code>、<code>@PutMapping</code>、<code>@DeleteMapping</code>；</li><li><code>consumes</code>：用于指定处理请求的提交内容类别（<code>Content-Type</code>），如 <code>application/json</code>、<code>test/html</code>；</li><li><code>produces</code>：指定返回的内容类别；</li><li><code>params</code>：指定 <code>request</code> 中必须包含某些引用数值时，才能让该方法处理；</li><li><code>headers</code>：指定 <code>request</code> 中必须包含某些指定 <code>header</code> 值，才能让该方法处理请求；</li></ul><h2 id="原型注解及-aop" tabindex="-1"><a class="header-anchor" href="#原型注解及-aop" aria-hidden="true">#</a> 原型注解及 AOP</h2><p>当我们使用 Spring 原型注解时，可以十分容易地创建一个指向所有具有特定构造型的类的切入点。</p><p>比如我们如果想要衡量一个方法在 DAO 层中的执行时间，就可以充分利用 <code>@Repository</code> 注解的特点。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PerformanceAspect</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;within(@org.springframework.stereotype.Repository *)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">repositoryClassMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;repositoryClassMethods()&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">measureMethodExecutionTime</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> 
      <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> returnValue <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>
          <span class="token string">&quot;Execution of &quot;</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">&quot; took &quot;</span> <span class="token operator">+</span> 
          <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上实例中，我们创建了一个切入点，该切入点会去匹配带有 <code>@Repository</code> 注解的类中的所有方法。然后我们用 <code>@Around</code> 通知来定位切入点，并确定被拦截的方法调用的执行时间。通过使用这个方式，我们就可以轻松地给每个应用程序添加日志记录、性能管理、审计以及其他行为。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>好了，以上就主要介绍了 Spring 中的原型注释，并了解了它们各自所代表的意义。此外，还学习了如何使用组件扫描功能，从而告知 Spring 容器在何处能找到带有注解的类。</p><p>如果你有更多的见解，欢迎评论留言，一起交流呀！</p>`,61),p=[o];function c(i,l){return a(),s("div",null,p)}const r=n(t,[["render",c],["__file","20210521-annotation.html.vue"]]);export{r as default};
