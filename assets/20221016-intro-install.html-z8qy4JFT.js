import{_ as e}from"./wechatpublic-eLo-9ai1.js";import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as n,o as i,c as d,d as l,e as r}from"./app-nKMPWVUx.js";const c="/zzdxy/assets/82fab0e89c6a42b896b77f98dee94b2c--z2nSDNw.webp",o="/zzdxy/assets/2cd8cb2c4221471e89bd6ad9c58269d5-kWqg5TD2.webp",t="/zzdxy/assets/16c89775141f40f9a69cdb9980bd221b-RS5iP9Ko.webp",p="/zzdxy/assets/e0c9acc5f35e447591b2b6d2df12755b-UA0W_Fsf.webp",u="/zzdxy/assets/73fa2a756cd54177ac55cfd17b34d9f1-GseRuiLo.webp",h="/zzdxy/assets/991d0ce06dc6480d97abf8b858b93030-hp3sBq--.webp",b="/zzdxy/assets/70fc81bab6ce4aeb9618e27ba081469d-GmeKMIbX.webp",g="/zzdxy/assets/7a61140a0a464a81a27e348e1b284ac6-Q3VShMx0.webp",v="/zzdxy/assets/7205270749fb4e5ab06423dc6920891c-1o-MVi-F.webp",m="/zzdxy/assets/06e3119f7e4b4e7096b3ce9e85387613-t1kFmi2N.webp",x={},f=r('<h1 id="简介与环境搭建" tabindex="-1"><a class="header-anchor" href="#简介与环境搭建" aria-hidden="true">#</a> 简介与环境搭建</h1><div class="hint-container info"><p class="hint-container-title">共勉</p><p>不要哀求，学会争取。若是如此，终有所获。</p></div><div class="hint-container tip"><p class="hint-container-title">原文</p><p>https://mp.weixin.qq.com/s/Fx4AAS5pUqSGtui4Z-LYXA</p></div><h2 id="一、简介" tabindex="-1"><a class="header-anchor" href="#一、简介" aria-hidden="true">#</a> 一、简介</h2><h3 id="_1-什么是-nginx" tabindex="-1"><a class="header-anchor" href="#_1-什么是-nginx" aria-hidden="true">#</a> 1. 什么是 Nginx</h3><p><code>Nginx</code> 是一个跨平台、轻量级、高性能的 <code>HTTP</code> 和反向代理 <code>web</code> 服务器，而且同时也提供了 <code>IMAP/POP3/SMTP</code> 服务。<code>Nginx</code> 最高能够支持搞到 50000 哥并发连接数的相应，在最高并发连接的情况下，可以作为 <code>Apache</code> 服务的一个替代品。</p><p><code>Nginx</code> 作为负载均衡服务，既可以在内部直接支持 <code>Redis</code> 和 <code>PHP</code> 程序对外进行服务，也可以作为支持 <code>HTTP</code> 代理服务对外进行支持。<code>Nginx</code> 是基于 C 语言来进行开发的，所以无论是系统资源开销还是 CPU 使用率都较低，也因此 <code>Nginx</code> 性能较强。</p><h3 id="_2-nginx-的版本" tabindex="-1"><a class="header-anchor" href="#_2-nginx-的版本" aria-hidden="true">#</a> 2. Nginx 的版本</h3><p>常用版本主要分为四大阵营：</p><ol><li><code>Nginx</code> 开源版</li><li><code>Nginx plus</code> 商业版</li><li><code>Openresty</code></li><li><code>Tengine</code></li></ol><h2 id="二、下载" tabindex="-1"><a class="header-anchor" href="#二、下载" aria-hidden="true">#</a> 二、下载</h2><p>上一节中我们讲了 <code>Nginx</code> 的一些简单知识，接下来就来看看，如何在我们的服务器中安装 <code>Nginx</code>。下文中，我们均以 <code>Nginx</code> 开源版做示范。</p><p>前往 <code>Nginx</code> 官方地址下载对应的版本，因为这里主要是在服务器中安装，所以是以 <code>Linux（Centos）</code> 版本来演示。</p><blockquote><p>http://nginx.org/en/download.html</p></blockquote><figure><img src="'+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="三、编译安装与依赖检查" tabindex="-1"><a class="header-anchor" href="#三、编译安装与依赖检查" aria-hidden="true">#</a> 三、编译安装与依赖检查</h2><p>将下载后的 <code>Nginx</code> 压缩包进行解压，解压命令如下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-zxf</span> 压缩包名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+o+`" alt="" loading="lazy"> 进入解压缩后的 <code>Nginx</code> 所在文件夹，然后执行 <code>configure</code> 脚本，这时候就会检查安装 <code>Nginx</code> 所需的依赖，这里可能会因为你的服务器中没有事先安装所需依赖而导致报错。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> nginx-1.22.0
<span class="token function">sh</span> configure
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里例举几个安装时可能会遇到的错误：</p><ol><li><strong>C 编译器缺失</strong></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>error: C compiler cc is not found.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要解决这个错误，只需要安装 <code>gcc</code> 编译器即可。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> gcc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><strong>PCRE Library 缺失</strong></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>error: the HTTP rewrite module requires the PCRE library.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样，为了解决这个这个问题，需要安装 <code>pcre-devel</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> pcre pcre-devel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><strong>zlib Library 缺失</strong></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>error: the HTTP <span class="token function">gzip</span> module requires zlib library.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解决方法，安装 <code>zlib</code> 库。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> zlib zlib-devel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+p+`" alt="" loading="lazy"> 如果出现以上的提示信息，则说明可以进行下一步，此时直接执行编译安装命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">make</span>

<span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+'" alt="" loading="lazy"><img src="'+h+`" alt="" loading="lazy"></p><h2 id="四、nginx-启停" tabindex="-1"><a class="header-anchor" href="#四、nginx-启停" aria-hidden="true">#</a> 四、Nginx 启停</h2><p>如果顺利执行完 <code>configure</code> 脚本，则会在服务器终端打印出以上 <code>Nginx</code> 相关的配置。</p><p>进入 <code>Nginx</code> 安装后的目录 <code>/usr/local/nginx/sbin</code>，然后利用以下命令来进行 <code>Nginx</code> 的启动。</p><h3 id="_1-启动" tabindex="-1"><a class="header-anchor" href="#_1-启动" aria-hidden="true">#</a> 1. 启动</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+b+'" alt="" loading="lazy"> 然后在浏览器中访问服务器的 <code>IP</code> 地址，如果出现以下界面，则说明我们的 <code>Nginx</code> 安装并启动成功了！</p><figure><img src="'+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-快速停止" tabindex="-1"><a class="header-anchor" href="#_2-快速停止" aria-hidden="true">#</a> 2. 快速停止</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./nginx <span class="token parameter variable">-s</span> stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>停止后，再到浏览器中去访问服务器地址，就会出现以下情况。</p><figure><img src="`+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-关闭前完成已接受的连接请求" tabindex="-1"><a class="header-anchor" href="#_3-关闭前完成已接受的连接请求" aria-hidden="true">#</a> 3. 关闭前完成已接受的连接请求</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./nginx <span class="token parameter variable">-s</span> quit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-重新加载配置" tabindex="-1"><a class="header-anchor" href="#_4-重新加载配置" aria-hidden="true">#</a> 4. 重新加载配置</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./nginx <span class="token parameter variable">-s</span> reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过这种方式，可以实现 <code>Nginx</code> 的无感重启。也就是说，当我们需要修改 <code>Nginx</code> 的配置时，不希望通过停止 <code>Nginx</code> 然后在启动的方式，此时就可以通过这个命令来实现。</p><h2 id="五、防火墙" tabindex="-1"><a class="header-anchor" href="#五、防火墙" aria-hidden="true">#</a> 五、防火墙</h2><h3 id="_1-关闭防火墙" tabindex="-1"><a class="header-anchor" href="#_1-关闭防火墙" aria-hidden="true">#</a> 1. 关闭防火墙</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl stop firewall.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-禁止防火墙开机启动" tabindex="-1"><a class="header-anchor" href="#_2-禁止防火墙开机启动" aria-hidden="true">#</a> 2. 禁止防火墙开机启动</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl disable firewall.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-放行端口" tabindex="-1"><a class="header-anchor" href="#_3-放行端口" aria-hidden="true">#</a> 3. 放行端口</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">80</span>/tcp <span class="token parameter variable">--permanent</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-重启防火墙" tabindex="-1"><a class="header-anchor" href="#_4-重启防火墙" aria-hidden="true">#</a> 4. 重启防火墙</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>firewall-cmd reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="五、安装为系统服务" tabindex="-1"><a class="header-anchor" href="#五、安装为系统服务" aria-hidden="true">#</a> 五、安装为系统服务</h2><h3 id="_1-添加系统服务" tabindex="-1"><a class="header-anchor" href="#_1-添加系统服务" aria-hidden="true">#</a> 1. 添加系统服务</h3><p>在 <code>/usr/lib/systemd/system</code> 目录下新增一个文件，命名为 <code>nginx.service</code>，然后将以下内容添加到该文件中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>nginx - high performance web server
<span class="token assign-left variable">Documentation</span><span class="token operator">=</span>http://nginx.org/en/docs/
<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target remote-fs.target nss-lookup.target
 
<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">Type</span><span class="token operator">=</span>forking
<span class="token assign-left variable">PIDFile</span><span class="token operator">=</span>/usr/local/nginx/logs/nginx.pid
<span class="token assign-left variable">ExecStartPre</span><span class="token operator">=</span>/usr/local/nginx/sbin/nginx <span class="token parameter variable">-t</span> <span class="token parameter variable">-c</span> /usr/local/nginx/conf/nginx.conf
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/nginx/sbin/nginx <span class="token parameter variable">-c</span> /usr/local/nginx/conf/nginx.conf
<span class="token assign-left variable">ExecReload</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-s</span> HUP <span class="token variable">$MAINPID</span>
<span class="token assign-left variable">ExecStop</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-s</span> QUIT <span class="token variable">$MAINPID</span>
<span class="token assign-left variable">PrivateTmp</span><span class="token operator">=</span>true
 
<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-重载系统服务" tabindex="-1"><a class="header-anchor" href="#_2-重载系统服务" aria-hidden="true">#</a> 2. 重载系统服务</h3><p>接着执行以下命令重新加载系统服务。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl daemon-reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-启停-nginx" tabindex="-1"><a class="header-anchor" href="#_3-启停-nginx" aria-hidden="true">#</a> 3. 启停 Nginx</h3><p>接着就可以分别利用下面的命令来启动和关停 <code>Nginx</code> 服务了。</p><ul><li>启动</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>关停</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl stop nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查看当前状态</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl status nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、总结</h2><p>以上就是 <code>Nginx</code> 的简介和如何在 Linux 中安装 <code>Nginx</code> 的相关内容了，如果您觉得本文对您有所帮助，还请来个一键三连支持把！</p><h2 id="⏳-联系" tabindex="-1"><a class="header-anchor" href="#⏳-联系" aria-hidden="true">#</a> ⏳ 联系</h2><p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p><p>扫一扫，探索另一个全新的世界。</p><figure><img src="'+e+'" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',84);function k(_,y){const a=n("Share");return i(),d("div",null,[f,l(a,{colorful:""})])}const P=s(x,[["render",k],["__file","20221016-intro-install.html.vue"]]);export{P as default};
