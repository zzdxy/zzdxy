{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "saltfish",
  "home_page_url": "https://zzdxy.github.io/zzdxy/zzdxy/",
  "feed_url": "https://zzdxy.github.io/zzdxy/zzdxy/feed.json",
  "description": "分享编程学习、面试求职、计算机基础、效率工具等方面内容",
  "favicon": "https://zzdxy.github.io/zzdxy/zzdxy/logo.svg",
  "items": [
    {
      "title": "",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/frontmatter.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/frontmatter.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 ⏳ 联系 想解锁更多知识？不妨关注我的微信公众号：挣扎的咸鱼（id：saltfish）。 扫一扫，探索另一个全新的世界。",
      "content_html": "<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n</div>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>挣扎的咸鱼（id：saltfish）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "image": "https://zzdxy.github.io/zzdxy/zzdxy/contact/wechatpublic.svg =150x",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-04-10T08:39:51.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "zzdxy | 编程知识公园 🔥",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/guide.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/guide.html",
      "summary": "⏰ 在阅读本博客内容时，若遇到任何内容、代码、图片等有关错误，都可以提交 issues 或者 PR 的方式进行勘误反馈，我会陆续进行完善改进，感谢支持。 issues: https://github.com/zzdxy/zzdxy/issues; PR: https://github.com/zzdxy/zzdxy/pulls，仅需在文章的末尾找到 在...",
      "content_html": "<p>⏰ 在阅读本博客内容时，若遇到任何内容、代码、图片等有关错误，都可以提交 <strong>issues</strong> 或者 <strong>PR</strong> 的方式进行勘误反馈，我会陆续进行完善改进，感谢支持。</p>\n<ul>\n<li>issues: <code>https://github.com/zzdxy/zzdxy/issues</code></li>\n<li>PR: <code>https://github.com/zzdxy/zzdxy/pulls</code>，仅需在文章的末尾找到 <strong>在 GitHub 上编辑此页</strong>，即可完成克隆和提交 <code>PR</code>。</li>\n<li>本站为整理公众号文章的知识库，关注公众号：<a href=\"https://zzdxy.gitee.io/contact/wechatpublic.svg\" target=\"_blank\" rel=\"noopener noreferrer\">郴城信息</a> 及时获取最新推文，避免错过最近更新。</li>\n<li>此外，如果在学习本站内容有疑惑的地方，还可以通过微信：<code>8698305</code> 联系我，备注 <strong>加群</strong>，拉你进技术交流群！</li>\n</ul>\n<figure><img src=\"/contact/contact.svg\" alt=\"\" width=\"200\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<hr>\n<h2> 零、本站知识图谱</h2>\n<figure><figcaption></figcaption></figure>\n<h2> 一、Java</h2>\n<h2> 二、求职面试</h2>\n<h2> 三、框架｜中间件</h2>\n<h2> 四、计算机知识</h2>\n<h2> 五、基础教程</h2>\n<h2> 六、编程语言</h2>\n<h2> 七、你问我答</h2>\n<h2> 八、好物周刊</h2>\n<h2> 九、编程分享</h2>\n<h2> 十、关于</h2>\n",
      "image": "https://zzdxy.github.io/zzdxy/zzdxy/contact/contact.svg =200x",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-04-09T03:54:07.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "想学好 Java 基础，应该去哪儿刷题",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/QA/20230402-where-exercise-java-basics.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/QA/20230402-where-exercise-java-basics.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 一、前言 其实无论是哪门编程语言，只要把相关语法掌握之后，更重要的是一些算法、编程思想的提高。 既然已经对 Java 有了一定的了解了，那肯定基本语法没啥问题了，那在这里就提名几个常用的刷题网站，用来巩固 Java 基础的同时锻炼自己的编程思想，提高自己的编程能力！ 二、网站 1. 牛客网 牛客网 (ht...",
      "content_html": "<h1> 想学好 Java 基础，应该去哪儿刷题</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<h2> 一、前言</h2>\n<p>其实无论是哪门编程语言，只要把相关语法掌握之后，更重要的是一些算法、编程思想的提高。</p>\n<p>既然已经对 <code>Java</code> 有了一定的了解了，那肯定基本语法没啥问题了，那在这里就提名几个常用的刷题网站，用来巩固 <code>Java</code> 基础的同时锻炼自己的编程思想，提高自己的编程能力！</p>\n<h2> 二、网站</h2>\n<h3> 1. 牛客网</h3>\n<ul>\n<li><a href=\"https://www.nowcoder.com/\" target=\"_blank\" rel=\"noopener noreferrer\">牛客网</a></li>\n</ul>\n<p>说白了，我们学习 <code>Java</code>，最终目的不都是为了找一个好点的工作么。既然如此，那就一开始和招聘挂钩吧。在这里推荐几个题库，用于锻炼自己 <code>Java</code> 基础。</p>\n<ul>\n<li><a href=\"https://www.nowcoder.com/exam/intelligent?questionJobId=10&amp;tagId=21003\" target=\"_blank\" rel=\"noopener noreferrer\">牛客网专项练习</a></li>\n</ul>\n<p>专项练习下的编程语言专栏中的 <code>Java</code> 选项，是巩固自己所学 <code>Java</code> 基础知识的绝佳练习。题目均以选择题的形式给出，可以对自己所学查漏补缺。遇到不会的题目，也可以查看官方给出的答案或者大家在评论区给出的解析。</p>\n<p>除了 <code>Java</code> 基础之外，作为一个 <code>CRUD</code> 打工人，对于数据库的操作怎么能不熟练呢？同样的，牛客提供了针对不同的需求，给出了不同级别的练习题。</p>\n<ol>\n<li>\n<p><a href=\"https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=199\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>针对非技术小白入门</strong></a></p>\n</li>\n<li>\n<p><a href=\"https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=341\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>SQL 基础进阶</strong></a></p>\n</li>\n<li>\n<p><a href=\"https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=240\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>SQL 进阶挑战</strong></a></p>\n</li>\n<li>\n<p><a href=\"https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=298\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>MySQL 必知必会</strong></a></p>\n</li>\n<li>\n<p><a href=\"https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=268\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>大厂面试实战</strong></a></p>\n</li>\n</ol>\n<p>除了以上针对 <code>Java</code> 基础以及 <code>SQL</code> 的相关练习之外，还是以过来人的身份建议楼主不要仅局限于语言本身，还是要学一些数据结构 + 算法方面的知识的，这样能帮你在工作中提高不少的效率。同时，设想一下，假设在面试时，一个同样的算法题，你实现的复杂度为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> ，而其他人实现的复杂度为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> ，那你觉得最终企业会招谁呢？</p>\n<p>算法练习的网站也比较多了，这里就推荐几个最常用的。</p>\n<h3> 2. LeetCode</h3>\n<ul>\n<li><a href=\"https://leetcode.cn/?utm_source=LCUS&amp;utm_medium=ip_redirect&amp;utm_campaign=transfer2china\" target=\"_blank\" rel=\"noopener noreferrer\">LeetCode 美国站</a></li>\n</ul>\n<p>首先推荐的是 <code>LeetCode</code> 美国站。当然，这需要你的英语基础比较好，如果你觉得你的英语还不错，那么优先推荐去这里。如果你英语不是那么好，那也没关系。<code>LeetCode</code> 也做了本土化，提供了中文站，你同样可以在这里刷题。</p>\n<ul>\n<li><a href=\"https://leetcode.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">LeetCode 中国站</a></li>\n</ul>\n<h3> 3. 牛客网</h3>\n<p>没错，又是它。现在国内有很多企业都是在牛客笔试的，为了尽快适应招聘面试，推荐在这里刷算法题，这样在笔试时也不会因为环境而感到陌生，尽快上手。</p>\n<p>这里推荐几个题库，如果题库里的题目刷起来得心应手，那笔试还有啥怕的~~</p>\n<ol>\n<li>\n<p><a href=\"https://www.nowcoder.com/exam/oj/ta?tpId=13\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>剑指 Offer</strong></a>：剖析了 80 个典型的编程面试题，系统整理基础知识、代码质量、解题思路、优化效率和综合能力这 5 个面试要点。</p>\n</li>\n<li>\n<p><a href=\"https://www.nowcoder.com/exam/oj?page=1&amp;tab=%E5%90%8D%E4%BC%81%E7%9C%9F%E9%A2%98&amp;topicId=182\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>名企真题</strong></a>：汇聚了字节跳动、美团、百度、腾讯、华为、京东、小米、网易、快手等一众大厂笔试真题，虽然笔试时刷到原题的概率较小，但摸索下大厂的出题的套路和设计的知识点也未尝不可！</p>\n</li>\n</ol>\n<p>除了以上两个题库，也可以去 <code>LeetCode</code> 刷下《剑指 Offer》后续版本的题目。</p>\n<ul>\n<li><a href=\"https://leetcode.cn/problemset/all/?page=1&amp;listId=e8X3pBZi\" target=\"_blank\" rel=\"noopener noreferrer\">《剑指 Offer（专线突击版）》</a></li>\n<li><a href=\"https://leetcode.cn/problemset/all/?page=1&amp;listId=xb9nqhhg\" target=\"_blank\" rel=\"noopener noreferrer\">《剑指 Offer（第 2 版）》</a></li>\n</ul>\n<h3> 4. 赛码网</h3>\n<ul>\n<li><a href=\"https://www.acmcoder.com/#/home\" target=\"_blank\" rel=\"noopener noreferrer\">赛码网</a></li>\n</ul>\n<p>智能在线考试专家，除开牛客之外，也有不少企业在这里进行招聘笔试，比如阿里、京东、头条、美团、滴滴、小米等公司校招考试都在用。</p>\n<h2> 三、最后</h2>\n<p>推荐仅限于推荐，最重要的还是要行动起来。就算一开始很吃力，那也要坚持！</p>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "image": "https://zzdxy.github.io/zzdxy/zzdxy/contact/wechatpublic.svg =150x",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "你问我答"
      ]
    },
    {
      "title": "你问我答",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/QA/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/QA/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "关于",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/about/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/about/",
      "summary": "关于自己 关于学习 关于工作 git config --global user.name \"zzdxy\" git config --global user.email \"jiefav@163.com\"",
      "content_html": "<h2> 关于自己</h2>\n<h2> 关于学习</h2>\n<h2> 关于工作</h2>\n<p>git config --global user.name \"zzdxy\"\ngit config --global user.email \"jiefav@163.com\"</p>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "关于"
      ]
    },
    {
      "title": "计算机知识",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/",
      "summary": "组成原理 操作系统 计算机网络 数据结构与算法 1. 数据结构与算法：数据结构简介 (algo/20220503-datastructure-intro.md) 2. 数据结构与算法：算法简介 (algo/20220511-algo-intro.md) 3. 数据结构与算法：时间 & 空间复杂度 (algo/20220512-time-space.md...",
      "content_html": "<h2> 组成原理</h2>\n<h2> 操作系统</h2>\n<h2> 计算机网络</h2>\n<h2> 数据结构与算法</h2>\n<ol>\n<li><a href=\"/zzdxy/cs-wiki/algo/20220503-datastructure-intro.html\" target=\"blank\">数据结构与算法：数据结构简介</a></li>\n<li><a href=\"/zzdxy/cs-wiki/algo/20220511-algo-intro.html\" target=\"blank\">数据结构与算法：算法简介</a></li>\n<li><a href=\"/zzdxy/cs-wiki/algo/20220512-time-space.html\" target=\"blank\">数据结构与算法：时间 &amp; 空间复杂度</a></li>\n<li><a href=\"/zzdxy/cs-wiki/algo/20220516-array.html\" target=\"blank\">数据结构与算法：数组简介</a></li>\n<li><a href=\"/zzdxy/cs-wiki/algo/20200510-arr-crud.html\" target=\"blank\">数据结构与算法：数组的增删改查</a></li>\n<li><a href=\"/zzdxy/cs-wiki/algo/20220513-sorted-arr-duplication.html\" target=\"blank\">数据结构与算法：有序数组去重</a></li>\n<li><a href=\"/zzdxy/cs-wiki/algo/20220515-linkedlist.html\" target=\"blank\">数据结构与算法：链表详解</a></li>\n<li><a href=\"/zzdxy/cs-wiki/algo/202205170-binary-tree-traverse.html\" target=\"blank\">数据结构与算法：二叉树的遍历</a></li>\n</ol>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "框架｜中间件",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/",
      "summary": "Spring 1. Spring 系列：简介 (spring/20200720-intro.md) 2. Spring 系列：依赖注入 (spring/20200724-di.md) 3. Spring 系列：注解详解 (spring/20210521-annotation.md) 4. Spring 系列：IoC 大揭秘 (spring/202007...",
      "content_html": "<h2> Spring</h2>\n<ol>\n<li><a href=\"/zzdxy/framework/spring/20200720-intro.html\" target=\"blank\">Spring 系列：简介</a></li>\n<li><a href=\"/zzdxy/framework/spring/20200724-di.html\" target=\"blank\">Spring 系列：依赖注入</a></li>\n<li><a href=\"/zzdxy/framework/spring/20210521-annotation.html\" target=\"blank\">Spring 系列：注解详解</a></li>\n<li><a href=\"/zzdxy/framework/spring/20200723-ioc.html\" target=\"blank\">Spring 系列：IoC 大揭秘</a></li>\n<li><a href=\"/zzdxy/framework/spring/20220428-ioc-xml.html\" target=\"blank\">Spring 系列：IoC 简介及入门实例（XML 版）</a></li>\n<li><a href=\"/zzdxy/framework/spring/20220429-bean.html\" target=\"blank\">Spring 系列：Bean 详解</a></li>\n</ol>\n<h2> MyBatis</h2>\n<ol>\n<li><a href=\"/zzdxy/framework/mybatis/20200719-intro.html\" target=\"blank\">MyBatis 系列：简介</a></li>\n<li><a href=\"/zzdxy/framework/mybatis/20200720-quick-start.html\" target=\"blank\">MyBatis 系列：入门实例</a></li>\n<li><a href=\"/zzdxy/framework/mybatis/20200721-annotation.html\" target=\"blank\">MyBatis 系列：注解开发</a></li>\n<li><a href=\"/zzdxy/framework/mybatis/20200722-pri-sec-cache.html\" target=\"blank\">MyBatis 系列：一二级缓存</a></li>\n<li><a href=\"/zzdxy/framework/mybatis/20211214-generator.html\" target=\"blank\">MyBatis 系列：代码生成器</a></li>\n</ol>\n<h2> MyBatis Plus</h2>\n<ol>\n<li><a href=\"/zzdxy/framework/mybatis-plus/20210807-intro.html\" target=\"blank\">MyBatis Plus 系列：简介及入门实例</a></li>\n<li><a href=\"/zzdxy/framework/mybatis-plus/20210808-log-crud.html\" target=\"blank\">MyBatis Plus 系列：日志配置及常用 CRUD</a></li>\n</ol>\n<h2> Spring Boot 2.7.x</h2>\n<ol>\n<li><a href=\"/zzdxy/framework/springboot/2.7.x/20200520-intro.html\" target=\"blank\">Spring Boot 2.7.x：简介</a></li>\n<li><a href=\"/zzdxy/framework/springboot/2.7.x/20211003-config.html\" target=\"blank\">Spring Boot 2.7.x：配置详解</a></li>\n<li><a href=\"/zzdxy/framework/springboot/2.7.x/20210811-create-ways.html\" target=\"blank\">Spring Boot 2.7.x：创建项目的几种方式</a></li>\n<li><a href=\"/zzdxy/framework/springboot/2.7.x/20200730-jdbc.html\" target=\"blank\">Spring Boot 2.7.x：整合 JDBC Template 实例</a></li>\n<li><a href=\"/zzdxy/framework/springboot/2.7.x/20200726-xml-mybatis.html\" target=\"blank\">Spring Boot 2.7.x：XML 方式整合 MyBatis 实例</a></li>\n<li><a href=\"/zzdxy/framework/springboot/2.7.x/20200727-annotation-mybatis.html\" target=\"blank\">Spring Boot 2.7.x：注解方式整合 MyBatis 实例</a></li>\n<li><a href=\"/zzdxy/framework/springboot/2.7.x/20200728-annotation-mybatis-pagehelper.html\" target=\"blank\">Spring Boot 2.7.x：注解方式整合 Mybatis + PageHelper 分页实例</a></li>\n<li><a href=\"/zzdxy/framework/springboot/2.7.x/20211130-freemaker.html\" target=\"blank\">Spring Boot 2.7.x：整合 FreeMarker 实例</a></li>\n<li><a href=\"/zzdxy/framework/springboot/2.7.x/20200729-thymeleaf.html\" target=\"blank\">Spring Boot 2.7.x：整合 Thymeleaf 实例</a></li>\n<li><a href=\"/zzdxy/framework/springboot/2.7.x/20220106-swagger2.html\" target=\"blank\">Spring Boot 2.7.x：集成 Swagger2</a></li>\n<li><a href=\"/zzdxy/framework/springboot/2.7.x/20220110-swagger3.html\" target=\"blank\">Spring Boot 2.7.x：集成 Swagger3</a></li>\n<li><a href=\"/zzdxy/framework/springboot/2.7.x/20220430-knife4j.html\" target=\"blank\">Spring Boot 2.7.x：集成 Knife4j</a></li>\n<li><a href=\"/zzdxy/framework/springboot/2.7.x/20220604-security.html\" target=\"blank\">Spring Boot 2.7.x：集成 Security 入门小实例</a></li>\n</ol>\n<h2> Redis</h2>\n<ol>\n<li><a href=\"/zzdxy/framework/redis/20210821-intro.html\" target=\"blank\">Redis：简介</a></li>\n<li><a href=\"/zzdxy/framework/redis/20221016-persistence.html\" target=\"blank\">Redis：持久化</a></li>\n</ol>\n<h2> Nginx</h2>\n<ol>\n<li><a href=\"/zzdxy/framework/nginx/20221016-intro-install.html\" target=\"blank\">简介与环境搭建</a></li>\n</ol>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "求职面试",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/interview/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/interview/",
      "summary": "知识点 1. Java 基础面试知识点 (knowledge/20240201-java-basic.md) 2. Java 进阶面试知识点 (knowledge/20240203-java-advanced.md) 3. MySQL 面试知识点 (knowledge/20240203-mysql.md) 4. MyBatis 面试知识点 (knowl...",
      "content_html": "<h2> 知识点</h2>\n<ol>\n<li><a href=\"/zzdxy/interview/knowledge/20240201-java-basic.html\" target=\"blank\">Java 基础面试知识点</a></li>\n<li><a href=\"/zzdxy/interview/knowledge/20240203-java-advanced.html\" target=\"blank\">Java 进阶面试知识点</a></li>\n<li><a href=\"/zzdxy/interview/knowledge/20240203-mysql.html\" target=\"blank\">MySQL 面试知识点</a></li>\n<li><a href=\"/zzdxy/interview/knowledge/20210822-mybatis.html\" target=\"blank\">MyBatis 面试知识点</a></li>\n<li><a href=\"/zzdxy/interview/knowledge/20210103-spring.html\" target=\"blank\">知识点：Spring 面试知识点</a></li>\n<li><a href=\"/zzdxy/interview/knowledge/20210629-thread.html\" target=\"blank\">知识点：多线程面试知识点</a></li>\n<li><a href=\"/zzdxy/interview/knowledge/20210528-exception.html\" target=\"blank\">知识点：异常面试知识点</a></li>\n<li><a href=\"/zzdxy/interview/knowledge/20201231-network.html\" target=\"blank\">知识点：计算机网络面试知识点</a></li>\n</ol>\n<h2> 面经</h2>\n<h2> 技巧</h2>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Java",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/",
      "summary": "Java 基础 1. Java 基础：简介 (javase/20220701-intro-to-java.md) 2. Java 基础：开发环境搭建及入门程序 (javase/20220702-jdk-install-and-hello-world.md) 3. Java 基础：利用 IDEA 进行 Java 开发 (javase/20220703-l...",
      "content_html": "<h2> Java 基础</h2>\n<ol>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220701-intro-to-java.html\" target=\"blank\">Java 基础：简介</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220702-jdk-install-and-hello-world.html\" target=\"blank\">Java 基础：开发环境搭建及入门程序</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220703-learn-java-with-idea.html\" target=\"blank\">Java 基础：利用 IDEA 进行 Java 开发</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220704-variable-and-datatype.html\" target=\"blank\">Java 基础：变量与数据类型</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220705-binary-convert.html\" target=\"blank\">Java 基础：常用进制转换</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220706-operator.html\" target=\"blank\">Java 基础：操作符</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220707-control-process.html\" target=\"blank\">Java 基础：控制流程</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20221127-loop-in-action.html\" target=\"blank\">Java 基础：流程控制知识大闯关</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220708-how-to-operate-array.html\" target=\"blank\">Java 基础：数组操作的奇技淫巧</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220709-oop-1.html\" target=\"blank\">Java 基础：面向对象的 3、5 知识点</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220710-oop-2.html\" target=\"blank\">Java 基础：类的相关知识</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220711-oop-3.html\" target=\"blank\">Java 基础：包和 jar 文件的创建</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220712-all-kinds-of-variable.html\" target=\"blank\">Java 基础：成员变量、实例变量、静态变量、局部变量？</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220713-string.html\" target=\"blank\">Java 基础：String 详解</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220714-arraylist.html\" target=\"blank\">Java 基础：ArrayList 详解</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220715-in-out-stream.html\" target=\"blank\">Java 基础：输入输出流</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220716-reflection.html\" target=\"blank\">Java 基础：反射机制详解</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220721-annotations.html\" target=\"blank\">Java 基础：深入浅出 Java 注解</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220717-jdbc-introduction.html\" target=\"blank\">Java 基础：JDBC 入门指南</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220718-test-with-junit.html\" target=\"blank\">Java 基础：是时候拥抱 Junit 单元测试了！</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220719-lombok-install-and-usage.html\" target=\"blank\">Java 基础：Lombok 安装及使用指南</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220720-fastjson2-quickstart.html\" target=\"blank\">Java 基础：Fastjson V2 简单使用手册</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20221203-oop-advance.html\" target=\"blank\">Java 基础：static 和 final 小课堂</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20221211-abstract.html\" target=\"blank\">Java 基础：抽象、接口和内部类</a></li>\n<li><a href=\"/zzdxy/java-tutorial/javase/20220722-mockito.html\" target=\"blank\">Java 基础：Mockito + JUnit 单元测试实例</a></li>\n</ol>\n<h2> 实战训练</h2>\n<h3> 项目实践</h3>\n<ol>\n<li><a href=\"/zzdxy/java-tutorial/in-action/project/20220307-mysql-mybatis-stu-manag-sys.html\" target=\"blank\">项目实践：MySQL + MyBatis 版学生管理系统</a></li>\n<li><a href=\"/zzdxy/java-tutorial/in-action/project/20210405-stu-manage-sys.html\" target=\"blank\">项目实践：学生管理系统</a></li>\n<li><a href=\"/zzdxy/java-tutorial/in-action/project/20210801-tally-book.html\" target=\"blank\">项目实践：记账本</a></li>\n<li><a href=\"/zzdxy/java-tutorial/in-action/project/20210731-order-system.html\" target=\"blank\">项目实践：点菜系统</a></li>\n</ol>\n<h3> Java 入门</h3>\n<ol>\n<li><a href=\"/zzdxy/java-tutorial/in-action/se/20220625-1-5.html\" target=\"blank\">入门练习：1 - 5</a></li>\n<li><a href=\"/zzdxy/java-tutorial/in-action/se/20220626-6-10.html\" target=\"blank\">入门练习：6 - 10</a></li>\n<li><a href=\"/zzdxy/java-tutorial/in-action/se/20220627-11-15.html\" target=\"blank\">入门练习：11 - 15</a></li>\n<li><a href=\"/zzdxy/java-tutorial/in-action/se/20220628-16-20.html\" target=\"blank\">入门练习：16 - 20</a></li>\n<li><a href=\"/zzdxy/java-tutorial/in-action/se/20220629-21-25.html\" target=\"blank\">入门练习：21 - 25</a></li>\n<li><a href=\"/zzdxy/java-tutorial/in-action/se/20220630-26-30.html\" target=\"blank\">入门练习：26 - 30</a></li>\n<li><a href=\"/zzdxy/java-tutorial/in-action/se/20220701-31-35.html\" target=\"blank\">入门练习：31 - 35</a></li>\n<li><a href=\"/zzdxy/java-tutorial/in-action/se/20220702-36-40.html\" target=\"blank\">入门练习：36 - 40</a></li>\n</ol>\n<h2> MySQL 教程</h2>\n<ol>\n<li><a href=\"/zzdxy/java-tutorial/mysql/20220726-sql-in-10min.html\" target=\"blank\">MySQL 教程：《SQL 必知必会》全解析</a></li>\n</ol>\n<h2> Web 前端</h2>\n<!-- 1. [前端：开发环境搭建](front-end/20230829-environment.md)\n2. [前端：HTML 大揭秘](front-end/20230829-html.md)\n3. [前端：CSS 教程](front-end/20230903-css.md) -->\n<ol>\n<li><a href=\"/zzdxy/java-tutorial/front-end/20230926-axios.html\" target=\"blank\">前端：Axios 简单使用指南</a></li>\n</ol>\n<h3> JavaScript</h3>\n<ol>\n<li><a href=\"/zzdxy/java-tutorial/front-end/javascript/20220416-intro.html\" target=\"blank\">JavaScript：简介</a></li>\n<li><a href=\"/zzdxy/java-tutorial/front-end/javascript/20220417-var.html\" target=\"blank\">JavaScript：注释、输入输出、变量</a></li>\n<li><a href=\"/zzdxy/java-tutorial/front-end/javascript/20220418-datatype.html\" target=\"blank\">JavaScript：数据类型</a></li>\n<li><a href=\"/zzdxy/java-tutorial/front-end/javascript/20220419-operator.html\" target=\"blank\">JavaScript：操作符</a></li>\n<li><a href=\"/zzdxy/java-tutorial/front-end/javascript/20220420-flow.html\" target=\"blank\">JavaScript：流程控制</a></li>\n<li><a href=\"/zzdxy/java-tutorial/front-end/javascript/20220421-array.html\" target=\"blank\">JavaScript：数组</a></li>\n<li><a href=\"/zzdxy/java-tutorial/front-end/javascript/20220422-function.html\" target=\"blank\">JavaScript：函数</a></li>\n<li><a href=\"/zzdxy/java-tutorial/front-end/javascript/20220423-oop.html\" target=\"blank\">JavaScript：面向对象</a></li>\n<li><a href=\"/zzdxy/java-tutorial/front-end/javascript/20220424-dom-attr.html\" target=\"blank\">JavaScript：DOM 元素获取、属性修改</a></li>\n<li><a href=\"/zzdxy/java-tutorial/front-end/javascript/20220425-dom.html\" target=\"blank\">JavaScript：DOM 事件</a></li>\n<li><a href=\"/zzdxy/java-tutorial/front-end/javascript/20220301-chrome-js.html\" target=\"blank\">JavaScript：Chrome 中执行 JavaScript 代码</a></li>\n</ol>\n<h3> Vue 3 系列</h3>\n<ol>\n<li><a href=\"/zzdxy/java-tutorial/front-end/vue3/20220605-intro.html\" target=\"blank\">Vue 3 系列：简介</a></li>\n<li><a href=\"/zzdxy/java-tutorial/front-end/vue3/20220606-vite-quickstart.html\" target=\"blank\">Vue 3 系列：搭建 Vue + Vite 入门项目</a></li>\n<li><a href=\"/zzdxy/java-tutorial/front-end/vue3/20221012-common-command.html\" target=\"blank\">Vue 3 系列：常用指令</a></li>\n</ol>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "编程语言",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/program-language/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/program-language/",
      "summary": "C 语言 1. C 语言：内存管理函数 (c/20180308-memory-manage.md) 2. C 语言：知识点总结 (c/20180720-summary.md) C++ 1. C++ 系列：知识点总结 (cpp/20180720-summary.md) Python 教程 1. Python 教程：简介 (python/tutorial/...",
      "content_html": "<h2> C 语言</h2>\n<ol>\n<li><a href=\"/zzdxy/program-language/c/20180308-memory-manage.html\" target=\"blank\">C 语言：内存管理函数</a></li>\n<li><a href=\"/zzdxy/program-language/c/20180720-summary.html\" target=\"blank\">C 语言：知识点总结</a></li>\n</ol>\n<h2> C++</h2>\n<ol>\n<li><a href=\"/zzdxy/program-language/cpp/20180720-summary.html\" target=\"blank\">C++ 系列：知识点总结</a></li>\n</ol>\n<h2> Python</h2>\n<h3> 教程</h3>\n<ol>\n<li><a href=\"/zzdxy/program-language/python/tutorial/20210331-intro.html\" target=\"blank\">Python 教程：简介</a></li>\n<li><a href=\"/zzdxy/program-language/python/tutorial/20210401-pycharm.html\" target=\"blank\">Python 教程：玩转 Pycharm</a></li>\n<li><a href=\"/zzdxy/program-language/python/tutorial/20210402-language-element.html\" target=\"blank\">Python 教程：语言元素</a></li>\n<li><a href=\"/zzdxy/program-language/python/tutorial/20210403-condition.html\" target=\"blank\">Python 教程：条件判断、循环以及循环的终止</a></li>\n<li><a href=\"/zzdxy/program-language/python/tutorial/20220420-shopping.html\" target=\"blank\">Python 教程：购物车</a></li>\n<li><a href=\"/zzdxy/program-language/python/tutorial/20180429-turtle.html\" target=\"blank\">Python 教程：turtle 库使用</a></li>\n<li><a href=\"/zzdxy/program-language/python/tutorial/20180501-digital-time.html\" target=\"blank\">Python 教程：数码管绘制</a></li>\n<li><a href=\"/zzdxy/program-language/python/tutorial/20220421-polyglot-install.html\" target=\"blank\">Python 教程：Python 3.7 安装 polyglot 失败</a></li>\n</ol>\n<h3> 编程实例</h3>\n<ol>\n<li><a href=\"/zzdxy/program-language/python/instance/20181003-1-5.html\" target=\"blank\">编程实例（1 - 5）</a></li>\n<li><a href=\"/zzdxy/program-language/python/instance/20181004-6-10.html\" target=\"blank\">编程实例（6 - 10）</a></li>\n<li><a href=\"/zzdxy/program-language/python/instance/20181005-11-15.html\" target=\"blank\">编程实例（11 - 15）</a></li>\n<li><a href=\"/zzdxy/program-language/python/instance/20181006-16-20.html\" target=\"blank\">编程实例（16 - 20）</a></li>\n<li><a href=\"/zzdxy/program-language/python/instance/20181007-21-25.html\" target=\"blank\">编程实例（21 - 25）</a></li>\n<li><a href=\"/zzdxy/program-language/python/instance/20181008-26-30.html\" target=\"blank\">编程实例（26 - 30）</a></li>\n<li><a href=\"/zzdxy/program-language/python/instance/20181009-31-35.html\" target=\"blank\">编程实例（31 - 35）</a></li>\n<li><a href=\"/zzdxy/program-language/python/instance/20181010-36-40.html\" target=\"blank\">编程实例（36 - 40）</a></li>\n<li><a href=\"/zzdxy/program-language/python/instance/20181011-41-45.html\" target=\"blank\">编程实例（41 - 45）</a></li>\n<li><a href=\"/zzdxy/program-language/python/instance/20181012-46-50.html\" target=\"blank\">编程实例（46 - 50）</a></li>\n<li><a href=\"/zzdxy/program-language/python/instance/20181013-51-55.html\" target=\"blank\">编程实例（51 - 55）</a></li>\n</ol>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "基础教程",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/tutorial/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/tutorial/",
      "summary": "博客搭建 1. 博客搭建：Vuepress + GitHub Actions 实现博客自动部署 (blog/20210826-vuepress.md) 2. 博客搭建：Hexo + Github Pages 博客搭建教程 (blog/20220401-hexo.md) 3. 博客搭建：dumi 博客搭建 (blog/20220610-dumi.md) ...",
      "content_html": "<h2> 博客搭建</h2>\n<ol>\n<li><a href=\"/zzdxy/tutorial/blog/20210826-vuepress.html\" target=\"blank\">博客搭建：Vuepress + GitHub Actions 实现博客自动部署</a></li>\n<li><a href=\"/zzdxy/tutorial/blog/20220401-hexo.html\" target=\"blank\">博客搭建：Hexo + Github Pages 博客搭建教程</a></li>\n<li><a href=\"/zzdxy/tutorial/blog/20220610-dumi.html\" target=\"blank\">博客搭建：dumi 博客搭建</a></li>\n<li><a href=\"/zzdxy/tutorial/blog/20220611-hugo.html\" target=\"blank\">博客搭建：Hugo + Github Pages 博客搭建教程</a></li>\n<li><a href=\"/zzdxy/tutorial/blog/20201228-halo.html\" target=\"blank\">博客搭建：Halo 博客搭建教程</a></li>\n<li><a href=\"/zzdxy/tutorial/blog/20220612-docsify.html\" target=\"blank\">博客搭建：docsify 文档型博客搭建</a></li>\n</ol>\n<h2> IDEA 教程</h2>\n<ol>\n<li><a href=\"/zzdxy/tutorial/idea/20210914-java-app.html\" target=\"blank\">IDEA 教程：创建 Java 入门应用</a></li>\n<li><a href=\"/zzdxy/tutorial/idea/20211010-tips.html\" target=\"blank\">IDEA 教程：实用小技巧</a></li>\n<li><a href=\"/zzdxy/tutorial/idea/20220105-git.html\" target=\"blank\">IDEA 教程：集成并使用 Git 图文教程</a></li>\n<li><a href=\"/zzdxy/tutorial/idea/20220202-idea-guide.html\" target=\"blank\">IDEA 教程：最新版 IntelliJ IDEA 使用手册</a></li>\n<li><a href=\"/zzdxy/tutorial/idea/20230525-code-commit.html\" target=\"blank\">IDEA 教程：原来大厂都是这么提交代码的</a></li>\n</ol>\n<h2> 效率工具</h2>\n<ol>\n<li><a href=\"/zzdxy/tutorial/efficiency/20230425-markdown-tutorial.html\" target=\"blank\">效率工具：如何用 Markdown 写出好看的文章</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20220729-10-amazing-website.html\" target=\"blank\">效率工具：10 个神奇的网站，助力带薪摸鱼</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20220729-cdn.html\" target=\"blank\">效率工具：网站访问太慢，不妨试试这些 CDN</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20220731-exercise-websites.html\" target=\"blank\">效率工具：计算机专业涨薪必备的几个网站</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20221127-cmd.html\" target=\"blank\">效率工具：黑客大神也常用的一些 CMD 命令</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20230710-browser-plugin-install.html\" target=\"blank\">效率工具：如何在浏览器中安装插件</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20220729-emoji.html\" target=\"blank\">效率工具：Emoji 表情大作战</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20221114-macos-install-node.html\" target=\"blank\">效率工具：macOS 安装 Node.js</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20220426-iterm2-fish.html\" target=\"blank\">效率工具：iTerm2 + Fish 高效终端</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20220811-iterm2-zsh.html\" target=\"blank\">效率工具：iTerm2 + Oh My Zsh 终端神器</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20220623-ppt-template.html\" target=\"blank\">效率工具：PPT 模板免费下载</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20200511-windows-install-node.html\" target=\"blank\">效率工具：Windows 安装 Node.js</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20200517-ubuntu-root-pwd.html\" target=\"blank\">效率工具：Ubuntu 默认 root 密码修改</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20200518-vmware-ubuntu.html\" target=\"blank\">效率工具：VMware 安装 Ubuntu</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20200519-xshell-ubuntu.html\" target=\"blank\">效率工具：XShell 连接 Ubuntu</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20200520-ubuntu.html\" target=\"blank\">效率工具：手把手配置 Ubuntu</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20200521-manjora.html\" target=\"blank\">效率工具：玩转 Manjora</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20201010-video-subtitle.html\" target=\"blank\">效率工具：如何给视频添加字幕</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20201229-u-disk-sys-booter.html\" target=\"blank\">效率工具：U 盘启动盘制作</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20201230-windows-tips.html\" target=\"blank\">效率工具：优雅地使用 Windows 10</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20201231-windows-sys.html\" target=\"blank\">效率工具：Windows 系统安装教程</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20210422-signature.html\" target=\"blank\">效率工具：如何制作电子签名</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20210504-write-tools.html\" target=\"blank\">效率工具：技术写作中的神兵利器</a></li>\n<li><a href=\"/zzdxy/tutorial/efficiency/20220623-ppt-template.html\" target=\"blank\">效率工具：PPT 模板免费下载</a></li>\n</ol>\n<h2> 软件设计师</h2>\n<ol>\n<li><a href=\"/zzdxy/tutorial/software-designer/20221024-computer-system.html\" target=\"blank\">软设：计算机系统</a></li>\n</ol>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "创刊寄语",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/weekly/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/weekly/",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 一、前言 村雨遥的好物周刊，记录每周看到的有价值的信息，主要针对计算机领域，每周五发布。专栏目的在于记录让自己有印象的信息做一个备份及分享，阅读渠道如下： 博客 (https://cunyu1943.github.io/) | 博客(国内) (https://cunyu1943.gitee.io/); J...",
      "content_html": "<h1> 创刊寄语</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<h2> 一、前言</h2>\n<p>村雨遥的好物周刊，记录每周看到的有价值的信息，主要针对计算机领域，每周五发布。专栏目的在于记录让自己有印象的信息做一个备份及分享，阅读渠道如下：</p>\n<ul>\n<li><a href=\"https://cunyu1943.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">博客</a> | <a href=\"https://cunyu1943.gitee.io/\" target=\"_blank\" rel=\"noopener noreferrer\">博客(国内)</a></li>\n<li><a href=\"https://github.com/cunyu1943/JavaPark\" target=\"_blank\" rel=\"noopener noreferrer\">JavaPark</a></li>\n<li><a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzIyNTg2MjkzNw==&amp;action=getalbum&amp;album_id=2501145320567963650&amp;scene=173&amp;from_msgid=2247497779&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">公众号</a>：移动端推荐</li>\n</ul>\n<p>如果你想推荐或自荐项目/网站/软件/插件/资料等任何资源，欢迎提交 <strong><a href=\"https://github.com/cunyu1943/JavaPark/issues\" target=\"_blank\" rel=\"noopener noreferrer\">issue</a></strong> 或者添加我 <strong><a href=\"/contact/wechat.svg\" target=\"_blank\" rel=\"noopener noreferrer\">个人微信：coder_cunYu</a></strong> 和我交流。</p>\n\n<h2> 二、介绍</h2>\n<p>互联网时代，各种信息层出不穷。而从众多信息中过滤出需要的，并将这些信息聚合起来就是一项十分重要的技能。</p>\n<p>作为一名程序员，每天在网上冲浪时经常会浏览到各种好玩的项目、资源、软件以及资源等。而久而久之，一些好的资源渐渐就淹没在信息流中了，后来想再去找也不知道该去哪儿查。</p>\n<p>针对这个问题，给我个人感觉非常不好，不知道你是否也会有这样的感觉呢？于是 <strong>好物周刊</strong> 诞生了，周刊于我而言既是一种留存，也是一种分享，希望我能一直坚持下去，欢迎大家监督。</p>\n<p>如果大家感兴趣，请持续关注我的的周刊专栏<a href=\"https://cunyu1943.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">电子书</a>，也请移步<a href=\"https://github.com/cunyu1943/JavaPark/\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a> | <a href=\"https://gitee.com/cunyu1943/JavaPark/\" target=\"_blank\" rel=\"noopener noreferrer\">Gitee</a> 给我一个<code>Star</code>支持下吧。</p>\n<p>好物周刊开始于 <strong>2023.04.15</strong>，如果看到这篇文章时我依旧在坚持更新，那就是最好的消息。</p>\n<h2> 三、交流</h2>\n<p>欢迎关注<a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzIyNTg2MjkzNw==&amp;action=getalbum&amp;album_id=2501145320567963650&amp;scene=173&amp;from_msgid=2247497779&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">公众号</a>|<a href=\"https://cunyu1943.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">博客</a>一起交流（每周在公众号首发）：</p>\n\n<h2> 四、赞助</h2>\n<p>开源不易，如果你觉得本仓库对你有帮助，或许可以请我喝杯咖啡，不靠它生存但仍希望得到你的鼓励。</p>\n<figure><img src=\"/award/donate.jpg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h2> 五、贡献</h2>\n<ol>\n<li>\n<p>如果您对本项目有任何建议或者发现文中内容有错误的，欢迎私信我或者提交 <a href=\"https://github.com/cunyu1943/JavaPark/issues\" target=\"_blank\" rel=\"noopener noreferrer\"><code>issues</code></a> 指正。</p>\n</li>\n<li>\n<p>对于项目中未涉及到的知识点，欢迎提交 <code>PR</code>。</p>\n</li>\n</ol>\n",
      "image": "https://zzdxy.github.io/zzdxy/zzdxy/award/donate.jpg =150x",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "关于工作",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/about/job/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/about/job/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "关于自己",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/about/me/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/about/me/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "关于学习",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/about/study/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/about/study/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "数组的增删改查",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/algo/20200510-arr-crud.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/algo/20200510-arr-crud.html",
      "summary": "一、前言 作为重要的线性数据结构， 我们经常会跟数组打交道。所谓数组，就是一系列相同数据类型元素的集合，数据类型可以是 int、`float、String、类……。而对数组的增删改查则是日常用到的操作。为了弄清楚这些常用操作，此博客则对这些操作进行一一梳理。 二、数组简介 1. 如何创建数组 我们以 Java 中创建数组为例，创建语法如下： 其中各个字...",
      "content_html": "<h1> 数组的增删改查</h1>\n<h2> 一、前言</h2>\n<p>作为重要的线性数据结构， 我们经常会跟数组打交道。所谓数组，就是一系列相同数据类型元素的集合，数据类型可以是 <code>int</code>、<code>float</code>、<code>String</code>、类……。而对数组的增删改查则是日常用到的操作。为了弄清楚这些常用操作，此博客则对这些操作进行一一梳理。</p>\n<h2> 二、数组简介</h2>\n<h3> 1. 如何创建数组</h3>\n<p>我们以 <code>Java</code> 中创建数组为例，创建语法如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>其中各个字段的含义如下：</p>\n<ul>\n<li><code>dataType</code>：也就是我们数组中元素的数据类型；</li>\n<li><code>arrName</code>：即数组名；</li>\n<li><code>size</code>：即数组所能容纳的元素数量；</li>\n<li><code>new</code>：<code>Java</code> 语言中的关键词；</li>\n</ul>\n<p>假设我们要创建一个由 10 个元素的数组，其中元素的数据类型为 <code>int</code>，则创建的方法如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>创建数组时，我们一定要注意，必须明确指定数组的元素个数，也就是上边说的 <code>size</code>。</p>\n<h3> 2. 数组长度与容量</h3>\n<p>在我们日常使用中，大家都容易把这两个概念混为一谈，但是实际上，两者是不一样的，两者的定义如下：</p>\n<ul>\n<li><strong>容量</strong>：指当前数组最多能容纳的元素个数，也就是我们创建数组时所指定的元素个数；</li>\n<li><strong>长度</strong>：指当前数组中的元素个数，它不一定等于容量，小于容量时表示数组还可以添加元素；</li>\n<li>两者关系：<strong>长度 &lt;= 容量</strong>；</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 三、插入元素到数组</h2>\n<p>要插入元素到数组中，可以分为如下 3 中情况：</p>\n<ol>\n<li>插入数组开头</li>\n<li>插入数组结尾</li>\n<li>插入数组中间</li>\n</ol>\n<h3> 1. 插入元素到数组开头</h3>\n<p>要将元素插入数组开头位置，我们只需要先把原来数组的元素整体都向后移动一个位置，然后将插入元素赋值给数组第一个元素即可；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2. 插入元素到数组结尾</h3>\n<p>这是最简单的一种情况，要将元素插入到数组结尾，直接将插入的元素赋值给数组尾部即可；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 3. 插入元素到数组中间</h3>\n<p>插入元素到中间，相当于只要先把数组中插入位置后边的元素整体向后移动一位，然后将插入元素赋值给对应插入位置的数组对应位置即可；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 四、删除数组中的元素</h2>\n<p>同样的，假设我们要删除数组中的元素，也要考虑如下 3 种情况：</p>\n<ol>\n<li>删除数组开头元素</li>\n<li>删除数组末尾元素</li>\n<li>删除数组中间元素</li>\n</ol>\n<h3> 1. 删除数组开头元素</h3>\n<p>删除开头元素，相当于将原数组开头元素后边的元素整体向前移动一位，而不用管开头的元素；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2. 删除数组末尾元素</h3>\n<p>直接将数组末尾元素删除即可；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 3. 删除数组中间元素</h3>\n<p>删除任意位置元素，相当于不动删除位置前的元素，然后将删除元素位置后的元素整体向前移动一位；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 五、修改数组元素</h2>\n<p>要修改数组元素，实际上只要知道需要修改数组元素的索引位置即可，然后将对应索引位置的值修改为你要修改的值即可；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 六、查找数组中的元素</h2>\n<p>要查找数组中的某一个元素，最常用的方法有如下两种：</p>\n<ol>\n<li>线性查找，主要针对数组较小时</li>\n<li>二分查找，主要针对数组较大时，提高查询效率</li>\n</ol>\n<h3> 1. 线性查找</h3>\n<p>线性查找即遍历数组，然后判断各元素是否是目标值，是则输出对应索引位置，否则返回 -1，此时时间复杂度为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2. 二分查找</h3>\n<p>当数组长度很小时，使用线性查找方法很快就能找到目标值是否存在并返回对应索引位置，但当数组很大时，线性查找的方法效率就太低了。这时候二分查找是更理想的查找手段，二分查找实质是使用双指针，每次对半查找，大大提高效率，时间复杂度缩减为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 七、总结</h2>\n<p>今天的内容到此结束，主要针对数组这一数据结构进行了介绍，讲了如何创建数组，并对数组中易混淆的长度和容量概念进行了比较。最后则是讲了数组的相关操作，总结了几种针对数组的增删改查方法。</p>\n<p>如果你有更多关于数组的相关知识，欢迎评论区留言交流，咱们评论区见！</p>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "数据结构与算法"
      ]
    },
    {
      "title": "数据结构简介",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/algo/20220503-datastructure-intro.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/algo/20220503-datastructure-intro.html",
      "summary": "什么是数据结构 在开始正式学习数据结构前，咱们先来看看什么是数据。所谓数据，就是用来描述客观事物的符号，在计算机中就是可以操作的对象，能够被计算机识别并输入给计算机处理的符号集合。数据不仅包括整型、浮点型等数值类型，还包括字符、声音、图像、视频等非数值型类型。 而数据元素就是组成数据的、有一定意义的基本单位，在计算机中一般作为整体来处理，而这些数据元素...",
      "content_html": "<h1> 数据结构简介</h1>\n<h2> 什么是数据结构</h2>\n<p>在开始正式学习数据结构前，咱们先来看看什么是数据。所谓数据，就是用来描述客观事物的符号，在计算机中就是可以操作的对象，能够被计算机识别并输入给计算机处理的符号集合。数据不仅包括整型、浮点型等数值类型，还包括字符、声音、图像、视频等非数值型类型。</p>\n<p>而数据元素就是组成数据的、有一定意义的基本单位，在计算机中一般作为整体来处理，而这些数据元素也叫做记录。</p>\n<p>除了数据元素之外，还可以有数据项，一个数据元素可以由若干个数据项所组成，而数据项则是数据中不可分割的最小单位。</p>\n<p>不同数据之间，或多或少都存在着一定的关系，而我们把这些关系就叫做结构。所谓数据结构，就是相互间存在一种或多种特定关系的数据元素的集合。</p>\n<p>用 Java 中的类来类比，数据就像 Java 中的一个类，数据元素就是类中的各个对象，而数据项则是各个对象中的属性。</p>\n<h2> 逻辑结构与物理结构</h2>\n<h3> 逻辑结构</h3>\n<p>逻辑结构，就是指数据对象中数据元素之间的相互关系。逻辑结构主要又可以分为 4 种，总结如下：</p>\n<ul>\n<li>集合结构</li>\n<li>线性结构</li>\n<li>树形结构</li>\n<li>图形结构</li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ol>\n<li><strong>集合结构</strong></li>\n</ol>\n<p>集合结构中的数据元素除了共同属于一个集合之外，元素之间没有其他任何关系，各元素之间是平等的，类似于数学中的集合，如下图所示。</p>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>线性结构</strong></li>\n</ol>\n<p>线性结构中用于描述数据元素之间一对一的关系，最常见就是数组。</p>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li><strong>树形结构</strong></li>\n</ol>\n<p>树形结构用于描述数据元素之间的层次关系，最常见的莫过于二叉树。</p>\n<figure><figcaption></figcaption></figure>\n<ol start=\"4\">\n<li><strong>图形结构</strong></li>\n</ol>\n<p>用于描述数据元素之间多对多的关系，在用示意图表示图形结构时，需要注意：</p>\n<ul>\n<li>每个数据元素看做一个节点，用圆圈表示。</li>\n<li>数据元素间的逻辑关系用节点之间的连线表示，若连线是带箭头的，则说明该关系是有方向的。</li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<h3> 物理结构</h3>\n<p>除开逻辑结构之外，还有另一种物理结构，有的书里也叫存储结构。所谓物理结构，指的是数据的逻辑结构在计算机中的存储形式。数据元素的存储结构形式同样主要有四种：</p>\n<ul>\n<li>顺序存储</li>\n<li>链式存储</li>\n<li>索引存储</li>\n<li>散列存储</li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ol>\n<li><strong>顺序存储</strong></li>\n</ol>\n<p>所谓顺序存储结构，就是把数据元素放在地址连续的存储单元中，其数据之间的逻辑关系和物理关系是一致的。</p>\n<p>顺序存储的数据元素只能顺序存放，每个存储结点中只含有一个元素，存储位置反映数据元素间的逻辑关系。这种方式存储密度大，但是插入、删除等操作的效率较差。</p>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>链式存储</strong></li>\n</ol>\n<p>所谓链式存储结构，就是将数据元素存放在任意的存储单元中，这组存储单元既可以是连续的，也可以是不连续的。但是数据元素的链式存储关系并不能反映其逻辑关系，因此需要用一个指针来存放数据元素的地址。通过该指针，我们就能找到相关联数据元素的位置。</p>\n<p>链式存储不要求存储空间连续，方便动态操作（插入、删除等），但是存储空间开销大。</p>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li><strong>索引存储</strong></li>\n</ol>\n<p>数据元素出了存在一组地址连续的内存空间外，还需要建立一个索引表，索引表中索引知识存储结点的㽾位置或存储区间端点。</p>\n<ol start=\"4\">\n<li><strong>散列存储</strong></li>\n</ol>\n<p>通过散列函数和解决冲突的方式，将关键字散列在连续有限的地址空间中，并将散列函数的值解释成关键字所在元素的存储地址。散列存储的特点是存取速度快，但只能按关键字随机存储，不能顺序存储，也不能折半存储。</p>\n<h2> 总结</h2>\n<p>本文的内容到此就结束了，主要介绍了数据结构的定义，并了解了数据结构中的四种逻辑结构和四种物理结构。关于更多数据结构的知识，咱们就下期文章再见吧！</p>\n",
      "date_published": "2022-05-03T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "数据结构与算法"
      ]
    },
    {
      "title": "算法简介",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/algo/20220511-algo-intro.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/algo/20220511-algo-intro.html",
      "summary": "什么是算法 什么是算法？简单来讲，算法就是用于描述解决问题的方法。而现今普遍对算法的定义为：解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令含有一个或多个操作。 算法的特性 算法具有五个基本特性，分别是： 输入; 输出; 有穷性; 确定性; 可行性; 1. 输入 & 输出 一个算法，必不可少的是输入输出。算法具有零个或者多个输入...",
      "content_html": "<h1> 算法简介</h1>\n<h2> 什么是算法</h2>\n<p>什么是算法？简单来讲，算法就是用于描述解决问题的方法。而现今普遍对算法的定义为：解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令含有一个或多个操作。</p>\n<h2> 算法的特性</h2>\n<p>算法具有五个基本特性，分别是：</p>\n<ul>\n<li>输入</li>\n<li>输出</li>\n<li>有穷性</li>\n<li>确定性</li>\n<li>可行性</li>\n</ul>\n<ol>\n<li><strong>输入 &amp; 输出</strong></li>\n</ol>\n<p>一个算法，必不可少的是输入输出。算法具有零个或者多个输入，但是至少得有一个或者以上的输出。也就是说，算法可以没有输入，但一定得有输出，输出可以是打印输出，也可以是返回一个或多个值。</p>\n<ol start=\"2\">\n<li><strong>有穷性</strong></li>\n</ol>\n<p>所谓有穷性，就是指一个算法在执行一定的步骤之后将自动结束，而不会出现无限循环的情况，而且每个步骤需要在有限的时间内完成。</p>\n<ol start=\"3\">\n<li><strong>确定性</strong></li>\n</ol>\n<p>确定性指的是算法的每个步骤都要有具体的含义，不能有歧义。打个简单的比方来说，就像一个人只能沿着一条道走到底，而不能出现遇见分叉路口的情况。</p>\n<p>也就是说，在一定条件下，算法只能有一条执行路径，同样的输入只能有唯一的输出结果。</p>\n<ol start=\"4\">\n<li><strong>可行性</strong></li>\n</ol>\n<p>指算法的每一步都必须是可行的，也就是说每一步都可以通过执行一定的次数来完成。</p>\n<h2> 算法的设计要求</h2>\n<p>同一个问题，我们可以通过不同的算法来解决。俗话说得好，条条大路通罗马。同一个目的地，我们可以通过不同的方式到达。</p>\n<p>话虽然这么说，但是在设计算法时也得遵循一定的要求。</p>\n<ol>\n<li><strong>正确性</strong></li>\n</ol>\n<p>一个算法，必须得保证它能达到最终目的，不然还谈什么。算法的正确性，指的是算法至少应该具有输入、输出和加工处理无歧义性，能够得到问题的正确答案。</p>\n<p>算法的正确性也有不同程度的差别，由浅入深大致可以分为以下层次：</p>\n<ul>\n<li>算法程序无语法错误。</li>\n<li>算法程序对于合法的输入能得到满足要求的输出。</li>\n<li>算法程序对于非法的输入能得到满足规格说明的输出。</li>\n<li>算法程序对于的特殊的测试数据也有满足要求的输出。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>可读性</strong></li>\n</ol>\n<p>可读性是指算法设计出来应该便于阅读、理解和交流。高可读性能够帮助我们更好地理解算法，更加方便我们调试和修改。</p>\n<ol start=\"3\">\n<li><strong>健壮性</strong></li>\n</ol>\n<p>一个算法不仅需要对输入的合理情况做出正确的处理，而且对于不合理的情况，也能做出相应的介绍。所谓健壮性，指的就是当算法中输入数据不合法时，它也能做出相关处理，而不会产生异常或者莫名其妙的结果。</p>\n<ol start=\"4\">\n<li><strong>高时间效率</strong></li>\n</ol>\n<p>对于同一个问题，虽然有不同解决的算法，但是算法也有好有坏。时间效率指的是算法的执行时间，执行时间越长，效率也低，执行时间越短，效率越高。</p>\n<ol start=\"5\">\n<li><strong>低存储量</strong></li>\n</ol>\n<p>除开时间效率之外，存储量也是一个重要的指标。存储量指的是算法在执行过程中所需的最大存储空间，主要指算法程序运行时所占用的内存或外部存储空间。针对同一问题，算法所需空间越少，则算法效果越好，所需空间越多，则算法效果越差。</p>\n<h2> 算法效率衡量方法</h2>\n<p>前边讲了算法的特性以及算法的设计要求，但都没有明确的方式来衡量一个算法的好坏。为了衡量一个算法的好坏，又提出了时间复杂度和空间复杂度的概念。</p>\n<h3> 时间复杂度</h3>\n<h4> 定义</h4>\n<p>若存在函数 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，使得当 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 趋向无穷大时，<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) / f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的极限值为不等于 0 的常数，则称 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 是 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的同数量级函数，记作 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)=O(f(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span>，称 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(f(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span> 为算法的 <strong>渐进时间复杂度</strong>，简称 <strong>时间复杂度</strong>，用大 O 来表示，称为 <strong>大 O 表示法</strong>；</p>\n<h4> 推导时间复杂度的原则</h4>\n<ol>\n<li><strong>若运行时间是常数量级，则用常数 1 表示</strong>；</li>\n<li><strong>只保留时间函数中最高阶项</strong>，如 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2 + 4n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，保留最高阶项后，成为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>；</li>\n<li><strong>若最高阶项存在，则省去最高阶项前的系数</strong>，如 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>4</mn><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(4n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，省去最高阶项的系数后，成为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>；</li>\n</ol>\n<h4> 分析时间复杂度的方法</h4>\n<p>总结起来，对于如何分析一段代码的时间复杂度，主要有如下 3 个实用方法：</p>\n<ol>\n<li><strong>只关注循环执行次数最多的一行代码；</strong></li>\n<li><strong>加法原则：总复杂度等于量度最大的那段代码的复杂度；</strong></li>\n<li><strong>乘法原则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</strong>；</li>\n</ol>\n<h4> 常见的时间复杂度曲线</h4>\n<figure><figcaption></figcaption></figure>\n<h4> 常见时间复杂度</h4>\n<h5> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></h5>\n<p>即无论执行多少行，都不会影响到其他区域，此时代码的复杂度就是 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，如下面的代码中，假设执行每行代码时间都相同切为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>，则 2,3 行各需 1 个执行时间，即为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>+</mo><mi>t</mi><mo>=</mo><mn>2</mn><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t + t = 2t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6984em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">t</span></span></span></span>。此时执行时间复杂度为常数。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></h5>\n<p>如下列二分查找代码中，通过 <code>while</code> 循环，能够成倍的缩减搜索范围，假设需要 <code>x</code> 次才能跳出循环，则有 <code>num * 2 * 2 * ... = n</code> ，其中 <code>num</code> 是常数，有 <code>n</code> 个 2 相乘，则有 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>∗</mo><msup><mn>2</mn><mi>x</mi></msup><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">num * 2 ^x = n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>，从而推出 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x = log_2(n/num)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span> ，因此时间复杂度用大 O 表示法表示为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></h5>\n<p>如下面这段代码中，<code>for</code> 循环中的代码被执行了 <code>arr.length</code> 次，因此所需要的时间和数组长度成正比的，因此可以用 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 来表示它的时间复杂度。利用上述推到原则和分析的方法，可以知道下面代码中循环次数最多的是 4,5 行，总的执行时间是 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，抛去系数后，得到最终时间复杂度 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></h5>\n<p>如果我们将一个复杂度为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的代码重复执行 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 次，那么此时代码的复杂度不就变成 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 了吗。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></h5>\n<p>假设我们将时间复杂度为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的代码重复执行 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 次，那么此时的时间复杂度就是 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∗</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">n*O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，即可表示为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，表现出来就是双重循环的形式。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></h5>\n<p>和 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，类似，将时间复杂度为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 的代码嵌套循环一次，此时复杂度就变成了  <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，表现出来就是三重循环嵌套的形式。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n!)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!)</span></span></span></span></h5>\n<p>虽然理论上存在时间复杂度为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n!)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!)</span></span></span></span> 的算法，但实践中基本遇不到，所以这里就不展开了。</p>\n<h3> 空间复杂度</h3>\n<h4> 定义</h4>\n<p>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度（即除开原始序列大小的内存，在算法过程中用到的额外的存储空间），反映的对内存占用的趋势，而不是具体内存，也叫作 <strong>渐进空间复杂度</strong> ，<strong>表示算法的存储空间与数据规模间的增长关系</strong>，用 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 来代替；</p>\n<h4> 常用空间复杂度</h4>\n<h5> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></h5>\n<p>算法执行所需临时空间不随某一变量 <code>n</code> 的大小而变化，则该算法空间复杂度为一个常量，表示为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S(n) = O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></h5>\n<p>数组占用内存大小为 <code>n</code>，而且后续未分配新的空间，因此该算法空间复杂度为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S(n) = O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h5> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></h5>\n<p>二维数组的情况；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 常见排序算法的时间复杂度和空间复杂度</h3>\n<p>对于面试中常见的的排序算法，以下总结给出了其时间复杂度以及空间复杂度，以及算法稳定性。</p>\n<table>\n<thead>\n<tr>\n<th>排序算法</th>\n<th>平均时间复杂度</th>\n<th>最好时间复杂度</th>\n<th>最坏时间复杂度</th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>插入排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>1.3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{1.3})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1.3</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>冒泡排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n+k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n+k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n+k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n+k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n+k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n+k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>∗</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n*k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>∗</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n*k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>∗</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n*k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n+k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>稳定</td>\n</tr>\n</tbody>\n</table>\n<h2> 总结</h2>\n<p>好了，以上就是今天文章的内容了。主要介绍了算法的定义、算法的特性、算法的设计要求以及算法效率的衡量方法。时间复杂度的定义、推导原则以及常见时间复杂度，还对空间复杂度定义以及常见空间复杂度进行了介绍，最后则是总结了常见排序算法的时间复杂度和空间复杂度。</p>\n",
      "date_published": "2022-05-11T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "数据结构与算法"
      ]
    },
    {
      "title": "时间 & 空间复杂度",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/algo/20220512-time-space.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/algo/20220512-time-space.html",
      "summary": "前言 所谓算法，其实就是我们用来操作数据、解决程序问题的一组方法。针对同一个问题，我们可以采用不同的算法，然后实现相同的结果。但是针对不同的算法，对于时间和资源的消耗却有不同的差别。而为了分析不同算法的效率，我们常常从 时间 和 空间 两个方面来对比，然后从中挑出最适合我们的解决方案。 本文主要从时间复杂度和空间复杂度的定义说起，然后介绍常见的时间复杂...",
      "content_html": "<h1> 时间 &amp; 空间复杂度</h1>\n<h2> 前言</h2>\n<p>所谓算法，其实就是我们用来操作数据、解决程序问题的一组方法。针对同一个问题，我们可以采用不同的算法，然后实现相同的结果。但是针对不同的算法，对于时间和资源的消耗却有不同的差别。而为了分析不同算法的效率，我们常常从 <strong>时间</strong> 和 <strong>空间</strong> 两个方面来对比，然后从中挑出最适合我们的解决方案。</p>\n<p>本文主要从时间复杂度和空间复杂度的定义说起，然后介绍常见的时间复杂度和空间复杂度，最后则是对常见排序算法进行了总结。</p>\n<h2> 时间复杂度</h2>\n<h3> 定义</h3>\n<p>若存在函数 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，使得当 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 趋向无穷大时，<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) / f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的极限值为不等于 0 的常数，则称 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 是 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的同数量级函数，记作 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)=O(f(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span>，称 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(f(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span> 为算法的 <strong>渐进时间复杂度</strong>，简称 <strong>时间复杂度</strong>，用大 O 来表示，称为 <strong>大 O 表示法</strong>；</p>\n<h3> 推导时间复杂度的原则</h3>\n<ol>\n<li><strong>若运行时间是常数量级，则用常数 1 表示</strong>；</li>\n<li><strong>只保留时间函数中最高阶项</strong>，如 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2 + 4n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，保留最高阶项后，成为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>；</li>\n<li><strong>若最高阶项存在，则省去最高阶项前的系数</strong>，如 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>4</mn><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(4n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，省去最高阶项的系数后，成为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>；</li>\n</ol>\n<h3> 分析时间复杂度的方法</h3>\n<p>总结起来，对于如何分析一段代码的时间复杂度，主要有如下 3 个实用方法：</p>\n<ol>\n<li><strong>只关注循环执行次数最多的一行代码；</strong></li>\n<li><strong>加法原则：总复杂度等于量度最大的那段代码的复杂度；</strong></li>\n<li><strong>乘法原则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</strong>；</li>\n</ol>\n<h3> 常见的时间复杂度曲线</h3>\n<figure><figcaption></figcaption></figure>\n<h3> 常见时间复杂度</h3>\n<h4> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></h4>\n<p>即无论执行多少行，都不会影响到其他区域，此时代码的复杂度就是 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，如下面的代码中，假设执行每行代码时间都相同切为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>，则 2,3 行各需 1 个执行时间，即为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>+</mo><mi>t</mi><mo>=</mo><mn>2</mn><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t + t = 2t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6984em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">t</span></span></span></span>。此时执行时间复杂度为常数。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></h4>\n<p>如下列二分查找代码中，通过 <code>while</code> 循环，能够成倍的缩减搜索范围，假设需要 <code>x</code> 次才能跳出循环，则有 <code>num * 2 * 2 * ... = n</code> ，其中 <code>num</code> 是常数，有 <code>n</code> 个 2 相乘，则有 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>∗</mo><msup><mn>2</mn><mi>x</mi></msup><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">num * 2 ^x = n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>，从而推出 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x = log_2(n/num)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span> ，因此时间复杂度用大 O 表示法表示为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></h4>\n<p>如下面这段代码中，<code>for</code> 循环中的代码被执行了 <code>arr.length</code> 次，因此所需要的时间和数组长度成正比的，因此可以用 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 来表示它的时间复杂度。利用上述推到原则和分析的方法，可以知道下面代码中循环次数最多的是 4,5 行，总的执行时间是 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，抛去系数后，得到最终时间复杂度 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></h4>\n<p>如果我们将一个复杂度为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的代码重复执行 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 次，那么此时代码的复杂度不就变成 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 了吗。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></h4>\n<p>假设我们将时间复杂度为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的代码重复执行 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 次，那么此时的时间复杂度就是 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∗</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">n*O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，即可表示为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，表现出来就是双重循环的形式。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></h4>\n<p>和 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，类似，将时间复杂度为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 的代码嵌套循环一次，此时复杂度就变成了  <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，表现出来就是三重循环嵌套的形式。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n!)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!)</span></span></span></span></h4>\n<p>虽然理论上存在时间复杂度为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n!)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!)</span></span></span></span> 的算法，但实践中基本遇不到，所以这里就不展开了。</p>\n<h2> 空间复杂度</h2>\n<h3> 定义</h3>\n<p>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度（即除开原始序列大小的内存，在算法过程中用到的额外的存储空间），反映的对内存占用的趋势，而不是具体内存，也叫作 <strong>渐进空间复杂度</strong> ，<strong>表示算法的存储空间与数据规模间的增长关系</strong>，用 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 来代替；</p>\n<h3> 常用空间复杂度</h3>\n<h4> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></h4>\n<p>算法执行所需临时空间不随某一变量 <code>n</code> 的大小而变化，则该算法空间复杂度为一个常量，表示为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S(n) = O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></h4>\n<p>数组占用内存大小为 <code>n</code>，而且后续未分配新的空间，因此该算法空间复杂度为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S(n) = O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h4> <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></h4>\n<p>二维数组的情况；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 常见排序算法的时间复杂度和空间复杂度</h2>\n<p>对于面试中常见的的排序算法，以下总结给出了其时间复杂度以及空间复杂度，以及算法稳定性。</p>\n<table>\n<thead>\n<tr>\n<th>排序算法</th>\n<th>平均时间复杂度</th>\n<th>最好时间复杂度</th>\n<th>最坏时间复杂度</th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>插入排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>1.3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^{1.3})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1.3</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>冒泡排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog_2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n+k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n+k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n+k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n+k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n+k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n+k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>∗</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n*k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>∗</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n*k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>∗</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n*k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n+k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></td>\n<td>稳定</td>\n</tr>\n</tbody>\n</table>\n<h2> 总结</h2>\n<p>好了，以上就是今天文章的内容了。主要介绍了时间复杂度的定义、推导原则以及常见时间复杂度，还对空间复杂度定义以及常见空间复杂度进行了介绍，最后则是总结了常见排序算法的时间复杂度和空间复杂度。如果觉得文章对你有所帮助，那就点个赞再走吧！</p>\n",
      "date_published": "2022-05-12T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "数据结构与算法"
      ]
    },
    {
      "title": "有序数组去重",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/algo/20220513-sorted-arr-duplication.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/algo/20220513-sorted-arr-duplication.html",
      "summary": "问题 给定一个有序数组，要删除数组重复出现的元素，使得每个元素只出现一次，然后返回移除重复数组后的新长度； 示例： 假设给定一个数组 nums = [1,2,4,4]，删除重复出现的元素 4 后，原数组变成 nums = [1, 2, 4]，此时新的数组长度为 3； 解决思路 数组原地操作 数组原地操作，此时无需创建新的数组，只需要在原来的数组上操作即...",
      "content_html": "<h1> 有序数组去重</h1>\n<h2> 问题</h2>\n<p>给定一个有序数组，要删除数组重复出现的元素，使得每个元素只出现一次，然后返回移除重复数组后的新长度；</p>\n<p><strong>示例</strong>：</p>\n<p>假设给定一个数组 <code>nums = [1,2,4,4]</code>，删除重复出现的元素 4 后，原数组变成 <code>nums = [1, 2, 4]</code>，此时新的数组长度为 3；</p>\n<h2> 解决思路</h2>\n<h3> 数组原地操作</h3>\n<p>数组原地操作，此时无需创建新的数组，只需要在原来的数组上操作即可。相当于首先要找到数组中重复的元素，然后将重复的元素移除，此时就涉及到数组中的删除操作，相关知识点可以看我的另一篇文章 <a href=\"https://juejin.cn/post/6959725810160762888\" target=\"_blank\" rel=\"noopener noreferrer\">数组的增删改查</a>。</p>\n<p>这是一种时间换空间的方法，此时的空间复杂度为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，时间复杂度为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，具体实现可以参考如下代码，其中也详细注释了每一步操作。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 普通方法</h3>\n<p>针对数组原地操作算法时间复杂度为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，为降低时间复杂度提高算法效率，可以通过空间换时间的做法，通过定义新的数组，从而实现去除重复元素的目的，此时的时间复杂度为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，而空间复杂度也由 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 变成了 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。但是有几点需要注意：</p>\n<ol>\n<li>临界情况（即数组为空）；</li>\n<li>创建新数组时，需要指定其容量，所以需要先求出原数组中无重复元素时的元素个数；</li>\n<li>最后则是将原数组中未重复的元素赋值给新数组；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 双指针</h3>\n<p>以上的两种方法要么是以时间换空间，要么是以空间换时间，那我们有没有一种折中的办法，既能保证时间复杂度很低，也能保证空间复杂度呢？答案是：当然有！</p>\n<p>利用双指针的思想，既可以将空间复杂度控制在 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，也可以将时间复杂度控制在 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 总结</h2>\n<p>以上就是 3 种去除有序数组中重复元素的三种算法，其中既有以时间换空间的数组原地操作法，也有空间换时间的普通方法，最后的话则是有一种综合前两种方法优点的方法 - 双指针。通过双指针方法，既能保证空间复杂度为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，也将时间复杂度限制在了 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<p>想不到连简单的数组去重都有这么大的学问，我们在日常学习时，大多可能只关注于如何实现功能即可。但如果要应用到工作场景中，可能就需要考虑效率问题，此时则需要根据我们的具体需求来进行选择了。</p>\n<p>好了，以上就是今天的内容了，如果你还有其他更好的方法，欢迎留言交流呀！</p>\n",
      "date_published": "2022-05-19T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "数据结构与算法"
      ]
    },
    {
      "title": "链表解惑",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/algo/20220515-linkedlist.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/algo/20220515-linkedlist.html",
      "summary": "前言 链表是一种 递归 的数据结构，或者为空 null，或者指向一个结点（node）的引用，一个结点含有 一个泛型元素和一个指向另一条链表的引用。 通常分为如下三种类型： 单向链表：结点被分成两个部分。第一个部分保存或者显示关于结点的信息，第二个部分存储下一个结点的地址，只能向一个方向遍历。; 双向链表：每个数据结点中都有两个指针，分别指向直接后继和直...",
      "content_html": "<h1> 链表解惑</h1>\n<h2> 前言</h2>\n<p>链表是一种 <strong>递归</strong> 的数据结构，或者为空 <code>null</code>，或者指向一个结点（<code>node</code>）的引用，一个结点含有 <strong>一个泛型元素和一个指向另一条链表的引用</strong>。</p>\n<p>通常分为如下三种类型：</p>\n<ul>\n<li><strong>单向链表</strong>：结点被分成两个部分。第一个部分保存或者显示关于结点的信息，第二个部分存储下一个结点的地址，只能向一个方向遍历。</li>\n<li><strong>双向链表</strong>：每个数据结点中都有两个指针，分别指向直接后继和直接前驱。</li>\n<li><strong>循环链表</strong>：一种 <strong>链式存储结构</strong>，它的最后一个结点指向头结点，形成一个环。</li>\n</ul>\n<h3> 单向链表</h3>\n<p>单向链表包括一个值和一个指向下一结点的指针，其典型结构定义如下：</p>\n<figure><figcaption>单链表</figcaption></figure>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 双向链表</h3>\n<p>每个数据结点中都有两个指针，分别指向直接后继和直接前驱，其典型结构定义如下：</p>\n<figure><figcaption>双向链表</figcaption></figure>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 单向链表的增删改查</h2>\n<h3> 基于链表实现栈</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 基于链表实现队列</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 双向链表的增删改查</h2>\n<p>实现双向链表时，通常在最前端和最后端各设置一个 <strong>哑元结点</strong>，分别称为 <strong>头结点</strong> 和 <strong>尾结点</strong>，起着 <strong>哨兵</strong> 的作用。但实际上两者并不存储任何实质的数据对象，头（尾）结点的 <code>next</code>（<code>prev</code>）引用指向首（末）结点，而 <code>prev</code>（<code>next</code>）引用为空。</p>\n<h3> 首尾结点的插入</h3>\n<p>假设要进行首结点的插入，则通常需要如下步骤，而末结点的插入则是和首结点的插入过程对称。</p>\n<ol>\n<li>首先生成一个新结点；</li>\n<li>然后将其接入队列的前端；</li>\n<li>接着将头结点的 <code>next</code> 的引用指向新插入的结点，同时将首结点的 <code>prev</code> 的引用指向新插入的结点。</li>\n</ol>\n<h3> 首尾结点的删除</h3>\n<p>假设要进行末结点的删除，通常需要如下步骤，而首结点的删除过程适合尾结点的删除过程对称。</p>\n<ol>\n<li>将新的末结点的 <code>next</code> 引用指向尾结点；</li>\n<li>同时将尾结点的 <code>prev</code> 引用指向新的末结点；</li>\n<li>最后原先的末结点将会被系统回收。</li>\n</ol>\n<h3> 一般结点的插入与删除</h3>\n<p>要实现在一般结点之间插入新结点，通常需要进行如下步骤：</p>\n<ol>\n<li>创建一个新的结点，然后将其 <code>prev</code> 引用指向前一个结点，同时将其 <code>next</code> 引用指向后一个结点；</li>\n<li>然后将前一个结点的 <code>next</code> 引用指向新结点，同时将后一个结点的 <code>prev</code> 引用指向新结点。</li>\n</ol>\n<p>而要实现在一般结点之间删除结点，通常需要进行如下步骤：</p>\n<ol>\n<li>首先找到要删除的结点的前驱和后继结点；</li>\n<li>然后将其前驱结点的 <code>next</code> 引用指向后驱结点，同时将后驱结点的 <code>prev</code> 引用指向前驱结点。</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 总结</h2>\n<p>本文从单向链表和双向链表的结构定义出发，然后又分别介绍了如何基于单向链表实现堆和栈，最后则是对双向链表的增删改查进行了总结。对于文中有疏漏的地方，欢迎评论留言。如果你觉得文章对你有所帮助，那就点个赞再走吧！</p>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "数据结构与算法"
      ]
    },
    {
      "title": "数组详解",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/algo/20220516-array.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/algo/20220516-array.html",
      "summary": "1. 数组简介 数组（Array）是一种 线性表（将数据排成一条线一样的结构） 数据结构，用一组 连续内存空间 来存储一组具有 相同类型 的数据。 2. 数组的常见操作 数组最常见的操作无非增删改差，下面分别来对各个操作进行介绍，假设数组类的定义如下： 2.1 按照下标随机访问操作 要实现随机访问，那么需要先看访问的下标位置是否合法，不合法则访问失败，...",
      "content_html": "<h1> 数组详解</h1>\n<h2> 1. 数组简介</h2>\n<p>数组（Array）是一种 <strong>线性表（将数据排成一条线一样的结构）</strong> 数据结构，用一组 <strong>连续内存空间</strong> 来存储一组具有 <strong>相同类型</strong> 的数据。</p>\n<h2> 2. 数组的常见操作</h2>\n<p>数组最常见的操作无非增删改差，下面分别来对各个操作进行介绍，假设数组类的定义如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2.1 按照下标随机访问操作</h3>\n<p>要实现随机访问，那么需要先看访问的下标位置是否合法，不合法则访问失败，合法则放回当前位置元素。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2.2 数组的插入</h3>\n<p>要实现数组的插入，通常有如下步骤：</p>\n<ol>\n<li>先要判断数组是否已满，满了自然插入不了，只有当数组还没满时才能插入；</li>\n<li>而当数组未满时，也需要判断插入位置是否合法，不合法肯定会失败，合法时才能够进行正常插入；</li>\n<li>当数组未满同时插入位置合法时，我们只需要将插入位置后的元素整体向后移动一位即可；</li>\n<li>同时在要插入的位置处插入要插入的值，同时将数组元素个数加一。</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2.3 数组的删除</h3>\n<p>要实现数组的删除操作，通常有如下步骤：</p>\n<ol>\n<li>判断要删除的位置是否合法，不合法删除失败，合法才能进行下一步从操作；</li>\n<li>删除位置合法时，需要将删除位置后的元素整体向前移动一位，同时数组中的元素数目减一。</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2.4 数组的更新</h3>\n<p>所谓数组更新，只要位置合法，只需要将对应索引位置赋值为新的值即可。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 3. 总结</h2>\n<p>对于数组这一数据结构，其最常见的操作无非上边所描述的四种，当然我举例都是用的 <code>int</code> 数据类型的值。如果你想用其他数据类型的数组，有了上面的实例，迁移过去不是分分钟的事情么！💯💯💯</p>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "数据结构与算法"
      ]
    },
    {
      "title": "二叉树的遍历",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/algo/202205170-binary-tree-traverse.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/algo/202205170-binary-tree-traverse.html",
      "summary": "前言 二叉树作为一种重要的数据结构，在算法中起到了承前启后的作用，它是数组和链表的延伸，也是图的基础。所以学习二叉树的相关知识是十分有必要的，而在相关的操作中，二叉树的遍历是最频繁的，今天就来看看二叉树的 4 种遍历方法！ 二叉树数据结构 所谓二叉树，指的是每个结点最多有两个分支的树结构，其分支通常被称为“左子树”和“右子树”，而且他们的次序是固定的，...",
      "content_html": "<h1> 二叉树的遍历</h1>\n<h2> 前言</h2>\n<p>二叉树作为一种重要的数据结构，在算法中起到了承前启后的作用，它是数组和链表的延伸，也是图的基础。所以学习二叉树的相关知识是十分有必要的，而在相关的操作中，二叉树的遍历是最频繁的，今天就来看看二叉树的 4 种遍历方法！</p>\n<h2> 二叉树数据结构</h2>\n<p>所谓二叉树，指的是每个结点最多有两个分支的树结构，其分支通常被称为“左子树”和“右子树”，而且他们的次序是固定的，不能随意颠倒，一棵二叉树的示例如下：</p>\n<figure><figcaption></figcaption></figure>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 前序遍历</h2>\n<p>也叫做先序遍历，首先访问根节点，然后遍历左子树，最后再遍历右子树。而在遍历左右子树时，仍然按照先访问根节点，然后遍历左子树，最后遍历右子树的方式，直到二叉树为空则返回！</p>\n<p>遍历的方式又主要分为递归和迭代的方式，其具体实现如下所示。</p>\n<h3> 递归</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 迭代</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 中序遍历</h2>\n<p>首先遍历左子树，然后访问根节点，最后再遍历右子树。而在遍历左右子树时，仍然按照先遍历左子树，然后访问根节点，最后遍历右子树的方式，直到二叉树为空则返回！</p>\n<p>遍历的方式又主要分为递归和迭代的方式，其具体实现如下所示。</p>\n<h3> 递归</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 迭代</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 后序遍历</h2>\n<p>后序遍历首先遍历左子树，然后遍历右子树，最后访问根结点，在遍历左、右子树时，仍然先遍历左子树，然后遍历右子树，最后遍历根结点，直到二叉树为空则返回！</p>\n<p>遍历的方式又主要分为递归和迭代的方式，其具体实现如下所示。</p>\n<h3> 递归</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 迭代</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 层次遍历</h2>\n<p>层次遍历也叫做广度优先遍历，它会优先访问离根节点最近的节点，其实现一般借助队列实现。</p>\n<p>遍历的方式又主要分为递归和迭代的方式，其具体实现如下所示。</p>\n<h3> 递归</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 迭代</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 总结</h2>\n<p>以上就是数据结构二叉树的 4 种遍历，如果你有更多关于各种遍历的实现，欢迎留言交流呀！</p>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "数据结构与算法"
      ]
    },
    {
      "title": "数据结构与算法",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/algo/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/algo/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "组成原理",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/composition/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/composition/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "计算机网络",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/network/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/network/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "操作系统",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/system/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/cs-wiki/system/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "简介",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/maven/20200707-intro.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/maven/20200707-intro.html",
      "summary": "前言 在我们之前的开发过程中，往往会遇到以下问题： 一个项目就是一个工程，当项目过大时，难以管理；; 项目中的 jar 包（也就是我们的依赖文件），需要我们手动进行移动到 Web 项目的 WEB-INF/lib 目录中；; jar 一般是通过下载或其他人打包后获取；; 各个 jar 包之间繁琐的依赖关系需要我们自行解决；; 针对以上的问题，我们提出采用...",
      "content_html": "<h1> 简介</h1>\n<h2> 前言</h2>\n<p>在我们之前的开发过程中，往往会遇到以下问题：</p>\n<ul>\n<li>一个项目就是一个工程，当项目过大时，难以管理；</li>\n<li>项目中的 jar 包（也就是我们的依赖文件），需要我们手动进行移动到 Web 项目的 <code>WEB-INF/lib</code> 目录中；</li>\n<li>jar 一般是通过下载或其他人打包后获取；</li>\n<li>各个 jar 包之间繁琐的依赖关系需要我们自行解决；</li>\n</ul>\n<p>针对以上的问题，我们提出采用项目管理工具来对我们的项目进行管理，而这就是我们今天所要讲的 Maven。</p>\n<p>通过使用 Maven，我们就能将一个大型的项目拆分为多个工程。此外，通过 Maven，我们可以很方便的对各个 jar 包进行统一管理，而且它也能解决各个包之间的依赖关系。</p>\n<h2> 什么是 Maven</h2>\n<p>Maven 是一个项目管理工具，包含了一个项目对象模型（<code>Project Object Model</code>），反映在配置中就是 <code>pom.xml</code> 文件。其中包含了一个项目的生命周期、一个依赖管理系统，以及定义在项目生命周期阶段的插件（<code>plugin</code>）和目标（<code>goal</code>）。</p>\n<p>其中 Maven 最核心的两大概念包括 <strong>依赖管理</strong> 和 <strong>项目构建</strong>。</p>\n<ul>\n<li><strong>依赖管理</strong>：提供对 <code>jar</code> 的统一管理。（Maven 提供了一个中央仓库，当我们在项目中添加完依赖后，Maven 就会自动去中央仓库中下载相关依赖）。</li>\n<li><strong>项目构建</strong>：Maven 提供对项目的编译、测试、打包、部署、上传到私服等。</li>\n</ul>\n<h2> Maven 安装</h2>\n<p>Maven 属于 Java 项目，因此使用 Maven 必须依赖于 JDK。</p>\n<p>首先我们要确保我们的电脑上已经安装了 JDK，可以使用如下命令来进行确认。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>如果出现如下的提示，则说明我们的 JDK 安装成功了（当然，你可能和我安装的不是一个版本，但只要出现下面类似的提示，就代表你也成功了）。</p>\n<figure><figcaption></figcaption></figure>\n<p>安装好 JDK 之后，然后接下来在安装 Maven，安装过程如下：</p>\n<ol>\n<li>下载 Maven，下载地址：https://maven.apache.org/download.cgi。如下图，我们在 Windows 中一般选择第二项进行下载，而在 macOS 或者 Linux 系统中，则选择第一项进行下载。</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li>将下载后的压缩包进行解压</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li>配置环境变量</li>\n</ol>\n<p>这里需要配置环境变量，一个是新建一个系统变量用于指向 Maven 解压缩后的路径，另一个则是修改 Path 变量环境，新加上一条指向 Maven 的 bin 目录的路径。</p>\n<ul>\n<li>MAVEN_HOME：即刚才解压缩后 Maven 的存放路径</li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li>Path：<code>%MAVEN_HOME%\\bin</code></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ol start=\"4\">\n<li>校验安装是否成功</li>\n</ol>\n<p>当我们配置环境变量之后，此时就可以打开一个新的 cmd 窗口，然后利用如下校验命令来测试我们的 Maven 是否安装成功，安装成功则会出现如下提示。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> Maven 目录结构</h2>\n<p>安装好 Maven 之后，其目录和内容如下，各目录内容如下：</p>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li><strong>bin</strong></li>\n</ul>\n<p>包含 mvn 运行的脚步，用于配置 Java 命令，准备好 classpath 和相关的 Java 系统属性，然后执行 Java 命令。</p>\n<ul>\n<li><strong>boot</strong></li>\n</ul>\n<p>只包含一个文件，是一个类加载器框架，相对于默认的 Java 类加载器，提供了更丰富的语法以方便配置。</p>\n<ul>\n<li><strong>conf</strong></li>\n</ul>\n<p>包含 <code>settings.xml</code> ，通过修改该文件，能在机器中全局定制 Maven 的行为。</p>\n<ul>\n<li><strong>lib</strong></li>\n</ul>\n<p>包含所有 Maven 运行时所需的 Java 类库，Maven 本身是分模块开发，所以里边有不同模块之类的类库。此外还包含了一些 Maven 用到的第三方依赖。</p>\n<h2> Maven 配置</h2>\n<h3> 仓库镜像配置</h3>\n<p>通常安装好 Maven 之后就可以使用了，但是由于 Maven 的中央仓库服务器位于国外，国内使用网速较慢，所以我们最好将中央仓库换为国内的阿里云镜像。</p>\n<p>打开 <code>apache-maven-xxx/conf/</code> 目录下的 <code>settings.xml</code> 文件，然后在 <code>mirrors</code> 节点下加入如下配置：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 本地仓库配置</h3>\n<p>安装好 Maven 后，本地仓库默认在 <code>当前用户名/.m2/repository</code> 下，但是这个位置比较隐蔽，所以建议自定义为其他路径：</p>\n<p>还是打开 <code>apache-maven-xxx/conf/</code> 目录下的 <code>settings.xml</code> 文件，然后将如下路径修改为自己要设置的本地仓库，比如我的本地仓库路径如下图：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 总结</h2>\n<p>好了，以上就是关于我们日常项目开发中经常使用的 Maven 的相关知识点了。文章介绍了 Maven 是干什么的，以及我们应该如何安装 Maven 和安装后常见的一些设置，最后则是对 Maven 的目录结构进行详解。而在下一篇博客中，我将讲述 Maven 中最常见的命令，看看大家都是用什么命令来进行工作的吧！</p>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Maven 系列"
      ]
    },
    {
      "title": "常用命令",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/maven/20200708-command.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/maven/20200708-command.html",
      "summary": "前言 上一篇文章中我们已经介绍了什么是 Maven，以及如何进行 Maven 的安装，最后还对 Maven 安装后的简单配置进行了讲解。今天我们就主要来看看 Maven 中的核心概念以及 Maven 在日常使用中常用的命令。 Maven 核心 构建 所谓构建，就是指项目的构建，它是面向过程的，是一系列步骤的总和，主要包括项目代码的编译、运行、测试、打包...",
      "content_html": "<h1> 常用命令</h1>\n<h2> 前言</h2>\n<p>上一篇文章中我们已经介绍了什么是 Maven，以及如何进行 Maven 的安装，最后还对 Maven 安装后的简单配置进行了讲解。今天我们就主要来看看 Maven 中的核心概念以及 Maven 在日常使用中常用的命令。</p>\n<h2> Maven 核心</h2>\n<h2> 构建</h2>\n<p>所谓构建，就是指项目的构建，它是面向过程的，是一系列步骤的总和，主要包括项目代码的编译、运行、测试、打包以及部署等等。而 Maven 所支持的构建主要有如下几种：</p>\n<ol>\n<li><strong>清理</strong>：删除之前编译产生的文件，为新的代码编译做好准备；</li>\n<li><strong>编译</strong>：将源代码编译为执行代码，支持批量编译；</li>\n<li><strong>测试</strong>：通过执行测试代码，验证功能是否正常，而且它也是支持批量测试的；</li>\n<li><strong>报告</strong>：通过执行测试，生成测试结果的文件；</li>\n<li><strong>打包</strong>：讲项目中的 <code>class</code> 文件、配置文件打包到一个压缩文件中。对于一般程序，打包的压缩文件扩展名通常是 <code>.jar</code>，而对于 Web 应用，则起压缩文件扩展名通常是 <code>.war</code>；</li>\n<li><strong>安装</strong>：把打包好的文件安装到本地仓库；</li>\n<li><strong>部署</strong>：让程序跑起来。</li>\n</ol>\n<h3> Maven 核心概念</h3>\n<ol>\n<li><strong>pom</strong>：项目对象模型，Maven 将项目当做一个模型，用于控制 Maven 构建项目的过程，通过它来管理 jar 依赖；</li>\n<li><strong>目录结构</strong>：Maven 的目录和文件位置都是约定俗成的；</li>\n<li><strong>坐标</strong>：用于表示资源的唯一标识；</li>\n<li><strong>依赖管理</strong>：使用 jar 文件来管理项目；</li>\n<li><strong>仓库管理</strong>：资源存放的路径；</li>\n<li><strong>生命周期</strong>：Maven 工具构建项目的过程；</li>\n<li><strong>插件和目标</strong>：执行 Maven 构建是的工具就是插件</li>\n<li><strong>继承</strong></li>\n<li><strong>聚合</strong></li>\n</ol>\n<h2> 常用命令</h2>\n<p>Maven 中的一些常见命令如下：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>含义</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>mvn clean</code></td>\n<td>清理</td>\n<td>用于清理已编译好的文件</td>\n</tr>\n<tr>\n<td><code>mvn compile</code></td>\n<td>编译</td>\n<td>将 Java 源代码编译成字节码 <code>.class</code> 文件</td>\n</tr>\n<tr>\n<td><code>mvn test</code></td>\n<td>测试</td>\n<td>项目测试</td>\n</tr>\n<tr>\n<td><code>mvn package</code></td>\n<td>打包</td>\n<td>根据用户配置，将项目打包为 <code>jar</code> 包或 <code>war</code> 包</td>\n</tr>\n<tr>\n<td><code>mvn install</code></td>\n<td>安装</td>\n<td>手动向本地仓库安装一个 <code>jar</code></td>\n</tr>\n<tr>\n<td><code>mvn deploy</code></td>\n<td>上传</td>\n<td>将 <code>jar</code> 上传到私服</td>\n</tr>\n</tbody>\n</table>\n<h2> 利用 Archetype 来生成项目骨架</h2>\n<p>实际上，为了更快捷的创建 Maven 项目骨架，我们可以使用 maven archetype 来创建，创建过程如下：</p>\n<ol>\n<li>首先进入你要创建项目骨架的目录，然后执行如下命令：</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>然后会有很长的输出，有多种可用的 Archetype 供你选择，选择你所需要的，然后输入对应编号即可；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li>接着会让你输入 <code>groupId</code>、<code>artifactId</code>、<code>version</code>、<code>package</code> 等信息；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"4\">\n<li>再接着让你确认相关信息；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"5\">\n<li>最后确认无误后，回车生成即可。</li>\n</ol>\n<h2> 项目结构</h2>\n<p>项目生成后的目录中主要包含如下文件：</p>\n<figure><figcaption></figcaption></figure>\n<p>其中 <code>src</code> 目录包含了项目的主代码和资源，同时还包括了测试相关的代码以及资源。而 <code>pom.xml</code> 则定义了项目的所有配置。</p>\n<p>假设我们有一个 <code>HelloWorld</code> 的项目，我们利用 Maven 来进行管理时，其项目结构大致应该是如下：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中 <code>HelloWorld</code> 是根目录，也就是我们的工程名，而 <code>src</code> 目录下主要是存放源代码，其下有主要分为 <code>java</code> 和 <code>resources</code>，<code>java</code> 目录主要用于存放程序包以及程序包中的 Java 文件，<code>resources</code> 目录则是存放程序中所要使用的配置文件。</p>\n<p><code>test</code> 目录结构同 <code>src</code>，只不过顾名思义，这里主要是存放用于测试的代码和配置文件，而且这不是一个必选项，我们可以根据自己的需要进行选择。</p>\n<p>最后则是 <code>pom.xml</code>，这个每个 Maven 所管理项目的核心文件，这是必须的，后续的依赖管理等工作都基于此文件来操作。</p>\n<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<h2> 总结</h2>\n<p>好了，以上就是 Maven 中的一些常用命令和如何利用 Archetype 来生成项目骨架，以及利用 Maven 所生成的项目的总体结构了。如果你觉得对你有所帮助，还请点赞关注一波哦。今天就到此为止了，下一期我们继续来看如何利用 Maven 进行依赖管理，敬请期待吧！</p>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Maven 系列"
      ]
    },
    {
      "title": "仓库、坐标及依赖管理",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/maven/20200709-pom.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/maven/20200709-pom.html",
      "summary": "前言 在我们创建使用 Maven 项目的过程中，当需要用到第三方的插件时，都是通过依赖管理来达成，也就是 Maven 项目中必有的 pom.xml 文件。POM（Project Object Model），即 项目对象模型，其中定义了 Maven 项目的形式。因此，pom.xml 可以看做是 Maven 项目中的导航。 Maven 仓库 所谓仓库，就和...",
      "content_html": "<h1> 仓库、坐标及依赖管理</h1>\n<h2> 前言</h2>\n<p>在我们创建使用 Maven 项目的过程中，当需要用到第三方的插件时，都是通过依赖管理来达成，也就是 Maven 项目中必有的 <code>pom.xml</code> 文件。POM（Project Object Model），即 <strong>项目对象模型</strong>，其中定义了 Maven 项目的形式。因此，<code>pom.xml</code> 可以看做是 Maven 项目中的导航。</p>\n<h2> Maven 仓库</h2>\n<p>所谓仓库，就和我们平常说的粮仓啥的差不多，其实都是用来存放东西的。只不过在 Maven 项目中，仓库使用来存放我们项目所使用的 jar 包以及 Maven 所使用的各种 jar 包的。</p>\n<p>而根据仓库存放位置的不同，我们可将其分为 <strong>本地仓库</strong> 和 <strong>远程仓库</strong>。</p>\n<p>其中，本地仓库也就是我们个人 PC 中存放 jar 包的文件夹，用于存放 Maven 项目所需的 jar。</p>\n<p>而远程仓库则指的是存放在互联网中的仓库，我们可以将其进一步细分为 <strong>中央仓库</strong>、<strong>中央仓库镜像</strong>、<strong>私服</strong>。</p>\n<ul>\n<li><strong>中央仓库</strong>：全世界最权威的一个仓库，我们所有的开发人员都可以共享使用，地址为：https://repo.maven.apache.org。</li>\n<li><strong>中央仓库镜像</strong>：顾名思义，它就是中央仓库的一个备份，它分散在各大洲的重要城市，方便各个地方的程序员使用起来更快捷。</li>\n<li><strong>私服</strong>：私服则是处于安全考虑，一般搭建在局域网中，仅提供给公司内部人员使用。</li>\n</ul>\n<p>那我们如何使用仓库呢？或者说一个 Maven 项目从仓库中获取资源的顺序是怎样的呢？</p>\n<p>通常来讲，当我们要使用 Maven 仓库中的资源时，是不需要我们去人为干预的。假设我们要使用某一个驱动，我们首先去 <code>pom.xml</code> 中进行配置，接着 Maven 将自动先去检查我们的本地仓库中是否存在该资源，如果没有，那么就到私服中午查找，如果还没有找到，那么就到中央仓库镜像中去查询，最后如果连镜像仓库中也没法找到，那就只有到中央仓库去进行搜索了。</p>\n<h2> Maven 坐标</h2>\n<p>坐标，其实就相当于我们人的身份证，它是唯一的，用于标识一个项目。一个坐标的组成一般有如下几部分，前三者必须，<code>packaging</code> 可选，<code>classifier</code> 不能直接定义。</p>\n<ul>\n<li><strong>groupId</strong>：定义 Maven 项目隶属的实际组织，一般约定以创建该项目的组织名称的逆向域名开头。比如说公司的域名是：google.com，那么我们就可以将 <code>groupId</code> 设置为 <code>com.google</code>。</li>\n<li><strong>artifactId</strong>：定义实际项目中的一个 Maven 项目（模块），推荐使用实际项目名作为前缀。</li>\n<li><strong>version</strong>：定义 Maven 项目当前所处版本，一般使用三位数字进行标识，如 <code>1.1.1</code>。</li>\n<li><strong>packaging</strong>：项目打包方式，可以是 <code>jar</code>、<code>war</code>、<code>rar</code>、<code>ear</code>、<code>pom</code>，默认使用 <code>jar</code>。</li>\n<li><strong>classifier</strong>：帮助定义构建输出的一些附属构建，与主构件对应。</li>\n<li><strong>dependencies</strong>：添加项目所需的 <code>jar</code> 所对应的 Maven 坐标,，表示我们项目中所需的各种资源说明。</li>\n<li><strong>dependency</strong>：<code>dependencies</code> 的一个子标签，一个 <code>dependency</code> 对应一个坐标。</li>\n<li><strong>properties</strong>：用于设置属性。</li>\n<li><strong>scope</strong>：表示依赖的范围，通常有如下几种：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>依赖范围</th>\n<th>编译期有效</th>\n<th>测试期有效</th>\n<th>运行时有效</th>\n<th>打包有效</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>compile</code></td>\n<td>😄</td>\n<td>😄</td>\n<td>😄</td>\n<td>😄</td>\n</tr>\n<tr>\n<td><code>test</code></td>\n<td>😡</td>\n<td>😄</td>\n<td>😡</td>\n<td>😡</td>\n</tr>\n<tr>\n<td><code>privided</code></td>\n<td>😄</td>\n<td>😄</td>\n<td>😡</td>\n<td>😡</td>\n</tr>\n<tr>\n<td><code>runtime</code></td>\n<td>😡</td>\n<td>😄</td>\n<td>😄</td>\n<td>😄</td>\n</tr>\n<tr>\n<td><code>system</code></td>\n<td>😄</td>\n<td>😄</td>\n<td>😡</td>\n<td>😡</td>\n</tr>\n</tbody>\n</table>\n<p>以下就是一个最简单的 Maven 坐标实例：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 依赖冲突</h2>\n<h3> 冲突产生原因</h3>\n<p>Maven 项目中，通常都会定义血多 <code>dependency</code>，每个 <code>dependency</code> 内部也会定义它的 <code>dependency</code>，而有时各个依赖之间会产生冲突，冲突的原因通常主要是 <strong>由于 <code>jar</code> 包依赖的传递性</strong>，如果在一个项目中同时引入了一个依赖的不同版本，就可能导致依赖冲突。</p>\n<h3> 解决冲突的办法</h3>\n<p>当冲突产生时，需要如何解决呢？通常我们有两种处理策略：</p>\n<ul>\n<li><strong>Maven 的默认处理策略</strong>：</li>\n</ul>\n<ol>\n<li><strong>最短路径优先</strong>：对于不同路径长度的 <code>jar</code> 包，优先选择路径更短的生效。</li>\n<li><strong>最先声明优先</strong>：当路径一样时，如 <code>A -&gt; B -&gt; C</code> ，<code>E -&gt; F -&gt; C</code>，那么则谁先声明则先选择谁生效。</li>\n</ol>\n<ul>\n<li><strong>移除依赖：用于排除某项依赖的依赖包</strong></li>\n</ul>\n<p>除开上述策略外，我们也可以手动在 <code>pom.xml</code> 中使用 <code>&lt;exclusion&gt;</code> 标签来排除发生冲突的依赖包，如下面用于排除 <code>spring-core</code> 冲突的例子：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 总结</h2>\n<p>今天关于 Maven 的仓库和坐标的相关知识，以及 Maven 中依赖产生冲突的原因和如何解决冲突的内容就到此结束了。个人水平有限可能有些遗漏的方面，如果你有更多关于以上方面的知识，欢迎评论交流。既然差不多讲完了 Maven 中的核心知识点，那么下一次我们就来看看怎么使用 Maven 来进行实战吧。</p>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Maven 系列"
      ]
    },
    {
      "title": "IDEA 创建 Maven 项目",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/maven/20200710-idea-maven.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/maven/20200710-idea-maven.html",
      "summary": "前言 之前我们已经学习过 Maven 是什么，我们可以用它来干什么。接着我们又介绍了如何安装和配置 Maven，再接着，我们又了解了 Maven 中常用的一些命令以及如何利用 Archetype 来生成项目骨架，并对利用 Maven 所生成项目的结构进行了描述。最后则是 Maven 中的一些核心概念和如何进行依赖管理，并说明当依赖产生冲突时，应该如何解...",
      "content_html": "<h1> IDEA 创建 Maven 项目</h1>\n<h2> 前言</h2>\n<p>之前我们已经学习过 Maven 是什么，我们可以用它来干什么。接着我们又介绍了如何安装和配置 Maven，再接着，我们又了解了 Maven 中常用的一些命令以及如何利用 Archetype 来生成项目骨架，并对利用 Maven 所生成项目的结构进行了描述。最后则是 Maven 中的一些核心概念和如何进行依赖管理，并说明当依赖产生冲突时，应该如何解决。但以上始终还是停留在概念的阶段，并未进入我们实际的开发中。那么今天的内容就主要来看看，我们如何利用 IDEA 搭配 Maven 来开发一个简单的 Demo。</p>\n<h2> IDEA 中的 Maven 配置</h2>\n<p>依次进入 <code>File -&gt; Settings -&gt; Build,Execution,Deployment -&gt; Build Tools -&gt; Maven</code>，IDEA 默认使用它自带的 Maven，我们可以自定义为自己的 Maven，更加方便管理。</p>\n<p>这里主要配置的项目有：</p>\n<ul>\n<li><strong>Maven home directory</strong>：也就是我们 Maven 安装的路径；</li>\n<li><strong>User settings file</strong>：Maven 安装路径下配置文件夹中的 <code>settings.xml</code> 所在路径；</li>\n<li><strong>Local repository</strong>：也就是我们前边文章中所配置的本地仓库位置。</li>\n</ul>\n<p>比如我 IDEA 中的 Maven 相关设置就可以参照下图。</p>\n<figure><figcaption></figcaption></figure>\n<h2> 使用 IDEA 创建 Maven 项目</h2>\n<p>接下来我们就来看看如何使用 IDEA 创建 Maven 项目，具体可以分为如下步骤：</p>\n<ol>\n<li>首先一次进入 <code>File -&gt; New -&gt; Project</code>，然后选择 Maven，表示新建一个 Maven 项目；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li>填写相关信息，也就是我们之前所介绍的 Maven 的坐标。这里我们只要提供 GroupId、ArtifactId 以及 Version 这三项就足够了。关于其他的配置，我们可以到后续的 <code>pom.xml</code> 中去进行配置；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li>新建项目完成，完成后的项目目录结构如下，基本上也就是之前介绍过的项目结构；</li>\n</ol>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"4\">\n<li>默认生成的 <code>pom.xml</code> 如下。</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"5\">\n<li>到上一步之后，一个新的 Maven 项目就完成了，接下来就是去编写业务代码了。</li>\n</ol>\n<h2> 业务代码编写</h2>\n<p>上面已经学会了如何创建一个 Maven 项目，接下来就是编写业务代码了，我们以最经典的 <code>HelloWorld</code> 为例。</p>\n<h3> 项目主代码</h3>\n<p>项目主代码会打包到最终构件中，默认位于 <code>src/main/java</code> 目录下，我们创建一个 <code>HelloWorld</code> 的主类；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 项目测试代码</h3>\n<p>要对主代码进行测试，那么则需要编写测试代码，测试代码默认位于 <code>src/test/java</code> 目录，要对指定主代码进行测试，编写测试代码时要和主代码保持相同的目录结构。如上述主代码位于 <code>com.cunyu.helloworld</code> 包下，那么测试代码也应该位于 <code>com.cunyu.helloworld</code> 包下，只是根目录不同。而要进行测试，通常首选 JUnit 单元测试。所以编写测试代码对主代码进行测试主要有如下步骤。</p>\n<ol>\n<li>首先在 <code>pom.xml</code> 添加 JUnit 依赖；</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>接着编写测试代码；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 总结</h2>\n<p>经过上边的项目创建以及业务代码编写之后，一个 Maven 版的 <code>Hello World</code> 项目到此就结束了。是不是很简单呢，赶快自己动手试试吧！</p>\n<p>创作不易，如果大家觉得我的文章对你所有帮助，那就动动你的小手，帮我点赞关注一波吧。💖💖💖</p>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Maven 系列"
      ]
    },
    {
      "title": "Maven",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/maven/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/maven/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "简介",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/mybatis/20200719-intro.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/mybatis/20200719-intro.html",
      "summary": "前言 什么是持久化 持久化是将程序数据在持久状态和瞬时状态间转换的机制，将数据保存到可永久保存的存储设备中。最常见的就是将内存中的对象存储在数据库中，或者存在磁盘文件、XML 数据文件中等等。其中，文件 IO 属于持久化机制，而 JDBC 也是一种持久化机制。 为什么需要持久化 之所以需要持久化，是由于内存自身缺陷导致。我们知道，内存在遇到某些外界因素...",
      "content_html": "<h1> 简介</h1>\n<h2> 前言</h2>\n<h3> 什么是持久化</h3>\n<p>持久化是<strong>将程序数据在持久状态和瞬时状态间转换的机制</strong>，将数据保存到可永久保存的存储设备中。最常见的就是将内存中的对象存储在数据库中，或者存在磁盘文件、<code>XML</code> 数据文件中等等。其中，文件 <code>IO</code> 属于持久化机制，而 <code>JDBC</code> 也是一种持久化机制。</p>\n<h3> 为什么需要持久化</h3>\n<p>之所以需要持久化，是由于内存自身缺陷导致。我们知道，内存在遇到某些外界因素影响后会丢失，但是我们的一些数据是绝对不能丢失的，但我们又无法保证不受外界因素影响。同时内存成本较高，比起硬盘、光盘等外存，其价格要高上几个数量级，而且维持成本也较高。在这种情况下，我们不得不寻求另一种方案来存储数据对象，而持久化就是其中的一种选择，我们能够通过持久化将数据缓存到外存，从而降低成本。</p>\n<h3> 什么是持久层</h3>\n<p>所谓持久层，就是用于完成持久化工作的代码块（<code>dao</code> 层【<code>DAO（Data Access Object）</code>】）。数据持久化通常都是将内存中的数据保存到磁盘中来加以固化，而实现这一过程大多是通过<strong>关系数据库</strong>来完成。而且比起其他部分，该层需要有一个较为清晰和严格的逻辑边界。</p>\n<h2> 什么是 MyBatis</h2>\n<h3> 为什么不用 JDBC？</h3>\n<p>针对数据库操作，<code>Java</code> 其实已经提供了相应的解决方案 -- <code>JDBC</code>。那既然已经有了现成的工具，那为什么还会有 <code>MyBatis</code> 的出现呢？</p>\n<p>虽然 <code>JDBC</code> 提供了对数据库操作的解决方案，但是存在着如下问题：</p>\n<ol>\n<li>\n<p>数据库连接的频繁创建和释放造成了一定程度上的资源浪费，从而影响到系统性能，但如果使用数据库连接池就能在一定程度上缓解该问题；</p>\n</li>\n<li>\n<p><code>SQL</code> 语句在代码中出现，会造成代码不易维护；</p>\n</li>\n<li>\n<p>使用 <code>preparedStatement</code> 向占位符传递参数时存在硬编码，也会进一步加大系统维护的难度；</p>\n</li>\n<li>\n<p>对结果集进行解析时存在硬编码，<code>SQL</code> 变化将导致解析代码改变，系统难以维护，但如果能将数据库记录进行封装成 <code>POJO</code> 对象，解析起来就会方便很多。</p>\n</li>\n</ol>\n<h3> MyBatis 介绍</h3>\n<p>MyBatis 是一个持久层框架，是一个半自动化的<strong>ORM 框架</strong>，不仅支持自定义 SQL、存储过程以及高级映射。还简化了 JDBC 代码以及设置参数和获取结果集的工作过程，使得我们只需要通过简单的 XML 或注解配置，就能将原始类型、接口和 Java POJO 映射为数据库中的记录。</p>\n<p>通过对 JDBC 操作数据库的过程进行封装，我们只需要关注 SQL 而不用再去处理注册驱动、创建 <code>connection</code>、创建 <code>statement</code>、手动设置参数、结果集检索等复杂的过程代码。</p>\n<p>不同于其他的对象关系映射框架，MyBatis 并未将 Java 对象和数据库表关联，而是将 Java 方法与 SQL 语句关联。</p>\n<p>总的来讲，MyBatis 有如下优点：</p>\n<ul>\n<li>\n<p><strong>简单易学</strong>：自身小且简单，无任何第三方依赖；</p>\n</li>\n<li>\n<p><strong>灵活</strong>：MyBatis 不会对应用程序或数据库的现有设计强加任何影响，写在 XML 中，便于统一管理和优化；</p>\n</li>\n<li>\n<p><strong>解除 SQL 与代码程序的耦合</strong>：通过提供 DAO 层，将业务逻辑与数据访问逻辑分离，使系统设计更加清晰、易维护、易于单元测试，提高了程序的可维护性；</p>\n</li>\n<li>\n<p><strong>提供 XML 标签，支持编写动态 SQL</strong>；</p>\n</li>\n<li>\n<p>…</p>\n</li>\n</ul>\n<h3> 其他持久层技术</h3>\n<p>除开 JDBC 之外，大家可能还了解到了 Hibernate 和 JPA 等持久层技术。相较于 JDBC 这种原始的方式，它们操作起来显得十分方便，开发效率也很高。但是对于程序中较长和较难的复杂 SQL 需求，就需要绕过框架。此外，由于其 SQL 是内部自动生成的，所以如果要对其做特殊优化则不太容易。Hibernate 和 JPA 都是基于全映射的全自动框架，如果 POJO 中存在大量字段，要进行部分映射时就显得比较困难。最后，由于框架内部反射操作过多，导致数据库性能下降，在当前大数据的背景下，显然不能满足我们的要求。</p>\n<h2> MyBatis 安装</h2>\n<ol>\n<li>首先<a href=\"https://github.com/mybatis/mybatis-3/releases\" target=\"_blank\" rel=\"noopener noreferrer\">下载</a>最新版本 MyBatis；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li>解压下载好的安装包，将 <code>mybatis-xxx.jar</code> 放到你项目的类路径下（classpath）；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li>如果是 Maven 项目，在 <code>pom.xml</code> 中添加如下依赖即可；</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 总结</h2>\n<p>以上就是今天的所有内容了，主要讲了持久化相关的知识，然后对 Mybatis 做了简单的介绍以及我们为什么要用 Mybatis，最后则是如何安装 Mybatis。原创不易，如果你觉得我写的内容对你有所帮助，那就点赞关注吧。</p>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "MyBatis 系列"
      ]
    },
    {
      "title": "入门实例",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/mybatis/20200720-quick-start.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/mybatis/20200720-quick-start.html",
      "summary": "前言 上一篇文章中我们讲了什么是持久化以及 Mybatis 的相关简介，今天就来看看如何创建一个 Mybatis 入门实例以及如何利用 Mybatis 进行 CRUD。 数据库准备 1. 首先，我们来创建一个数据库，用于后序步骤的使用； 2. 接着创建一个表，用于存放数据； 3. 向数据库中插入数据 创建 Maven 工程 1. 对于如何创建 Mave...",
      "content_html": "<h1> 入门实例</h1>\n<h2> 前言</h2>\n<p>上一篇文章中我们讲了什么是持久化以及 Mybatis 的相关简介，今天就来看看如何创建一个 Mybatis 入门实例以及如何利用 Mybatis 进行 CRUD。</p>\n<h2> 数据库准备</h2>\n<ol>\n<li>首先，我们来创建一个数据库，用于后序步骤的使用；</li>\n</ol>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>接着创建一个表，用于存放数据；</li>\n</ol>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>向数据库中插入数据</li>\n</ol>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 创建 Maven 工程</h2>\n<ol>\n<li>对于如何创建 Maven 工程，可以参照我之前写的一篇文章：<a href=\"http://cunyu1943.github.io/posts/8ced8971/\" target=\"_blank\" rel=\"noopener noreferrer\">利用 IDEA 搭建一个 Maven 项目 </a></li>\n<li>接着在项目的 <code>pom.xml</code> 中添加 MyBatis、MySQL、Junit 以及 Lombok 的依赖，关于更多 Lombok 的使用，可以参考我的另一篇文章：<a href=\"https://cunyu1943.github.io/posts/f7032e71\" target=\"_blank\" rel=\"noopener noreferrer\">Lombok 安装及使用指南</a></li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 准备工作</h2>\n<ol>\n<li>编写 MyBatis 核心配置文件，在 <code>main/resources</code> 文件下新建 <code>mybatis-config.xml</code> ，配置数据库。这里主要是配置连接的数据库，数据库连接用户名以及密码。</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>编写 MyBatis 工具类；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>接下来创建实体类，用于映射数据库中的 <code>user</code> 表。</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 插入操作 <code>insert</code></h2>\n<ol>\n<li>首先在 <code>UserMapper</code> 接口中添加对应方法</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>在映射文件 <code>UserMapper.xml</code> 中添加 <code>Insert</code> 语句；</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>测试方法中测试；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption>插入成功</figcaption></figure>\n<h2> 查询操作 <code>select</code></h2>\n<ol>\n<li>在 <code>UserMapper</code> 中添加对应方法：</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>接着在 <code>UserMapper.xml</code> 中添加 <code>Select</code> 语句。其中各属性含义如下：</li>\n</ol>\n<ul>\n<li><strong>id</strong>：对应接口中的 <strong>方法名</strong>；</li>\n<li><strong>resultType</strong>：SQL 语句执行的返回值；</li>\n</ul>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>在测试类中测试即可；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption>查询成功</figcaption></figure>\n<h2> 修改操作 <code>update</code></h2>\n<ol>\n<li>在 <code>UserMapper</code> 添加对应接口；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>在 <code>UserMapper.xml</code> 中添加 <code>update</code> 语句；</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li>测试类中测试；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<h2> 删除操作 <code>delete</code></h2>\n<ol>\n<li>在 <code>UserMapper</code> 中添加接口；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>在 <code>UserMapper.xml</code> 中添加 <code>delete</code> 语句；</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>在测试类中测试；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<h2> 最后</h2>\n<p>以上就是我们今天的所有内容了，原创不易，如果你觉得我的文章对你有所帮助，那就帮忙点赞关注吧，我们就下篇文章再见吧 ~</p>\n<p>而关于文章中的示例代码，我已经上传到了 Github，如果有需要的朋友，可以自取。</p>\n<blockquote>\n<p>传送门：https://github.com/cunyu1943/java-learning-demos</p>\n</blockquote>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "MyBatis 系列"
      ]
    },
    {
      "title": "注解开发",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/mybatis/20200721-annotation.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/mybatis/20200721-annotation.html",
      "summary": "1. MyBatis 注解 之前的实例中，利用 MyBatis 进行开发时，一旦添加新的方法，则每次都需要在 XML 配置文件中进行映射。而现在随着注解开发的大肆流行，MyBatis 3 也提供了基于注解的配置。但是通过注解的方式表达力和灵活性有限，必要时要是需要通过 mapper 配置文件来进行构建，常用的注解主要用如下几个： 注解 功能 -----...",
      "content_html": "<h1> 注解开发</h1>\n<h2> 1. MyBatis 注解</h2>\n<p>之前的实例中，利用 MyBatis 进行开发时，一旦添加新的方法，则每次都需要在 XML 配置文件中进行映射。而现在随着注解开发的大肆流行，MyBatis 3 也提供了基于注解的配置。但是通过注解的方式表达力和灵活性有限，必要时要是需要通过 <code>mapper</code> 配置文件来进行构建，常用的注解主要用如下几个：</p>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@Select()</code></td>\n<td>查询</td>\n</tr>\n<tr>\n<td><code>@Update()</code></td>\n<td>更新</td>\n</tr>\n<tr>\n<td><code>@Insert()</code></td>\n<td>插入</td>\n</tr>\n<tr>\n<td><code>@Delete()</code></td>\n<td>删除</td>\n</tr>\n</tbody>\n</table>\n<h2> 2. 基于注解开发</h2>\n<h3> 2.1 查询</h3>\n<ol>\n<li>接口中声明方法同时添加注解；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>然后在 MyBatis 的核心配置文件 <code>mybatis-config.xml</code> 中进行类注入，要注意 <code>resource</code> 属性和 <code>class</code> 属性的区别；</li>\n</ol>\n<ul>\n<li><code>resource</code>：指定的是 <code>mapper.xml</code> 的路径；</li>\n<li><code>class</code>：指定的是类的全限名；</li>\n</ul>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>不同于基于 XML 配置的方式，此时不需要再去配置 XML，直接进行测试即可；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2.2 新增</h3>\n<ol>\n<li>接口中声明方法并注解；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>在 MyBatis 的核心配置中进行注入，由于已经在查询操作时注入过，所以不需要再次注入；</li>\n<li>直接进行测试；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 2.3 更新</h3>\n<ol>\n<li>接口中声明方法并注解；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>测试</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 2.4 删除</h3>\n<ol>\n<li>接口中声明方法并注解；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>测试</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 3. 注意事项</h2>\n<h3> 3.1 @Param</h3>\n<p>在接口中添加方法时，可以利用 <code>@Param</code> 注解给方法的参数进行取名。</p>\n<ul>\n<li>当方法只接收一个参数时，可以不用该注解，如下两种方式等价：</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>当方法接收多个参数时，建议使用该注解；</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>若方法接收的参数是 <code>JavaBean</code> 时，不可以使用该注解；</li>\n</ul>\n<h3> 3.2 #{} 和 ${} 对比</h3>\n<p>MyBatis 中可以将参数传到 XML 文件中，然后由 MyBatis 对 SQL 及其语法进行解析，支持 <code>${}</code> 和 <code>#{}</code> 两种方式，两者的区别如下：</p>\n<ol>\n<li><code>#{}</code> 传入的参数，MyBatis 默认会将其解析为 <strong>字符串</strong>，而 <code>${}</code> 传入的参数，MyBatis 不会对其做任何特殊处理。假如我们传入数据库表名 <code>test</code>：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>对比项目</th>\n<th>传参语句</th>\n<th>解析后的语句</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>#{}</code></td>\n<td><code>select * from #{table};</code></td>\n<td><code>select * from \"test\";</code></td>\n</tr>\n<tr>\n<td><code>${}</code></td>\n<td><code>select * from #{table};</code></td>\n<td><code>select * from test;</code></td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li><code>#{}</code> 和 <code>${}</code> 在预编译处理时不一样，<code>#{}</code> 类似于 JDBC 中的 <code>PreparedStatement</code>，对于传入的参数，会在预处理阶段用 <code>?</code> 进行替代，然后在真正需要执行语句时才带入参数；而 <code>${}</code> 则会直接进行简单的替换；</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>对比项目</th>\n<th>传参语句</th>\n<th>解析后的语句</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>#{}</code></td>\n<td><code>select * from user where id=#{id};</code></td>\n<td><code>select * from user where id=?;</code></td>\n</tr>\n<tr>\n<td><code>${}</code></td>\n<td><code>select * from user where id=#{id};</code></td>\n<td><code>select * from user where id=2;</code></td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li><code>#{}</code> 能够有效防止 SQL 注入，而 <code>${}</code> 则可能导致 SQL 注入；</li>\n</ol>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "MyBatis 系列"
      ]
    },
    {
      "title": "一二级缓存",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/mybatis/20200722-pri-sec-cache.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/mybatis/20200722-pri-sec-cache.html",
      "summary": "1. 前言 1.1 什么是缓存 缓存是存在内存中的临时数据，通过将我们 经常查询但不常变的数据 放在内存中，当我们查询数据时就不在需要从磁盘读取，而只需要从缓存中查询即可，大大提升了查询的效率，解决了高并发系统的性能问题。 1.2 为什么需要缓存 既然我们可以直接从数据库中查询数据，那为什么还要需要缓存呢？通过使用缓存，我们能够减少和数据库之间的交互频...",
      "content_html": "<h1> 一二级缓存</h1>\n<h2> 1. 前言</h2>\n<h3> 1.1 什么是缓存</h3>\n<p>缓存是存在内存中的临时数据，通过将我们 <strong>经常查询但不常变的数据</strong> 放在内存中，当我们查询数据时就不在需要从磁盘读取，而只需要从缓存中查询即可，大大提升了查询的效率，解决了高并发系统的性能问题。</p>\n<h3> 1.2 为什么需要缓存</h3>\n<p>既然我们可以直接从数据库中查询数据，那为什么还要需要缓存呢？通过使用缓存，我们能够减少和数据库之间的交互频率，减少系统开销，从而提高系统的效率。</p>\n<h2> 2. MyBatis 缓存</h2>\n<p>MyBatis 内置了一个强大的事务性查询缓存机制，通过它能够十分方便的配置和定制。默认情况下，MyBatis 默认定义了两级缓存，而且为了提高扩展性，定义了缓存接口 <code>Cache</code>，我们能十分方便的实现 <code>Cache</code> 接口来自定义二级缓存。</p>\n<ul>\n<li><strong>一级缓存</strong>：也叫 <strong>本地缓存</strong>，默认情况下开启的缓存（<code>SqlSession</code> 级别的缓存）；</li>\n<li><strong>二级缓存</strong>：基于 <code>namespace</code> 级别的缓存，需要我们手动进行开启和配置；</li>\n</ul>\n<h2> 3. 一级缓存</h2>\n<p>也叫 <strong>本地缓存</strong>，在与数据库同一次会话期间查询到的数据放在本地缓存，当要再次获取相同数据时，直接从缓存获取即可，不用再次和数据库交互。</p>\n<h3> 3.1 一级缓存原理</h3>\n<figure><figcaption></figcaption></figure>\n<p>每个 <code>SqlSession</code> 中都有一个 <code>Executor</code>，每个 <code>Executor</code> 中又有一个 <code>LocalCache</code>，当我们进行查询操作时，MyBatis 根据当前执行的语句生成 <code>MapperdStatement</code>，然后在 <code>Local Cache</code> 中进行查询，如果存在（命中），直接返回给用户。若缓存中不存在（未命中），则和数据库交互查询数据，将结果写入 <code>Local Cache</code>，同时返回给用户。</p>\n<h3> 3.2 如何使用一级缓存</h3>\n<p>一级缓存即 <code>SqlSession</code> 级别的缓存，和我们之前的 CURD 操作差不多；</p>\n<ol>\n<li>首先在接口中添加方法；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>测试</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>结果</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<p>通过结果可以看出，由于是在一次会话期间内（<code>SqlSession</code> 级别），所以此时的 SQL 语句只查询了一次，当第二次获取相同结果时，直接从缓存中取结果即可，也就解释了为什么 <code>user1</code> 和 <code>user2</code> 指向的是同一个对象；</p>\n<h3> 3.3 一级缓存失效的情况</h3>\n<p>一级缓存是默认一直开启的，我们是关闭不了的。但是有时候一级缓存会出现失效的情况，主要可能是如下几种原因导致；</p>\n<ol>\n<li><strong>每个 <code>SqlSession</code> 中缓存独立</strong></li>\n</ol>\n<p>当我们使用不同的 <code>SqlSession</code> 时，有多少个 <code>SqlSession</code> 就需要向数据库发起多少次查询请求。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>当前缓存中不存在该数据时</strong></li>\n</ol>\n<p>当位于同一个 <code>SqlSession</code>，但查询条件不同时，也会导致缓存失效；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC83LzIyLzE3Mzc1NzM1ZWE4OWMzNDU?x-oss-process=image/format,png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li><strong>其他 CURD 操作对当前数据造成影响</strong></li>\n</ol>\n<p>假如在同一 <code>SqlSession</code> 中，在两次查询之间进行了其他的增删改等操作，当第二次查询进行时，就会重新执行 SQL 语句，导致缓存失效；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"4\">\n<li><strong>手动清除</strong></li>\n</ol>\n<p>当 <code>SqlSession</code> 相同时，如果我们手动清除了缓存，那么也会导致缓存失效的情况出现。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 4. 二级缓存</h2>\n<p>也叫 <strong>全局缓存</strong>，基于 <code>namespace</code> 的缓存，一个 <code>namespace</code> 对应一个二级缓存。</p>\n<h3> 4.1 二级缓存原理</h3>\n<figure><figcaption></figcaption></figure>\n<p>一级缓存的最大共享范围是一个 <code>SqlSession</code> 内部，若多个 <code>SqlSession</code> 之间要共享缓存，则需要用二级缓存。二级缓存一旦开启，将会有多个 <code>CachingExecutor</code> 来装饰 <code>Executor</code>，进入一级缓存的查询流程之前，先在 <code>CachingExecutor</code> 中进行二级缓存的查询，如上图。此时数据的查询流程是：</p>\n<blockquote>\n<p>二级缓存 -&gt; 一级缓存 -&gt; 数据库</p>\n</blockquote>\n<h3> 4.2 如何使用二级缓存</h3>\n<p>要使用二级缓存，通常需要有如下步骤：</p>\n<ol>\n<li>首先在 MyBatis 配置文件（一般是 <code>mybatis-config.xml</code>）中开启二级缓存；</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>然后到对应的 <code>xxxMapper.xml</code> 中配置二级缓存；</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>配置之后，<code>xxxMapper.xml</code> 文件中的 <code>select</code> 语句将会被缓存，而 <code>insert、update、delete</code> 则会刷新缓存。此外还可以设置自定义属性值来修改默认属性；</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>eviction</code></td>\n<td>清除策略</td>\n</tr>\n<tr>\n<td><code>flushInterval</code></td>\n<td>刷新间隔，单位是 <code>ms</code></td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>引用数目，默认为 1024</td>\n</tr>\n<tr>\n<td><code>readOnly</code></td>\n<td>默认为 <code>false</code></td>\n</tr>\n</tbody>\n</table>\n<p>而清除策略也主要有如下 4 种：</p>\n<table>\n<thead>\n<tr>\n<th>清除策略</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>LRU</code></td>\n<td><strong>最近最少使用</strong>：移除最长时间不被使用的对象</td>\n</tr>\n<tr>\n<td><code>FIFO</code></td>\n<td><strong>先进先出</strong>：按对象进入缓存的顺序来移除</td>\n</tr>\n<tr>\n<td><code>SOFT</code></td>\n<td><strong>软引用</strong>：基于垃圾回收器状态和软引用规则移除对象</td>\n</tr>\n<tr>\n<td><code>WEAK</code></td>\n<td><strong>弱引用</strong>：更积极地基于垃圾回收器状态和若引用规则移除对象</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>测试</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li>结果</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<p>根据结果可以看出，此时的二级缓存已经生效。若是未生效，则会和一级缓存中的结果一致，两者指向不同的对象，但此时两个引用指向同一对象，说明二级缓存成功。</p>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "MyBatis 系列"
      ]
    },
    {
      "title": "代码自动生成器",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/mybatis/20211214-generator.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/mybatis/20211214-generator.html",
      "summary": "前言 在日常开发工作中，我们往往需要自己去构建各种数据表所对应的持久化对象（PO）、用于操作数据库的接口（DAO）以及跟 DAO 所绑定的对应 XML。这都是一些重复性的操作，不需要多大技术含量，这时候我们不禁会去想，有没有一种工具，能够帮助我们去自动生成这些文件呢？答案是：有的！ 本文接下来的内容主要适用于使用 MyBatis 来做持久层框架开发的工...",
      "content_html": "<h1> 代码自动生成器</h1>\n<h2> 前言</h2>\n<p>在日常开发工作中，我们往往需要自己去构建各种数据表所对应的持久化对象（PO）、用于操作数据库的接口（DAO）以及跟 DAO 所绑定的对应 XML。这都是一些重复性的操作，不需要多大技术含量，这时候我们不禁会去想，有没有一种工具，能够帮助我们去自动生成这些文件呢？答案是：有的！</p>\n<p>本文接下来的内容主要适用于使用 MyBatis 来做持久层框架开发的工作，如果不是使用 MyBatis，那么可能本文不太适合你的开发场景。</p>\n<h2> MyBatis Generator 简介</h2>\n<p>作为一个基于 MyBatis 的独立工具，MyBatis Generator 能够满足我们以上的要求，能够通过简单的配置去帮我们生成数据表所对应的 PO、DAO、XML 等文件，减去我们手动去生成这些文件的时间，有效提高开发效率。MyBatis Generator 运行方式多样，主要可以通过以下几种方式来运行：</p>\n<ol>\n<li>命令行</li>\n<li>Ant</li>\n<li>Maven</li>\n<li>Java</li>\n<li>Eclipse</li>\n</ol>\n<p>而我平时主要在 Maven 中配置并使用，所以本文主要基于 Maven 环境来进行讲解。</p>\n<h2> 准备工作</h2>\n<h3> 引入插件</h3>\n<p>既然要使用 MyBatis Generator，那么肯定我们的项目中已经配置了数据库和 MyBatis 的相关依赖，如果还没有配置，那么可以在 <code>pom.xml</code> 文件中进行配置，这里主要以 MySQL 数据库为例。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>接着我们继续引入 MyBatis Generator 的相关配置。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 插件配置</h3>\n<p>完成上述步骤后，我们只是完成了 MyBatis Generator 的引入工作，要想让它正常工作，我们还需要对它进行配置，而 MyBatis Generator 在 <code>pom.xml</code> 中的主要配置主要有以下几点。</p>\n<ol>\n<li><strong>代码生成器的配置文件所在路径</strong></li>\n</ol>\n<p>这里主要配置 MyBatis Generator 配置文件所在路径，一般我们将其放在 <code>resources</code> 路径中，而配置文件的名字则可以自定义，这里我以 <code>mybatis-generator-config.xml</code> 为例，此时需要将如下配置加入到 <code>pom.xml</code> 文件中。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>是否每次新生成后覆盖已生成的文件</strong></li>\n</ol>\n<p>由于项目需求，假设我们的数据库表中有需要新增新的字段，而我们之前已经使用过 MyBatis Generator 生成过相关文件。此时，如果我们想要将新加的字段加入原来生成的文件中，第一种可以采取手动的方式，将旧文件删除，然后重新生成。第二种则是在 MyBatis Generator 中配置，让每次新生成的文件都直接覆盖掉旧文件。具体配置如下，<code>true</code> 则代表覆盖，<code>false</code> 则代表不覆盖。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>不过有一点需要注意，就算我们设置了覆盖旧文件，MyBatis Generator 也只会覆盖原来的 PO、DAO 文件，此时 Mapper 不会被覆盖，而是采取追加的方式，从而保证我们自己添加的 sql 语句不会被覆盖掉。</p>\n<ol start=\"3\">\n<li><strong>数据库驱动依赖</strong></li>\n</ol>\n<p>虽然在项目的 <code>pom.xml</code> 文件中我们已经配置了数据库的相关依赖，但是在 MyBatis Generator 配置中仍然需要对其进行再次配置。此时，这里有两种方式供我们选择。</p>\n<p>第一种是再次在引入数据库依赖，具体配置方式如下：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>第二种则是利用 Maven 的 <code>includeCompileDependencies</code> 属性。一般来讲，我们的项目中肯定已经引入过数据库的相关依赖了，那我们此时配置 <code>includeCompileDependencies</code> 就好了，具体配置方式如下：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> MyBatis Generator 配置</h3>\n<p>我们在上述步骤中已经引入了 MyBatis Generator，而且也在项目配置文件 <code>pom.xml</code> 中配置了 MyBatis Generator 配置文件所在的路径、是否进行文件覆盖以及数据库依赖配置，接下来就该具体来看看，如何对 MyBatis Generator 进行具体配置，配置我们生成代码中的各种细节。</p>\n<ol>\n<li><strong>外部配置文件</strong></li>\n</ol>\n<p>一般我们需要引入外部文件，主要用于配置项目数据库，方便我们后续的设置，而引入外部配置文件的方式也很简单，具体配置如下：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>context 配置</strong></li>\n</ol>\n<p>除开外部配置外，<code>context</code> 无疑是 MyBatis Generator 中最重要的配置了。一个 <code>context</code> 配置的具体示例如下：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中的各个属性含义如下：</p>\n<ul>\n<li><strong>id</strong>：唯一标识，不可重复，可以根据我们自己的喜好进行自定义。</li>\n<li><strong>defaultModelType</strong>：非必填项，有两个值可选，一个是 <code>conditional</code>，也是默认值，另一个值是 <code>flat</code>，也就是我们常用的一个配置，表示数据库中的一张表对应生成一个 PO。</li>\n<li><strong>targetRuntime</strong>：非必填项，这里同样有两个值可选，一个是 <code>MyBatis3</code>，一个是 <code>MyBatis3Simple</code>，两者的最主要区别在于不同配置下所生成的 DAO 和 Mapper 会有所不同，后者生成的 DAO 和 Mapper 会少很多，只含有日常最常用的。</li>\n</ul>\n<p><code>context</code> 除了上面配置的之外，还有许多子元素需要配置，而且这些子元素的配置的个数以及顺序都是规定好的，如果不按照给定的规则进行配置，则会导致错误，常见子元素及个数配置如下（按照规定的顺序进行从上到下排序）：</p>\n<table>\n<thead>\n<tr>\n<th>子元素</th>\n<th>最少个数</th>\n<th>最多个数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>property</code></td>\n<td>0</td>\n<td>N</td>\n</tr>\n<tr>\n<td><code>plugin</code></td>\n<td>0</td>\n<td>N</td>\n</tr>\n<tr>\n<td><code>commentGenerator</code></td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td><code>jdbcConnection</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>javaTypeResolver</code></td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td><code>javaModelGenerator</code></td>\n<td>1</td>\n<td>N</td>\n</tr>\n<tr>\n<td><code>sqlMapGenerator</code></td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td><code>javaClientGenerator</code></td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td><code>table</code></td>\n<td>1</td>\n<td>N</td>\n</tr>\n</tbody>\n</table>\n<p>接下来依次对各个子元素进行简单的配置讲解。</p>\n<h3> context 子元素配置</h3>\n<ol>\n<li><strong>property</strong></li>\n</ol>\n<p>如果我们要给我们的所生成文件的编码类型进行设置，则可以在此处进行配置，具体配置如下：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>plugin</strong></li>\n</ol>\n<p>默认生成的 PO 中，只包含了各个各个属性声明以及各个属性所对应的 <code>setter/getter</code>，如果我们想要生成对应 PO 的 <code>equals</code> 和 <code>hashCode</code> 方法，则可以通过配置如下插件来实现。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>要生成 <code>toString</code> 方法，则可以使用如下插件：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>为模型生成序列化方法，则使用如下插件：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li><strong>commentGenerator</strong></li>\n</ol>\n<p>该配置主要用于配置生成的注释，默认情况下是会生成注释的，而且会带上时间戳，如果我们不需要这些配置，则可以通过如下配置来清除：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li><strong>jdbcConnection</strong></li>\n</ol>\n<p>既然要自动生成对应文件，那肯定得链接数据库，所以我们需要对数据库进行配置，上面我们讲过导入外部配置文件，我们可以通过这种方式将数据库的配置定义在外部文件中，然后通过导入该文件进行配置即可，具体可以通过如下具体步骤进行：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"5\">\n<li><strong>javaTypeResolver</strong></li>\n</ol>\n<p>主要用于配置 JDBC 和 Java 中的类型转换规则，如果我们不配置，会采用默认的一套转换规则，而如果我们需要自定义，也只能配置 <code>bigDecimal</code>、<code>NUMERIC</code> 和时间类型，不能去配置其他类型，否则会导致出错，具体配置规则如下：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>forceBigDecimals</li>\n</ul>\n<p>该属性默认为 <code>false</code>，此时它会将 JDBC <code>DECIMAL</code> 和 <code>NUMERIC</code> 类型解析为 <code>Integer</code>，若该属性为 <code>true</code>，此时将会把 JDBC <code>DECIMAL</code> 和 <code>NUMERIC</code> 类型解析为 <code>java.math.BigDecimal</code>。</p>\n<ul>\n<li>useJSR310Types</li>\n</ul>\n<p>该属性默认为 <code>false</code>，它会将 JDBC 所有的时间类型都解析为 <code>java.util.Date</code>，若该属性为 <code>true</code>，则会按照如下规则进行解析：</p>\n<table>\n<thead>\n<tr>\n<th>转换前</th>\n<th>转换后</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DATE</code></td>\n<td><code>java.time.LocalDate</code></td>\n</tr>\n<tr>\n<td><code>TIME</code></td>\n<td><code>java.time.LocalTime</code></td>\n</tr>\n<tr>\n<td><code>TIMESTAMP</code></td>\n<td><code>java.time.LocalDateTime</code></td>\n</tr>\n<tr>\n<td><code>TIME_WITH_TIMEZONE</code></td>\n<td><code>java.time.OffsetTime</code></td>\n</tr>\n<tr>\n<td><code>TIMESTAMP_WITH_TIMEZONE</code></td>\n<td><code>java.time.OffsetDateTime</code></td>\n</tr>\n</tbody>\n</table>\n<ol start=\"6\">\n<li><strong>javaModelGenerator</strong></li>\n</ol>\n<p>这里主要用于配置自动生成的 PO 所在的包路径和项目路径，这里需要根据自己的需求进行配置，这里以我自己的配置为例，比如我的 PO 所在包为 <code>com.cunyu1943.mybatisgeneratordemo.entity</code>，项目路径为 <code>src/main/java</code>。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"7\">\n<li><strong>sqlMapGenerator</strong></li>\n</ol>\n<p>配置生成的 <code>Mapper.xml</code> 所存放的路径，比如我们要放在 <code>src/main/resources/mapper</code> 路径下，则配置如下：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"8\">\n<li><strong>javaClientGenerator</strong></li>\n</ol>\n<p>配置 <code>Mapper</code> 接口所存放的路径，一般我们都是存放在项目的 <code>mapper</code> 包下，如我的配置为：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"9\">\n<li><strong>table</strong></li>\n</ol>\n<p>配置所要自动生成代码的数据库表，这里一张表对应一个 <code>table</code>，如果要生成多张表，则需要配置多个 <code>table</code>，以下为一个具体实例：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中，<code>schema</code> 是数据库名，有的数据库需要配置，有的数据库不需要配置，这里需要具体根据你自己所用的数据库来填写，不过建议都填上，方便不同数据库也可以适用。<code>tableName</code> 则对应数据库表名；<code>domainObjectName</code> 对应生成的实体类名，默认可以不用配置，不配置时它将按照帕斯卡命名法将表明转换为类名；而 <code>enableXXXByExample</code> 默认为 <code>true</code>，默认会生成一个 <code>Example</code> 帮助类，不过该配置只有在 <code>targetRuntime=\"MyBatis3\"</code> 时才能生效，当 <code>targetRuntime=\"MyBatis3Simple\"</code> 时，<code>enableXXXByExample</code> 无论如何配置都不起作用。</p>\n<h2> 执行生成</h2>\n<p>经过上边的配置之后，我们就得到了整体的 MyBatis Generator 配置，完整的配置如下，可以根据自己的需求对其中的配置进行修改后即可使用。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中，关于外部文件 <code>generator.properties</code> 的配置具体如下，主要对数据库的相关属性进行配置。</p>\n<div class=\"language-properties line-numbers-mode\" data-ext=\"properties\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>最后，当完成所有配置后，就可以利用 Maven 工具来进行代码生成了。具体操作方法如下，点击项目 Maven 配置中的 MyBatis Generator 生成即可。</p>\n<figure><figcaption></figcaption></figure>\n<h2> 总结</h2>\n<p>以上就是利用 Maven 搭配 MyBatis Generator 来配置生成项目 PO、Mapper、XXXMapper.xml 的具体搭建过程了。如果你也刚好有这个需求，那赶紧去试试吧。搭建过程中如果遇到什么问题，欢迎评论区留言交流，我会在看到的第一时间回复。</p>\n<p>最后，关于本示例的相关代码，我已经传到了 GitCode，如果有需要的兄弟，可以自取。</p>\n<blockquote>\n<p>🎉🎉🎉 传送门 -&gt; <a href=\"https://gitcode.net/github_39655029/java-learning-demos\" target=\"_blank\" rel=\"noopener noreferrer\">mybatis-generator-demo</a></p>\n</blockquote>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "MyBatis 系列"
      ]
    },
    {
      "title": "MyBatis",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/mybatis/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/mybatis/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "简介及入门实例",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/mybatis-plus/20210807-intro.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/mybatis-plus/20210807-intro.html",
      "summary": "前言 最开始，要在 Java 中使用数据库时，需要使用 JDBC，创建 Connection、`ResultSet 等，然后我们又对 JDBC 的操作进行了封装，创建了许多类似于 DBUtil 等工具类。再慢慢的，出现了一系列持久层的框架：Hibernate、JPA，Mybatis 等。各个框架的特点如下： Hibernate：一个全自动的 ORM 框...",
      "content_html": "<h1> 简介及入门实例</h1>\n<h2> 前言</h2>\n<p>最开始，要在 Java 中使用数据库时，需要使用 JDBC，创建 <code>Connection</code>、<code>ResultSet</code> 等，然后我们又对 JDBC 的操作进行了封装，创建了许多类似于 <code>DBUtil</code> 等工具类。再慢慢的，出现了一系列持久层的框架：Hibernate、JPA，Mybatis 等。各个框架的特点如下：</p>\n<ul>\n<li>\n<p><strong>Hibernate</strong>：一个全自动的 ORM 框架，实现了数据库中表和 Java 对象的映射，通过调用 Java 对象的方法，我们就可以实现数据库表中数据的操作。而且通过该框架，我们能够不用修改代码就访问到不同的数据库。</p>\n</li>\n<li>\n<p><strong>JPA</strong>：这是一种规范，定义了访问数据库的各种操作，定义了一致的方法来操作数据库。</p>\n</li>\n<li>\n<p><strong>Mybatis</strong>：需要编写 XML 配置文件，我们需要在 XML 编写 SQL 语句来访问数据库，而且一切操作都需要通过 XML 来完成。而针对单表的 CRUD，也需要使用 XML 文件才能够完成。这样一来对我们开发人员的要求就提高了，我们需要特别熟悉 SQL 语言才能够完成。</p>\n</li>\n</ul>\n<p>其实利用 Mybatis 来进行持久层的开发已经大大减少了工作人员的工作量了，但它的使用还是需要一定的门槛的。Mybatis-Plus 的出现，进一步降低了这道槛。那我们今天就来看看，Mybatis-Plus 到底是如何进一步实现 Mybatis 的增强的。</p>\n<h2> Mybatis-Plus 简介</h2>\n<h3> 什么是 MyBatis-Plus</h3>\n<p>Mybatis-Plus：为简化开发而生</p>\n<p>MyBatis-Plus（简称 MP）是一个基于 MyBatis 的增强工具，它对 Mybatis 的基础功能进行了增强，但未做任何改变。使得我们可以可以在 Mybatis 开发的项目上直接进行升级为 Mybatis-plus，正如它对自己的定位，它能够帮助我们进一步简化开发过程，提高开发效率。</p>\n<p>Mybatis-Plus 其实可以看作是对 Mybatis 的再一次封装，升级之后，对于单表的 CRUD 操作，调用 Mybatis-Plus 所提供的 API 就能够轻松实现，此外还提供了各种查询方式、分页等行为。最最重要的，开发人员还不用去编写 XML，这就大大降低了开发难度</p>\n<p>其官方主页为：https://mp.baomidou.com。</p>\n<h3> Mybatis-Plus 的特点</h3>\n<ol>\n<li>\n<p><strong>无侵入，损耗小</strong></p>\n</li>\n<li>\n<p><strong>强大的 CURD 操作</strong></p>\n</li>\n<li>\n<p><strong>支持 Lambda 形式调用</strong></p>\n</li>\n<li>\n<p><strong>支持主键自动生成</strong></p>\n</li>\n<li>\n<p><strong>支持自定义全局通用模式</strong></p>\n</li>\n<li>\n<p><strong>支持 ActiveRecord 模式</strong></p>\n</li>\n<li>\n<p><strong>内置代码生成器、分页插件、性能分析器和全局拦截插件</strong></p>\n</li>\n<li>\n<p>……</p>\n</li>\n</ol>\n<h3> Mybatis-Plus 结构</h3>\n<figure><figcaption></figcaption></figure>\n<h2> 快速入门示例</h2>\n<h3> 数据库准备</h3>\n<p>我们依旧沿用官方文档中提供的实例来进行，那么我们首先来创建一个数据库并进入：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>然后创建一个员工表，主要有 <code>id</code>、<code>name</code>、<code>sex</code>、<code>email</code> 四大属性。</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>然后插入部分数据：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption>img</figcaption></figure>\n<h3> SpringBoot 项目</h3>\n<p>这里我利用的是 IDEA 创建的一个 SpringBoot 项目，创建后，主要需要注意的有以下几点。</p>\n<ol>\n<li><strong>添加依赖</strong></li>\n</ol>\n<p>除开创建 SpringBoot 项目所需的必要依赖之外，我们还需要引入 MP 和 MySQL 的依赖。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li><strong>数据库配置</strong></li>\n</ol>\n<p>依赖添加完成之后，到配置文件 <code>application.yml</code> 中去添加数据库的相关配置（<strong>注意</strong>：官方创建的配置文件是 <code>application.properties</code>，我们需要手动把它的后缀名改成 <code>.yml</code>）。</p>\n<div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li><strong>项目整体结构</strong></li>\n</ol>\n<p>项目创建完成后，我们最终的项目目录结构如下图所示：</p>\n<figure><figcaption>img</figcaption></figure>\n<h3> 编码</h3>\n<p>完成数据库准备工作和建立 SpringBoot 项目之后，接下来的工作就是编码了。</p>\n<ol>\n<li><strong>实体类编写</strong></li>\n</ol>\n<p>实体类也就对应我们刚才所建立的数据表 <code>employee</code>。因为这里使用了 Lombok 插件，所以可以看到在类上多了一个 <code>@Data</code> 的注解，但是少了 <code>getter、setter</code> 方法，实现了代码的简洁化，大家如果还不知道这个插件，可以去了解下，后续我可能也会写一篇关于这个插件的文章，可以关注一下。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li><strong>Mapper 接口编写</strong></li>\n</ol>\n<p>这里 <code>EmployeeMapper</code> 继承自 MP 中 <code>BaseMapper</code>，它里边已经提供了许多方法，可以供我们使用。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以下是 <code>BaseMapper</code> 中所提供的一些方法，通过继承该接口，我们就可以不用编写 <code>mapper.xml</code> 也可以获得 CRUD 功能了。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li><strong>添加包扫描</strong></li>\n</ol>\n<p>Mapper 建立完成之后，我们需要去启动类种添加包扫描的注解 <code>@MapperScan()</code>。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li><strong>测试</strong></li>\n</ol>\n<p>好了，完成上面的步骤之后，我们就可以去测试接口了。去测试的主程序 <code>EmployeeApplicationTests</code> 中，添加如下代码进行接口测试。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption>img</figcaption></figure>\n<p>可以看到执行我们测试代码后测试成功了，说明接口是没问题的。</p>\n<p>这里需要注意的是 <code>Assert.assertEquals(3, employees.size());</code> 这句代码，这里我们引入了 <code>Junit</code> 测试模块，所以需要记得在 <code>pom.xml</code> 中添加相关依赖，更多关于 <code>Junit</code> 测试相关的信息，可以参考我之前写的一篇文章：<a href=\"https://cunyu1943.github.io/JavaPark/java/java-se/test-with-junit\" target=\"_blank\" rel=\"noopener noreferrer\">抛弃传统注释测试，拥抱 Junit 单元测试</a>。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 总结</h2>\n<p>今天的文章到此就结束了，主要介绍了 Mybatis-Plus 的一些相关简介，然后就是利用 Mybatis-Plus 来进行我们的一个实例操作了。</p>\n<p>最后，创作不易，如果本文对你有所帮助，还请各位小伙伴可以 <strong>一键三连</strong>。感谢大家的支持，我们下期文章再见！</p>\n",
      "date_published": "2021-08-07T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "MyBatis Plus"
      ]
    },
    {
      "title": "日志配置及常用 CRUD",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/mybatis-plus/20210808-log-crud.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/mybatis-plus/20210808-log-crud.html",
      "summary": "前言 上一篇文章中我们讲了 Mybatis-Plus 的定义以及相关特点，并从零开始编写了一个 SpringBoot + Mybatis-Plus 的实例。今天我们就来看看，如何利用 MP 来实现对数据库的增删改查。 日志配置 使用 MP 时，默认是不打印任何 SQL 语句的。而为了方便日常开发工作的调试，我们需要联合控制台和各种数据可视化工具进行语句...",
      "content_html": "<h1> 日志配置及常用 CRUD</h1>\n<h2> 前言</h2>\n<p>上一篇文章中我们讲了 Mybatis-Plus 的定义以及相关特点，并从零开始编写了一个 SpringBoot + Mybatis-Plus 的实例。今天我们就来看看，如何利用 MP 来实现对数据库的增删改查。</p>\n<h2> 日志配置</h2>\n<p>使用 MP 时，默认是不打印任何 SQL 语句的。而为了方便日常开发工作的调试，我们需要联合控制台和各种数据可视化工具进行语句的拼接检查，因此我们利用 MP 自带的日志功能，在控制台输出我们的 SQL 语句，从而方便我们调试。</p>\n<p>在配置文件 <code>application.yml</code> （IDEA 默认生成的配置文件为 <code>application.properties</code>）中，加入一下配置，这样 MP 就会在控制台中打印完整带参数的 SQL 语句，方便我们查看。</p>\n<div class=\"language-yaml line-numbers-mode\" data-ext=\"yml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Mapper CRUD 使用方法</h2>\n<p>首先我们来看 <code>Mapper</code> 层 CRUD 涉及的一些方法，<code>Mapper</code> 层主要继承自 <code>BaseMapper</code> 接口，里边实现了各种用于操作数据库的增删改查的方法，以下我们就来看看日常我们常用的一些方法。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> insert 操作</h3>\n<p>首先是插入数据，<code>insert</code> 方法中，传入我们所要插入数据库的实体对象作为参数即可。</p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>插入实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li><strong>数据插入后的数据库</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<h3> select 操作</h3>\n<p>相比于插入数据操作，查询数据的方法就要更多，而且还能实现批量查询和条件查询。</p>\n<ol>\n<li><strong>根据主键查询</strong></li>\n</ol>\n<p>将所要查询数据的主键作为参数传入我们的 <code>selectById</code> 方法中，即可实现。</p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>查询实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>根据主键批量查询</strong></li>\n</ol>\n<p>上一个方法每次只能查询一条记录，如果我们想要查询多条数据记录，那么就可以将要查询数据的主键列表传入 <code>selectBatchIds</code> 方法即可。</p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>批量查询实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li><strong>根据多条件查询</strong></li>\n</ol>\n<p>除开支持主键查询外，MP 还支持条件查询，只要将我们的条件传入 <code>Map</code>  列表中，然后将其作为 <code>selectByMap</code> 方法的参数即可，其中传入 <code>Map</code> 的 <code>key</code> 对应我们数据库中的字段，而 <code>value</code> 则对应字段的值。</p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>条件查询实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<h3> update 操作</h3>\n<p>更新操作，主要是根据我们数据库的主键进行查询，将对应主键的实体对象传入 <code>updateById</code> 方法即可。</p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>更新实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li><strong>数据更新后的数据库</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<h3> delete 操作</h3>\n<p>删除操作，既可以根据主键删除一条记录，也能根据主键列表实现批量删除，还能根据条件来进行删除。</p>\n<ol>\n<li><strong>根据主键删除一条数据</strong></li>\n</ol>\n<p>将所要删除记录的主键作为参数传入 <code>deleteById</code> 方法即可。</p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>删除实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li><strong>删除数据后的数据库</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>根据条件删除</strong></li>\n</ol>\n<p>根据条件删除同样是讲条件传入 <code>Map</code> 中，然后将 <code>Map</code> 作为参数传入 <code>deleteByMap</code> 方法，其中 <code>key</code> 对应数据库中的字段，<code>value</code> 对应字段的值。</p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>删除实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li><strong>删除数据后的数据库</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li><strong>根据主键批量删除</strong></li>\n</ol>\n<p>将要删除记录的主键传入集合中，然后将集合作为 <code>deleteBatchIds</code> 方法的参数即可。</p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>批量删除实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li><strong>删除数据后的数据库</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<h2> Service CRUD 接口</h2>\n<p><code>Service</code> 层继承自 <code>IService</code> 接口，其中的方法和 <code>Mapper</code> 层中所提供的方法功能是一致的，除了方法名有所不同外，其他基本类似，但 <code>Service</code> 层中提供了更为丰富的方法，两者的继承结构如下图所示。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> Save</h3>\n<ol>\n<li><strong>插入一条记录</strong></li>\n</ol>\n<p>功能同 <code>Mapper</code> 层中的 <code>insert</code> 方法，只不过方法名不同。</p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>插入实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li><strong>插入数据后的数据库</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>批量插入</strong></li>\n</ol>\n<p>这里就和 <code>Mapper</code> 层中所有区别，<code>Mapper</code> 层中只支持单次插入，而 <code>Service</code> 层中支持批量插入，而传入的参数就是我们所要传入实体的集合，而且还可以分批次插入和统一插入。</p>\n<p>2.1 <strong>统一插入</strong></p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>插入实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li><strong>统一插入后的数据库</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<p>2.2 <strong>分批次插入</strong></p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>分批次插入实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li><strong>分批次插入后的数据库</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<h3> SaveOrUpdate</h3>\n<ol>\n<li><strong>单条修改插入</strong></li>\n</ol>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>单条修改插入实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li><strong>修改插入后的数据库</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>批量修改插入</strong></li>\n</ol>\n<p>2.1 <strong>统一插入</strong></p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>统一插入实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li><strong>统一插入数据后的数据库</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<p>2.2 <strong>分批次插入</strong></p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>方法实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li><strong>分批次插入数据后的数据库</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<h3> Remove</h3>\n<ol>\n<li><strong>根据 ID 删除</strong></li>\n</ol>\n<ul>\n<li><strong>方法实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>删除实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>根据条件删除</strong></li>\n</ol>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>按条件删除实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li><strong>按条件删除后的数据库</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li><strong>根据 ID 批量删除</strong></li>\n</ol>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>批量删除实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li><strong>批量删除后的数据库</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<h3> Update</h3>\n<ol>\n<li><strong>根据 ID 选择修改</strong></li>\n</ol>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>根据 ID 修改实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li><strong>更新后的数据库</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>根据 ID 批量更新</strong></li>\n</ol>\n<p>2.1 <strong>统一更新</strong></p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>批量更新实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li><strong>批量更新后的数据库</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<p>2.2 <strong>分批次更新</strong></p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>分批次更新实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li><strong>分批次更新后的数据库</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<h3> Get</h3>\n<ol>\n<li><strong>根据 ID 查询</strong></li>\n</ol>\n<p>将所要查询记录的 <code>id</code> 作为参数，然后将查询到的实体返回。</p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>查询实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<h3> List</h3>\n<ol>\n<li><strong>查询所有</strong></li>\n</ol>\n<p>查询所有记录，然后返回到一个集合中。</p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>查询实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>根据 ID 批量查询</strong></li>\n</ol>\n<p>讲所要查询的记录 <code>id</code> 传入集合，然后座位方法参数，最后返回查询到的结果到一个集合中。</p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>批量查询实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li><strong>根据条件查询</strong></li>\n</ol>\n<p>条件传入 <code>Map</code> 集合，<code>key</code> 对应字段，<code>value</code> 对应值，然后返回集合。</p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>根据条件查询实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ol start=\"4\">\n<li><strong>查询所有列表</strong></li>\n</ol>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>查询实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ol start=\"5\">\n<li><strong>查询所有记录</strong></li>\n</ol>\n<p>用于查询所有数据记录，并将其返回到一个集合中。</p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>查询实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<h3> Count</h3>\n<ol>\n<li><strong>查询记录总数</strong></li>\n</ol>\n<p>用于统计数据控中的记录总条数，方法返回记录条数。</p>\n<ul>\n<li><strong>方法声明</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>查询记录总数实例</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>测试结果</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<h2> 总结</h2>\n<p>好了，以上就是关于 Mybatis-Plus 的日志配置以及如何进行 CRUD 的相关内容了，这里 CRUD 主要又分为 Mapper 层和 Service 层，我们可以根据自己的需要进行选择。当然，在我们日常使用中，常常都是两个接口一起使用，关于更多 MP 的使用技巧，我们下期文章再见！</p>\n",
      "date_published": "2021-08-08T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "MyBatis Plus"
      ]
    },
    {
      "title": "MyBatis Plus",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/mybatis-plus/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/mybatis-plus/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "简介与环境搭建",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/nginx/20221016-intro-install.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/nginx/20221016-intro-install.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 https://mp.weixin.qq.com/s/Fx4AAS5pUqSGtui4Z-LYXA 一、简介 1. 什么是 Nginx Nginx 是一个跨平台、轻量级、高性能的 HTTP 和反向代理 web 服务器，而且同时也提供了 IMAP/POP3/SMTP 服务。Nginx 最高能够支持搞到...",
      "content_html": "<h1> 简介与环境搭建</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n<p>https://mp.weixin.qq.com/s/Fx4AAS5pUqSGtui4Z-LYXA</p>\n</div>\n<h2> 一、简介</h2>\n<h3> 1. 什么是 Nginx</h3>\n<p><code>Nginx</code> 是一个跨平台、轻量级、高性能的 <code>HTTP</code> 和反向代理 <code>web</code> 服务器，而且同时也提供了 <code>IMAP/POP3/SMTP</code> 服务。<code>Nginx</code> 最高能够支持搞到 50000 哥并发连接数的相应，在最高并发连接的情况下，可以作为 <code>Apache</code> 服务的一个替代品。</p>\n<p><code>Nginx</code> 作为负载均衡服务，既可以在内部直接支持 <code>Redis</code> 和 <code>PHP</code> 程序对外进行服务，也可以作为支持 <code>HTTP</code> 代理服务对外进行支持。<code>Nginx</code> 是基于 C 语言来进行开发的，所以无论是系统资源开销还是 CPU 使用率都较低，也因此 <code>Nginx</code> 性能较强。</p>\n<h3> 2. Nginx 的版本</h3>\n<p>常用版本主要分为四大阵营：</p>\n<ol>\n<li><code>Nginx</code> 开源版</li>\n<li><code>Nginx plus</code> 商业版</li>\n<li><code>Openresty</code></li>\n<li><code>Tengine</code></li>\n</ol>\n<h2> 二、下载</h2>\n<p>上一节中我们讲了 <code>Nginx</code> 的一些简单知识，接下来就来看看，如何在我们的服务器中安装 <code>Nginx</code>。下文中，我们均以 <code>Nginx</code> 开源版做示范。</p>\n<p>前往 <code>Nginx</code> 官方地址下载对应的版本，因为这里主要是在服务器中安装，所以是以 <code>Linux（Centos）</code> 版本来演示。</p>\n<blockquote>\n<p>http://nginx.org/en/download.html</p>\n</blockquote>\n<figure><figcaption></figcaption></figure>\n<h2> 三、编译安装与依赖检查</h2>\n<p>将下载后的 <code>Nginx</code> 压缩包进行解压，解压命令如下。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>\n进入解压缩后的 <code>Nginx</code> 所在文件夹，然后执行 <code>configure</code> 脚本，这时候就会检查安装 <code>Nginx</code> 所需的依赖，这里可能会因为你的服务器中没有事先安装所需依赖而导致报错。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>这里例举几个安装时可能会遇到的错误：</p>\n<ol>\n<li><strong>C 编译器缺失</strong></li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>要解决这个错误，只需要安装 <code>gcc</code> 编译器即可。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>PCRE Library 缺失</strong></li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>同样，为了解决这个这个问题，需要安装 <code>pcre-devel</code>。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li><strong>zlib Library 缺失</strong></li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>解决方法，安装 <code>zlib</code> 库。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>\n如果出现以上的提示信息，则说明可以进行下一步，此时直接执行编译安装命令。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>\n</p>\n<h2> 四、Nginx 启停</h2>\n<p>如果顺利执行完 <code>configure</code> 脚本，则会在服务器终端打印出以上 <code>Nginx</code> 相关的配置。</p>\n<p>进入 <code>Nginx</code> 安装后的目录 <code>/usr/local/nginx/sbin</code>，然后利用以下命令来进行 <code>Nginx</code> 的启动。</p>\n<h3> 1. 启动</h3>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>\n然后在浏览器中访问服务器的 <code>IP</code> 地址，如果出现以下界面，则说明我们的 <code>Nginx</code> 安装并启动成功了！</p>\n<figure><figcaption></figcaption></figure>\n<h3> 2. 快速停止</h3>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>停止后，再到浏览器中去访问服务器地址，就会出现以下情况。</p>\n<figure><figcaption></figcaption></figure>\n<h3> 3. 关闭前完成已接受的连接请求</h3>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 4. 重新加载配置</h3>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>通过这种方式，可以实现 <code>Nginx</code> 的无感重启。也就是说，当我们需要修改 <code>Nginx</code> 的配置时，不希望通过停止 <code>Nginx</code> 然后在启动的方式，此时就可以通过这个命令来实现。</p>\n<h2> 五、防火墙</h2>\n<h3> 1. 关闭防火墙</h3>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 2. 禁止防火墙开机启动</h3>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 3. 放行端口</h3>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 4. 重启防火墙</h3>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 五、安装为系统服务</h2>\n<h3> 1. 添加系统服务</h3>\n<p>在 <code>/usr/lib/systemd/system</code> 目录下新增一个文件，命名为 <code>nginx.service</code>，然后将以下内容添加到该文件中。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2. 重载系统服务</h3>\n<p>接着执行以下命令重新加载系统服务。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 3. 启停 Nginx</h3>\n<p>接着就可以分别利用下面的命令来启动和关停 <code>Nginx</code> 服务了。</p>\n<ul>\n<li>启动</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li>关停</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li>查看当前状态</li>\n</ul>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 六、总结</h2>\n<p>以上就是 <code>Nginx</code> 的简介和如何在 Linux 中安装 <code>Nginx</code> 的相关内容了，如果您觉得本文对您有所帮助，还请来个一键三连支持把！</p>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2022-10-16T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Nginx 教程"
      ]
    },
    {
      "title": "Nginx",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/nginx/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/nginx/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "简介",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/redis/20210821-intro.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/redis/20210821-intro.html",
      "summary": "前言 说到 Redis，大家可能第一反应就是它是当前最受欢迎的 NoSQL 数据库之一。那么在正式介绍 Redis 之前，我们先来看看关于 NoSQL 的一些相关信息，比如它是什么，又比如它的一些特点以及它的一些分类。那么我们接下来就从以上三个方面来对 NoSQL 的相关历史做一个简单介绍，然后再去看看 Redis 的相关知识。 什么是 NoSQL N...",
      "content_html": "<h1> 简介</h1>\n<h2> 前言</h2>\n<p>说到 Redis，大家可能第一反应就是它是当前最受欢迎的 NoSQL 数据库之一。那么在正式介绍 Redis 之前，我们先来看看关于 NoSQL 的一些相关信息，比如它是什么，又比如它的一些特点以及它的一些分类。那么我们接下来就从以上三个方面来对 NoSQL 的相关历史做一个简单介绍，然后再去看看 Redis 的相关知识。</p>\n<h3> 什么是 NoSQL</h3>\n<blockquote>\n<p><strong>NoSQL = Not Only SQL</strong></p>\n</blockquote>\n<p><strong>泛指非关系型数据库</strong>，随 Web2.0 的诞生，传统关系型数据库难以应对 Web2.0，尤其是超大规模的高并发社区。NoSQL 在当今大数据程序下较为流行。</p>\n<h3> NoSQL 特点</h3>\n<ol>\n<li><strong>高扩展性</strong>（数据间无关系，容易扩展）</li>\n<li><strong>大数据量高性能</strong>（官方给定数据，写操作 8w次/s，读操作 11w次/s）</li>\n<li><strong>数据类型多样</strong>（无需事先设计数据库，随取随用）</li>\n<li><strong>高可用</strong></li>\n<li>传统 RDBMS 和 NoSQL\n<ul>\n<li>传统 RDBMS\n<ul>\n<li>结构化组织</li>\n<li>SQL</li>\n<li>数据和关系均存在单独的表中</li>\n<li>操作数据定义语言</li>\n<li>严格的一致性</li>\n<li>基础的事务</li>\n<li>……</li>\n</ul>\n</li>\n<li>NoSQL\n<ul>\n<li>不仅仅是数据</li>\n<li>无固定查询语言</li>\n<li>键值对存储，列存储、文档存储、图形数据库</li>\n<li>最终一直性</li>\n<li>CAP 定理和 BASE</li>\n<li>高性能，高可用，高可拓</li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3> NoSQL 的四大分类</h3>\n<p>NoSQL 主要可以分为如下四大类，然后关于各类的实例、应用场景、数据模型以及各个类型的一些优缺点，可以参见下面的表。</p>\n<ol>\n<li><strong>KV 键值对</strong></li>\n<li><strong>文档型数据库（bson &amp; json）</strong></li>\n<li><strong>列存储数据库</strong></li>\n<li><strong>图关系数据库</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>实例</th>\n<th>应用场景</th>\n<th>数据模型</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>键值对（key-value）</strong></td>\n<td>Redis、Voldemort</td>\n<td>内存缓存，用于处理大量数据的高访问负载，也可用于日志系统等</td>\n<td>key 指向 value 的键值对，通常是用 HashTable 来实现</td>\n<td>查找速度快</td>\n<td>数据无结构化，通常只被当做字符串或二进制数据</td>\n</tr>\n<tr>\n<td><strong>列存储数据库</strong></td>\n<td>HBase</td>\n<td>分布式文件系统</td>\n<td>以列簇式存储，讲同一列数据存储在一起</td>\n<td>1. 查找速度快<br>2. 扩展性强<br>3. 更容易进行分布式扩展</td>\n<td>功能相对局限</td>\n</tr>\n<tr>\n<td><strong>文档型数据库</strong></td>\n<td>MongoDb</td>\n<td>Web 应用，类似于 Key-Value</td>\n<td>key-value 对应的键值对，value 为结构化的数据</td>\n<td>1. 数据结构要求宽松<br>2. 表结构可变，无需像关系型数据库一样预先定义表结构</td>\n<td>查询性能低，且查询语法不统一</td>\n</tr>\n<tr>\n<td><strong>图形数据库（Graph）</strong></td>\n<td>Neo4j、InfoGrid</td>\n<td>社交网络、推荐系统等</td>\n<td>图结构</td>\n<td>可以利用图结构相关算法，如最短路径寻址、N度关系查找等</td>\n<td>许多时候需要对整个图进行计算才能得到最终结果，效率不高；而且做分布式集群较困难</td>\n</tr>\n</tbody>\n</table>\n<h2> 什么是 Redis</h2>\n<p>以上对 NoSQL 做了一个简介之后，接下来就轮到我们今天的主角 - Redis 了。接下来，我将从相关简介，如何安装以及常用基本操作几个方面来对 Redis 进行介绍。</p>\n<h3> Redis 特点</h3>\n<p>Redis 是一个高性能的开源的 <code>key-value</code> 数据库，底层由 C 语言实现，相比于其他同类型产品，有如下特点。</p>\n<ul>\n<li>支持数据持久化，可以将内存中的数据保存在磁盘中，重启时再次加载使用即可；</li>\n<li>不仅支持 <code>key-value</code> 类型的数据，同时还支持 <code>list、set、hash、zset</code> 等数据结构的存储；</li>\n<li>支持 <code>master-slave</code> 模式的数据备份；</li>\n</ul>\n<h3> Redis 优势</h3>\n<ul>\n<li>高性能；</li>\n<li>支持的数据类型丰富；</li>\n<li>原子性，要么成功执行，要么失败完全不执行。单个操作时原子性的，多个操作也支持事务，通过 <code>MULTI</code> 和 <code>EXEC</code> 指令封装；</li>\n<li>支持其他丰富的特性，如 <code>publish/subscribe</code>，通知，<code>key</code> 过期等；</li>\n</ul>\n<h3> Redis 的应用场景</h3>\n<ol>\n<li>内存存储、持久化</li>\n<li>高效率，可以用于高速缓存</li>\n<li>发布订阅系统</li>\n<li>地图信息分析</li>\n<li>计时器、计数器</li>\n<li>任务队列</li>\n<li>数据过期处理</li>\n<li>应用排行榜</li>\n<li>……</li>\n</ol>\n<h3> Redis 和其他 key - value 数据库的不同</h3>\n<ol>\n<li>Redis 的数据结构更加复杂且提供对他们的原子性操作，而且基于基本数据结构的同时也对程序员透明，无需进行额外抽象；</li>\n<li>Redis 运行在内存中但是可以持久化到硬盘，所以在对不同数据集进行高速读写是需要权衡内存大小，数据量不能大于硬件内存；</li>\n</ol>\n<h2> Redis 安装</h2>\n<h3> Windows 下安装</h3>\n<ol>\n<li>去下载安装包，https://github.com/tporadowski/redis/releases，支持 32 和 64 位，按需下载即可；</li>\n<li>解压缩下载后的压缩包，并存在你自己指定的目录；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li>打开终端，然后切换到 Redis 目录，运行如下命令即可：</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"4\">\n<li>打开另一个窗口，在 Redis 目录下运行另一个 Redis，然后进行设置和取出键值对测试；</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> Linux 下安装</h3>\n<ol>\n<li>下载最新版本安装包，http://redis.cn/download</li>\n<li>使用如下命令解压安装包到你需要存储的位置，然后进行编译</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li>在一个终端中启动服务端</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"4\">\n<li>在另一个终端中启动客户端进行测试</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<h3> 注意</h3>\n<p>当在控制台中获取中文键值时，可能会出现乱码的情况，此时，可以通过在启动客户端时加入 <code>--raw</code> 参数即可解决；</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 基本操作及常识</h2>\n<ol>\n<li>选择对应数据库</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>获取数据库名</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>查看数据库大小</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li>查看数据库所有 key</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"5\">\n<li>清空数据库</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"6\">\n<li>查看某 key 是否存在</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"7\">\n<li>移除当前 key</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"8\">\n<li>设置 key 过期时间</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"9\">\n<li>查看当前 key 的类型</li>\n</ol>\n<div class=\"language-time line-numbers-mode\" data-ext=\"time\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 总结</h2>\n<p>OK，以上就是今天的所有内容了。主要介绍了 NoSQL 的相关知识，接着引入 Redis 的特点、优点、应用场景、和其他同类型数据库的区别、然后介绍 Redis 的安装以及安装过程中需要注意的事项，最后则是对 Redis 在日常使用时使用最频繁的一些命令进行了说明。</p>\n<p>最后，原创不宜，如果你觉得本文对你有所帮助，还请各位点赞关注一波，也算是对我的一种鼓励吧，让我能够继续坚持！</p>\n",
      "date_published": "2021-08-12T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Redis 教程"
      ]
    },
    {
      "title": "Redis 持久化",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/redis/20221016-persistence.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/redis/20221016-persistence.html",
      "summary": "什么是持久化？ 所谓持久化，其实就是一种机制，它能够 将内存中的数据库状态保存到磁盘 中，从而防止服务器宕机导致内存数据丢失。Redis 的 数据都是存在内存中 的，一旦出现宕机等情况，所有数据将会丢失，而持久化机制则是为了应对这一突发故障而提出的机制。 持久化的过程 要进行持久化，都是由客户端发起请求，然后再到服务器真实地写入磁盘中，一般需要经过如下...",
      "content_html": "<h1> Redis 持久化</h1>\n<h2> 什么是持久化？</h2>\n<p>所谓持久化，其实就是一种机制，它能够 <strong>将内存中的数据库状态保存到磁盘</strong> 中，从而防止服务器宕机导致内存数据丢失。<code>Redis</code> 的 <strong>数据都是存在内存中</strong> 的，一旦出现宕机等情况，所有数据将会丢失，而持久化机制则是为了应对这一突发故障而提出的机制。</p>\n<h2> 持久化的过程</h2>\n<p>要进行持久化，都是由客户端发起请求，然后再到服务器真实地写入磁盘中，一般需要经过如下步骤：</p>\n<ol>\n<li>客户端向数据库 <strong>发送写命令请求</strong>，此时数据存在于客户端的内存中；</li>\n<li>数据库 <strong>接收</strong> 来自客户端的 <strong>写命令请求</strong>，此时数据存在于服务器的内存中；</li>\n<li>数据库 <strong>调用系统 API</strong> 将数据写入磁盘，此时数据从服务器内存准备写入磁盘，位于 <strong>内核缓冲区</strong>；</li>\n<li>操作系统将 <strong>写缓冲区</strong> 传输到 <strong>磁盘控制器</strong>，此时 <strong>数据由内核缓冲区进入磁盘缓存</strong>；</li>\n<li>操作系统的磁盘控制器将数据 <strong>写入实际物理媒介中</strong>，此时数据写入磁盘；</li>\n</ol>\n<h2> 持久化的两种方式</h2>\n<ul>\n<li><strong>RDB</strong>：在指定时间间隔内对数据进行快照存储，是 <code>Redis</code> 默认的持久化方式；</li>\n<li><strong>AOF</strong>：记录每次服务器进行的写操作，当服务器重启时重新执行这些命令以恢复原始数据；</li>\n</ul>\n<h3> RDB</h3>\n<figure><figcaption></figcaption></figure>\n<h4> 工作原理</h4>\n<ol>\n<li><code>Redis</code> 调用 <code>fork()</code>，产生一个子进程；</li>\n<li>子进程将数据写到一个临时的 <code>RDB</code> 文件；</li>\n<li>当子进程完成新的 <code>RDB</code> 文件写入后，替换掉旧的 <code>RDB</code> 文件；</li>\n</ol>\n<h4> 优缺点</h4>\n<ol>\n<li><strong>优点</strong></li>\n</ol>\n<ul>\n<li><code>RDB</code> 是一个单文件，十分简洁，保存了某一时间点的 Redis 数据，适合做备份；</li>\n<li><code>RDB</code> 适合用于容灾，单文件传输十分方便；</li>\n<li><code>RDB</code> 性能较好，要进行持久化时，主进程 <code>fork</code> 一个子进程，然后将持久化的工作交给子进程，而主进程无需进行相关的 <code>I/O</code> 操作；</li>\n<li>相比于 <code>AOF</code>，数据量大时，其启动速度更快。</li>\n</ul>\n<ol>\n<li><strong>缺点</strong></li>\n</ol>\n<ul>\n<li><code>RDB</code> 容易造成数据丢失，数据安全性较低；</li>\n<li><code>RDB</code> 利用 <code>fork()</code> 产生子进程进行数据的持久化，一旦数据过大就会消耗一定时间，造成 <code>Redis</code>  停止服务几毫秒甚至更久。</li>\n</ul>\n<h4> 配置</h4>\n<div class=\"language-properties line-numbers-mode\" data-ext=\"properties\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 手动触发方式</h4>\n<ol>\n<li><strong>save</strong></li>\n</ol>\n<p>会阻塞当前 <code>Redis</code> 服务器，直到持久化完成，对于线上要禁止使用；</p>\n<ol>\n<li><strong>bgsave</strong></li>\n</ol>\n<p><code>fork</code> 一个子进程，由子进程负责持久化进程，因此阻塞只会发生在 <code>fork</code> 子进程的过程中；</p>\n<h3> AOF</h3>\n<figure><figcaption></figcaption></figure>\n<h4> 工作原理</h4>\n<ol>\n<li>命令的实时写入，通过增量追加到文件的流程为：命令写入 -&gt; 追加到 <code>AOF</code> 缓存 -&gt; 同步到 <code>AOF</code> 磁盘；</li>\n<li>对 <code>AOF</code> 文件的重写，是为了减少 <code>AOF</code> 文件的大小，可以手动（<code>bgrewriteaof</code>）或自动触发；</li>\n</ol>\n<h4> 优缺点</h4>\n<ol>\n<li><strong>优点</strong></li>\n</ol>\n<ul>\n<li>比 <code>RDB</code> 更可靠，能制定不同的同步策略：不进行同步，每秒同步一次和每次查询进行同步，默认为每秒同步一次；</li>\n<li><code>AOF</code> 是一个纯追加的文件，面对突发情况也不回出现日志定位或损坏问题；</li>\n<li>当 <code>AOF</code> 过大时，<code>Redis</code> 会自动重写。重写是在一个新文件上进行，同时 <code>Redis</code> 会继续往旧文件中追加数据，新文件上会写入能重建当前数据集的最小操作命令的集合。当新文件重写完之后，<code>Redis</code> 就将新旧文件进行替换，然后将数据写入新文件；</li>\n<li><code>AOF</code> 将操作命令以简易的格式保存在文件中，容易导出用于恢复数据；</li>\n</ul>\n<ol start=\"2\">\n<li><strong>缺点</strong></li>\n</ol>\n<ul>\n<li>数据量相同时，<code>AOF</code> 文件的大小一般都会比 <code>RDB</code> 文件大；</li>\n<li>在某些同步策略下，<code>AOF</code> 的速度比 <code>RDB</code> 慢，通常同步设置为每秒一次就能获得较高性能；</li>\n<li>有可能出现 <code>AOF</code> 重建的数据和原数据不一致的问题；</li>\n</ul>\n<h4> 配置</h4>\n<div class=\"language-properties line-numbers-mode\" data-ext=\"properties\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 总结</h2>\n<p>以上就是 <code>Redis</code> 持久化的相关内容了，首先讲了什么是持久化，然后讲了持久化的过程，最后则是 <code>Redis</code> 中持久化的两种方式：<code>RDB</code> + <code>AOF</code>。</p>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Redis 教程"
      ]
    },
    {
      "title": "Redis",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/redis/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/redis/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "简介",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/spring/20200720-intro.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/spring/20200720-intro.html",
      "summary": "前言 为了解决我们开发者在 J2EE 开发时所遇到的众多问题，Rob Johnson 等人发起了 Spring 框架项目。Spring 是一个开源的 J2EE 应用程序框架，是针对 Bean 的生命周期进行管理的轻量级容器。它既可以单独用于构建程序，也能和当前众多的 Web 框架进行组合使用，能够十分方便的降低当前企业应用开发的复杂性。既然 Sprin...",
      "content_html": "<h1> 简介</h1>\n<h2> 前言</h2>\n<p>为了解决我们开发者在 J2EE 开发时所遇到的众多问题，Rob Johnson 等人发起了 Spring 框架项目。Spring 是一个开源的 J2EE 应用程序框架，是针对 Bean 的生命周期进行管理的轻量级容器。它既可以单独用于构建程序，也能和当前众多的 Web 框架进行组合使用，能够十分方便的降低当前企业应用开发的复杂性。既然 Spring 如此强大，那我们今天就来探究一下 Spring 的内容。</p>\n<h2> Spring 概览</h2>\n<p>Spring 其实是一个很大的范围概称，包含着许多分支，在正式了解 Spring 之前，我们先来看看 Spring 家族中的主要分支。</p>\n<h3> Spring FrameWok</h3>\n<p>Spring 领域中其他一切的基础，提供了 <strong>核心容器和依赖注入框架</strong>，还提供了一些基本数据持久性支持，特别是基于模板的 JDBC 文件。</p>\n<h3> Spring Boot</h3>\n<p>Spring Boot 不仅提供了 <strong>启动依赖和自动配置</strong>，还提供了如下的其他特性：</p>\n<ol>\n<li>\n<p>Actuator 提供了对应用程序内部工作方式的运行时监控，包括端点、线程 dump 信息、应用程序健康状况和应用程序可用的环境属性。</p>\n</li>\n<li>\n<p>灵活的环境属性规范。</p>\n</li>\n<li>\n<p>核心框架的辅助测试之外的额外测试支持。</p>\n</li>\n</ol>\n<h3> Spring Data</h3>\n<p>将应用程序的数据存储库抽象为简单的 Java 接口，同时当定义方法用于驱动数据进行存储和检索的问题时，对方法使用了命名约定。此外还能处理几种不同类型的数据库，包括包括关系型（JPA）、文档型（Mongo）、图型（Neo4j）等。</p>\n<h3> Spring Security</h3>\n<p>Spring Security 解决了广泛的应用程序安全性需求，包括身份验证、授权和 API 安全性等一系列工作。</p>\n<h3> Spring Integration 和 Spring Batch</h3>\n<p>Spring Integration 解决了实时集成，即数据在可用时进行处理。相反，Spring Batch 解决了批量集成的问题，允许在一段时间内收集数据，直到某个触发器（可能是一个时间触发器）发出信号，表示该处理一批数据。</p>\n<h3> Spring Cloud</h3>\n<p>Spring Cloud 是一组用 Spring 开发云本地应用程序的项目。</p>\n<p>Spring 是为了减少 EJB 的复杂性而创建的一套解决方案，而 EJB 过于臃肿，使用 Spring 能够让 Java Bean 之间进行有效的解耦。而且 Spring 不仅仅局限于服务端的开发，在测试性和松耦合方面均有较好表现。</p>\n<h2> 什么是 Spring</h2>\n<h3> Spring 简介</h3>\n<p>我们日常所说的 Spring，实际上指的是 Spring Framework，属于 Spring 家族的一个分支。</p>\n<p>Spring 的核心是一个 <strong>容器</strong>，常称为 <strong>Spring 应用程序上下文</strong>，用于创建和管理应用程序组件。组件（或 Bean）在 Spring 应用程序上下文中连接在一起互相构成一个完整的应用程序。</p>\n<p>那么是如何将各种 Bean 连接在一起呢？这就是 Spring 中最重要的特性之一：<strong>依赖注入（DI）</strong>。</p>\n<p><strong>依赖注入（DI）</strong>：通过依赖注入的应用程序 <strong>不是</strong> 由组件自身创建和维护其所依赖的其他 Bean 的生命周期，<strong>而是依赖于单独的实体（容器）来创建和维护所有组件，并将这些组件注入需要他们的 Bean，通常是通过构造函数或属性访问器方法来完成</strong>。</p>\n<h3> Spring 的特点</h3>\n<ul>\n<li>\n<p>方便解耦，简化开发过程；</p>\n</li>\n<li>\n<p>支持面向切面编程（Aop），方便我们不用修改源码就能对功能进行增强；</p>\n</li>\n<li>\n<p>整合支持 Junit，方便程序的测试；</p>\n</li>\n<li>\n<p>既可以独立构建程序，也支持各种框架，而且大大降低各种框架使用难度；</p>\n</li>\n<li>\n<p>支持事务管理，方便进行事物操作；</p>\n</li>\n<li>\n<p>降低了各种 API 的开发难度；</p>\n</li>\n</ul>\n<h3> Spring 的组成</h3>\n<figure><figcaption></figcaption></figure>\n<p>Spring 是一个分层架构，主要由如下 7 大模块所构成。Spring 模块位于核心容器，定义了创建、配置和管理 Bean 的方式。</p>\n<ol>\n<li>\n<p><strong>Spring Core</strong>：提供 Spring 框架基本功能，主要组件是 BeanFactory，是工厂模式的实现，通过 IOC 机制将应用程序的配置和依赖性规范与实际的应用程序代码分开。</p>\n</li>\n<li>\n<p><strong>Spring Context</strong>：一个配置文件，给 Spring 框架提供上下文信息，上下文包括 JNDI、EJB、电子邮件、国际化、校验和调度等企业服务。</p>\n</li>\n<li>\n<p><strong>Spring AOP</strong> ：通过配置管理特性，Spring AOP 直接将 AOP（面向切面）功能集成到 Spring 框架。从而我们能够十分方便的使用 Spring 框架来管理任何支持 AOP 的对象。模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用该组件，可以不依赖其他组件九江声明性事务管理集成到应用程序中。</p>\n</li>\n<li>\n<p><strong>Spring DAO</strong>：JDBC DAO 抽象层提供了有意义的异常层次结构，可以用来管理异常处理和不同数据库供应商抛出的错误信息。异常层次结构简化了错误处理，而且极大降低了需要编写的异常代码数量。Spring DAO 面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</p>\n</li>\n<li>\n<p><strong>Spring ORM</strong>：Spring 框架中插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map，这些都遵从 Spring 的通用事务和 DAO 异常层次结构；</p>\n</li>\n<li>\n<p><strong>Spring Web</strong>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文，所以 Spring 框架支持与 Jakarta Structs 的集成。同时该模块还简化了处理多部分请求以及请求参数绑定到域对象的工作。</p>\n</li>\n<li>\n<p><strong>Spring Web MVC</strong>：MVC 是一个全功能的构建 Web 应用的 MVC 实现，可以通过策略接口对 MVC 框架实现高度可配置。而且 MVC 还容纳了 JSP、Velocity、Tiles 等视图技术。</p>\n</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<h3> XML 配置 VS Java 配置</h3>\n<p>对于之前的版本，Spring 容器将各个组件连接起来的方式是通过 XML 配置，但现在的版本中更多的是使用基于 Java 的配置，如下面基于 XML 的配置等效于基于 Java 的配置。</p>\n<ul>\n<li>基于 XML 配置</li>\n</ul>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>基于 Java 配置</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在基于 Java 的配置中，<code>@Configuration</code> 向 Spring 表明该类是一个配置类，为 Spring  应用程序上下文提供 Bean。而 <code>@Bean</code> 注解则指示类方法返回的对象应作为 Beans 添加到应用程序上下文中。</p>\n<p>那你可能想，既然之前有了 XML 配置的方式，那么为什么后来的版本中又加入了基于 Java 的配置方式呢？基于 Java 的配置方式相比于 XML 的配置方式，<strong>包含了更高的类型安全性和更高的可重构性</strong>。而且仅当 Spring 无法自动配置组件时，才需要通过 <strong>XML的配置方式</strong> 或者 <strong>基于 Java 的配置方式</strong> 来进行显式配置。</p>\n<p><strong>自动配置</strong> 即 <strong>自动装配 + 组件扫描</strong>。有赖于 <strong>组件扫描</strong>，Spring 能 <strong>自动从应用程序的类路径中发现组件，同时将其创建为 Spring 应用程序上下文中的 Bean</strong>。而通过 <strong>自动装配，Spring 将自动将组件与其所依赖的其他 Bean 一起注入</strong>。</p>\n<p>最近随着 Spring Boot 的推出，自动配置的优势进一步加强，在这种配置中，Spring Boot 将根据 <strong>类路径中的条目、环境变量和其他因素，合理猜测所需配置的组件，将其连接在一起</strong>。Spring Boot 中的自动配置大大减少了构建应用程序所需的显式配置的数量，增强了 Spring 开发的能力。</p>\n<h2> 初始化 Spring 应用程序</h2>\n<h3> 项目结构</h3>\n<p>对于一个 Spring 项目而言，其结构主要包括以下部分：</p>\n<ol>\n<li><code>src/main/java</code>：该目录主要包含应用程序的源码，主要可分为如下几类：</li>\n</ol>\n<ul>\n<li>\n<ul>\n<li><code>build</code> ：工程启动类；</li>\n<li><code>entity</code> ：实体类；</li>\n</ul>\n</li>\n<li>\n<ul>\n<li><code>mapper</code> ：数据访问层；</li>\n<li><code>service</code> ：数据服务层，业务类代码；</li>\n</ul>\n</li>\n<li>\n<ul>\n<li><code>controller</code> ：前端访问控制器；</li>\n<li><code>config</code> ：配置信息类；</li>\n</ul>\n</li>\n<li>\n<ul>\n<li><code>dto</code>：数据传输层；</li>\n<li><code>utils</code> ：工具类；</li>\n</ul>\n</li>\n<li>\n<ul>\n<li><code>constant</code> ：常用接口类；</li>\n<li><code>vo</code> ：数据传输类；</li>\n</ul>\n</li>\n<li>\n<ul>\n<li><code>Application.java</code>：项目的启动类；</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>\n<p><code>src/main/resources</code>：相关资源文件；</p>\n</li>\n<li>\n<p><code>src/test/java</code>：测试相关代码；</p>\n</li>\n<li>\n<p><code>src/test/resources</code>：测试相关资源；</p>\n</li>\n<li>\n<p><code>pom.xml</code>：Maven 构建规范，包含一些项目及依赖方面的配置。</p>\n</li>\n</ol>\n<h3> 项目启动类</h3>\n<p>项目启动类，即运行 jar 文件时用来引导应用程序执行的类，也就是项目结构中的 <code>Application.java</code>，下面是一个项目启动类的实例：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中 <code>@SpringBootApplication</code> 注解说明该类是一个 Spring 引导应用程序，但实际上它是组合了下列三个注解的复合应用注解：</p>\n<ul>\n<li>\n<p><code>@SpringBootConfiguration</code>：<strong>指定该类为配置类</strong>。</p>\n</li>\n<li>\n<p><code>@EnableAutoConfiguration</code>：<strong>启用 Spring 自动配置</strong>。</p>\n</li>\n<li>\n<p><code>@ComponentScan</code>：<strong>启用组件扫描</strong>。允许声明其他带有 <code>@Component</code>、<code>@Controller</code>、<code>@Service</code> 等注解的类，以便让Spring 自动发现他们并将他们注册为 Spring 应用程序上下文中的组件。</p>\n</li>\n</ul>\n<h2> 总结</h2>\n<p>OK，总结一下今天的内容，主要讲了：</p>\n<ol>\n<li>\n<p>Spring 家族成员的内容；</p>\n</li>\n<li>\n<p>Spring 的概念</p>\n</li>\n<li>\n<p>Spring 的特点</p>\n</li>\n<li>\n<p>Spring 的组成</p>\n</li>\n<li>\n<p>配置 Spring 的两种方式</p>\n</li>\n<li>\n<p>一个 Spring 项目常见的项目结构</p>\n</li>\n</ol>\n<p>好了，以上就是今天的所有内容了。原创不易，如果你觉得我的内容对你有所帮助，那就帮忙点赞关注吧！</p>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Spring 系列"
      ]
    },
    {
      "title": "IoC 大揭秘",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/spring/20200723-ioc.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/spring/20200723-ioc.html",
      "summary": "1. 什么是 Ioc 1.1 Ioc 定义 Ioc（Inversion of Control），即 控制反转，是 Spring 框架的核心内容，实际上指的是 对一个对象的控制权的反转，和 OOP 一样，属于一种设计思想。Ioc 表示将我们 设计好的对象交由容器控制，而 不再使用在对象内部直接控制 这种传统方式，而 DI（依赖注入）则是实现 Ioc 的一...",
      "content_html": "<h1> IoC 大揭秘</h1>\n<h2> 1. 什么是 Ioc</h2>\n<h3> 1.1 Ioc 定义</h3>\n<p>Ioc（Inversion of Control），即 <strong>控制反转</strong>，是 Spring 框架的核心内容，实际上指的是 <strong>对一个对象的控制权的反转</strong>，和 OOP 一样，属于一种设计思想。Ioc 表示将我们 <strong>设计好的对象交由容器控制</strong>，而 <strong>不再使用在对象内部直接控制</strong> 这种传统方式，而 <strong>DI（依赖注入）则是实现 Ioc 的一种方法</strong>。</p>\n<h3> 1.2 Ioc 工作流程</h3>\n<p>Spring Ioc 容器在初始化时先读取配置文件，然后根据配置或元数据来创建与组织对象存入容器中，当程序要使用时再从 Ioc 容器中读取出需要的对象。</p>\n<figure><figcaption></figcaption></figure>\n<h2> 2. Ioc 实例</h2>\n<h3> 2.1 项目创建</h3>\n<ol>\n<li>创建一个 Maven 项目，然后在 <code>pom.xml</code> 中引入 <code>spring-context</code> 以及 <code>Junit</code> 的依赖；</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>在 <code>resourcees</code> 目录下创建一个 Spring 的配置文件，然后会生成如下包含内容的模板；</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>Spring 配置文件创建好之后，就可以在其中配置我们需要注册到 Spring 容器中的 Bean，其中 <code>class</code> 属性用于表示要注册的 Bean 的全路径，而 <code>id</code> 则是 Bean 的唯一标识。</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>此处配置的是 <code>com.cunyu.domain</code> 包下的 <code>Book</code> 类，所以需要对应源文件存在，我的 <code>Book</code> 类定义如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li>好了，完成上面的配置之后，我们的 Bean 就已经被注册到 Spring 容器中了，接下来只需要加载这个配置文件，然后利用 <code>getBean()</code> 方法从容器中获取对象即可；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2.2 注意事项</h3>\n<p>除开上述 <code>ClassPathXmlApplicationContext</code> 的方式加载配置文件之外，还可以利用 <code>FileSystemXmlApplicationContext</code> 的方式，这样的话项目将会从给定的路径中去加载配置文件。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>此外，不仅可以用 <code>getBean()</code> 方法来获取 Bean，还可以直接通过 <code>Class</code> 来获取 Bean，但此时要求 Bean 只存在一个实例，否则就会导致报错。比如下面的情况就会导致报错：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Spring 系列"
      ]
    },
    {
      "title": "依赖注入知多少",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/spring/20200724-di.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/spring/20200724-di.html",
      "summary": "0. 前言 Spring 中，用来组成应用程序的主体以及由 Spring IoC 容器所管理的对象叫做 Bean。简而言之，Bean 就是由 IoC 容器来进行初始化、装配和管理的对象。 Bean 的作用域主要有如下几种： 0.1 Singleton 作用域为 Singleton，表明 IoC 容器中只会存在一个共享 Bean 实例，而且所有对 Bea...",
      "content_html": "<h1> 依赖注入知多少</h1>\n<h2> 0. 前言</h2>\n<p>Spring 中，用来组成应用程序的主体以及由 Spring IoC 容器所管理的对象叫做 Bean。简而言之，Bean 就是由 IoC 容器来进行初始化、装配和管理的对象。</p>\n<p>Bean 的作用域主要有如下几种：</p>\n<h3> 0.1 Singleton</h3>\n<p>作用域为 <code>Singleton</code>，表明 IoC 容器中只会存在一个共享 Bean 实例，而且所有对 Bean 的请求，主要 <code>id</code> 和该 Bean 定义相匹配，那么就会返回 Bean 的同一实例。<code>Singleton</code> 是单例模型，即在从创建容器的同时就会自动创建一个 Bean 的对象，无论是否使用，而且每次获取到的对象都是同一对象。</p>\n<h3> 0.2 Prototype</h3>\n<p>作用域为 <code>Prototype</code>，表明一个 Bean 定义对应多个实例，该作用域中的 Bean 会导致在每次对该 Bean 请求时均创建一个新的 Bean 实例。<code>Prototype</code> 是一个原型类型，在我们创建容器时并未实例化，而是当我们获取 Bean 时才去创建一个对象，而且每次获取到的对象都不一样。</p>\n<h3> 0.3 Request</h3>\n<p>作用域为 <code>Request</code>，表明在一次 <code>HTTP</code> 请求中，一个 Bean 对应一个实例，即每个 <code>HTTP</code> 请求均有各自的 Bean 实例，依据某个 Bean 定义创建而成，只在基于 Web 的 Spring ApplicationContext 情形下有效。当一次 <code>HTTP</code> 请求处理结束时，该作用域中的 Bean 实例均被销毁。</p>\n<h3> 0.4 Session</h3>\n<p>作用域为 <code>Session</code> ，表明在一个 <code>HTTP Session</code> 中，一个 Bean 对应一个实例，只在基于 Web 的 Spring ApplicationContext 情形下有效。当一个 <code>HTTP Session</code> 被废弃时，在该作用域内的 Bean 也将失效。</p>\n<table>\n<thead>\n<tr>\n<th>作用域类别</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Singleton</code></td>\n<td>Spring IoC 容器中仅存在一个 Bean 实例，以单例方式存在，是 Spring 中的默认值</td>\n</tr>\n<tr>\n<td><code>Prototype</code></td>\n<td>每次从容器中调用 Bean 时，均返回一个新的实例，即每次调用 <code>getBean()</code> 方法，相当于 <code>new</code> 一个新的对象</td>\n</tr>\n<tr>\n<td><code>Request</code></td>\n<td>每次 HTTP 请求均创建一个新的 Bean，仅适用于 WebApplicationContext 环境</td>\n</tr>\n<tr>\n<td><code>Session</code></td>\n<td>每次 HTTP Session 共享一个 Bean，不同 Session 使用不同的 Bean，仅适用于 WebApplicationContext 环境</td>\n</tr>\n</tbody>\n</table>\n<h2> 1. 什么是 DI</h2>\n<p>DI（Dependency Injection），即依赖注入。其中 <strong>依赖指的是 Bean 对象的创建依赖于容器，是 Bean 对象的依赖资源；而注入则指的是 Bean 对象所以来的资源由容器来设置和装配</strong> 。</p>\n<h2> 2. 实现 DI 的方式</h2>\n<p>要实现依赖注入，通常有如下几种方法：</p>\n<ol>\n<li><strong>构造器注入</strong></li>\n<li><strong>Set 注入</strong></li>\n<li><strong>p 命名和 c 命名注入</strong></li>\n</ol>\n<h3> 2.1 构造器注入</h3>\n<p>由于构造器可以分为无参和有参构造器，所有又可以分为 <strong>有参构造器注入</strong> 和 <strong>无参构造器注入</strong>。</p>\n<h4> 2.1.1 无参构造器注入</h4>\n<ol>\n<li>首先创建实体类 <code>User</code></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>接着配置 Spring 配置文件，在 <code>resources</code> 目录下新建 <code>applicationContext.xml</code></li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>利用 Junit 进行单元测试</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.1.2 有参构造器注入</h4>\n<ol>\n<li>同样先创建一个实体类，同时添加有参构造器方法</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>配置 Spring 配置文件</li>\n</ol>\n<p>此时配置 Spring 配置文件有 3 种不同的方法：</p>\n<ul>\n<li>通过 <code>index</code> 下标属性设置</li>\n</ul>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>通过参数名设置</li>\n</ul>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>通过参数类型设置</li>\n</ul>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>通过 Junit 测试</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2.2 Set 注入</h3>\n<p>要注入某属性，则该属性必须有 <code>set()</code> 方法；</p>\n<h4> 2.2.1 创建实体类</h4>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.2.2 各类型属性注入</h4>\n<ol>\n<li>常量注入</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>Bean 注入</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>数组注入</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li>List 注入</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"5\">\n<li>Map 注入</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"6\">\n<li>set 注入</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"7\">\n<li>Null 注入</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"8\">\n<li>Properties 注入</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>测试：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 2.3 p 命名和 c 命名注入</h3>\n<h4> 2.3.1 p 命名注入</h4>\n<ol>\n<li>创建实体类和其他注入方式相同</li>\n<li>配置 Spring 配置文件</li>\n</ol>\n<p>首先需要在配置文件的头文件中加入约束条件：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>接着在配置文件中配置即可：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>测试方法同其他注入方式</li>\n</ol>\n<h4> 2.3.2 c 命名注入</h4>\n<ol>\n<li>创建实体类和其他注入方式相同</li>\n<li>配置 Spring 配置文件</li>\n</ol>\n<p>首先需要在配置文件的头文件中加入约束条件：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>接着在配置文件中配置即可：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>测试方法同其他注入方式</li>\n</ol>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Spring 系列"
      ]
    },
    {
      "title": "Spring Bean 注解详解",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/spring/20210521-annotation.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/spring/20210521-annotation.html",
      "summary": "前言 本篇博客中，我们将会讨论用于声明不同类型 Beans 的几种最常用的 Spring Bean 注解。 众所周知，Spring 容器中有许多配置 Bean 的方法，我们既可以通过 XML 配置，也可以在配置类中使用 @Bean 注解来声明 Beans。此外，我们还可以使用 org.springframework.stereotype 包中的一个注解...",
      "content_html": "<h1> Spring Bean 注解详解</h1>\n<h2> 前言</h2>\n<p>本篇博客中，我们将会讨论用于声明不同类型 Beans 的几种最常用的 Spring Bean 注解。</p>\n<p>众所周知，Spring 容器中有许多配置 Bean 的方法，我们既可以通过 XML 配置，也可以在配置类中使用 <code>@Bean</code> 注解来声明 Beans。此外，我们还可以使用 <code>org.springframework.stereotype</code> 包中的一个注解来对类进行标记，然后把其余工作交给组件扫描即可。</p>\n<h2> 组件扫描</h2>\n<p>在 Spring 中，一旦我们启用了组件扫描， Spring 就会自动扫描包中的 Bean。</p>\n<p>通过使用 <code>@ComponentScan</code> ，Spring 就会自动去扫描那些带有注释配置的类，我们可以使用 <code>basePackages</code> 或者 <code>value</code> 参数（两者是一样的，<code>value</code> 只不过是 <code>basePackages</code> 的另一种称呼）来直接指定我们所要扫描的包的名称，然后 Spring 就会去扫描我们指定包下所有带有 <code>@Component</code> 注解的类，然后将其自动注册为一个 Bean。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>此外，我们还可以使用 <code>basePackageClasses</code> 参数来指向基础包中的类。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>basePackages</code> 和 <code>basePackageClasses</code> 两个参数都是数组类型的，所以在传参时我们可以为他们提供多个包。</p>\n<p>而如果没有为 <code>@ComponentScan</code> 指定参数，那么 Spring 就只会扫描和 <code>@ComponentScan</code> 注释的类位于同一个包的带有 <code>@Component</code> 注解的其他类，然后将它们自动创建为一个 Bean。</p>\n<p><code>@ComponentScan</code> 充分利用了 Java 8 中的重复注解特性，因此我们能够用它来多次标记一个类：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>除开上面的方式来标记一个类外，我们还可以使用 <code>@CompentScans</code> 来将多个 <code>@ComponentScan</code> 包含起来，用于指定多个 <code>@ComponentScan</code> 配置。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>除开使用注解的方式来实现组件扫描之外，我们还可以通过配置 XML 来进行，只需要在我们的配置文件中如下内容即可：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>context:component-scan</code> 元素将实现同注解 <code>@ComponentScan</code> 一样的效果，即扫描 <code>com.cunyu</code> 包下所有带有 <code>@Component</code> 注解的类，并将它们注册创建为 Bean。</p>\n<h2> @Component</h2>\n<p>上一小节中我们讲了 <code>@ComponentScan</code> 会自动扫描组件过程中会去扫描那些带有 <code>@Component</code> 注解的类，并将其注册创建为 Bean，比如下面的例子：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中 <code>Cat</code> 类中带有 <code>@Component</code> 注解，当 Spring 自动扫描时，就会去扫描 <code>Cat</code> 这个类，并创建一个名为 <code>cat</code> 的 Bean 实例。</p>\n<p><strong>注意</strong>：默认情况下，使用 <code>@ComponentScan</code> 去扫描 <code>@Component</code> 注解的类，生成对应类的 Bean 实例时，Bean 实例具有与类名相同的名称，但不同的是 Bean 实例的首字母是小写，而一般类名首字母是大写。</p>\n<p><code>@Component</code> 是任意 Spring 管理组建的通用构造型，当组件不好归类时，一般使用该注解，又可以分为如下几个常用元注解：</p>\n<ul>\n<li><code>@Repository</code>：位于持久层，能将数据库操作跑出的原生异常转换为 Spring 持久层异常，用于标注数据访问组件，即 DAO 组件；</li>\n<li><code>@Service</code>：位于业务逻辑层，只是标注该类位于业务层逻辑；</li>\n<li><code>@Configuration</code>：用于定义配置类，可替换 XML 配置文件，被注解的类内部包含一个或多个被 <code>@Bean</code> 注解的方法，这些方法将会被 <code>AnnotationConfigApplicaitonContext</code> 或者 <code>AnnotaionConfigWebApplicationContext</code> 类扫描，并用于构建 Bean 定义，初始化 Spring 容器；</li>\n<li><code>@Controller</code>：属于 Spring MVC 的注解，进行前端请求的处理、转发、重定向；用于标注控制层组件；</li>\n</ul>\n<p>它们是针对不同使用场景而采取的带有特定功能化的注解组件，其实质功能其实和 <code>@Component</code> 一样。因此，如果一个类被 <code>@Component</code> 注解了，那么就可以根据这个类的实际功能，利用 <code>@Repository</code>、<code>@Service</code> … 等代替，而且代替后的注解会具备更多的功能。</p>\n<h2> @Repository</h2>\n<p>DAO（Data Access Object，数据访问对象，为某种类型的数据库或其他持久性机制提供一个抽象接口的对象） 或者 Repository 类通常代表应用程序中的数据访问层，我们一般倾向于使用 <code>@Repository</code> 注解。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>通过使用 <code>@Repository</code> 注解，它将启用自动持久化异常转换。此时，当我们使用一些持久化框架，比如 Hibernate、MyBatis……时，当带有 <code>@Repository</code> 注解的类在抛出本地异常时，就会自动将其转换为 Spring 中的 <code>DataAccessException</code> 的子类。</p>\n<p>而要启动异常转换，我们就需要自己去声明我们 <code>PersistenceExceptionTranslationPostProcessor</code> 的实例，声明的方式可以分为注解性和 XML 配置型。但是一般而言，Spring 都会自动帮我们去完成这个过程，所以我们就不再需要自己去手动声明了。</p>\n<ul>\n<li><strong>注解型</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>XML 配置型</strong></li>\n</ul>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> @Service</h2>\n<p>对于应用程序中的业务逻辑，一般都是位于服务层，因此我们使用 <code>@Service</code> 注解一个类，来指明该类属于服务层。表示定义一个 Bean，自动根据所标注的组件实例化一个首字母为小写的 Bean。实例如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上述代码中 <code>PetService</code> 类被标注为一个 Bean，其名称为 <code>petServie</code>。</p>\n<h2> @Configuration</h2>\n<p>一般用于配置类，而且还可以包含用 <code>@Bean</code> 所注解的 Bean 定义方法，实例如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>既然说了使用 <code>@Confgiuration</code> 可以和 XML 配置文件互换，那么以上的配置类等价于如下配置：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意：使用 <code>@Configuration</code> 注解时，一般需要遵循如下原则：</p>\n<ol>\n<li><code>@Configuration</code> 注解的类不可以是 <code>final</code> 类型；</li>\n<li><code>@Configuration</code> 注解的类不可以是匿名类；</li>\n<li>嵌套的 <code>@Configuration</code> 必须是静态类；</li>\n</ol>\n<h2> @Controller</h2>\n<p><code>@Controller</code> 注解是一个类级别的注解，当把它用在类上时，表示该类在 Spring MVC 中充当控制器，该类将被 Spring 自动扫描，一般我们在该类中加入 <code>@RequestMapping(\"…\")</code>，就可以直接使用浏览器来访问对应界面进行逻辑处理了。实例如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>此时，当我们去浏览器中访问 <code>localhost:8080/hello</code> 时，页面中就会显示 <code>你好，村雨遥！</code> 这条信息。</p>\n<p>注意，<code>@Controller</code> 注解的类下，我们又发现了 <code>RequestMapping</code> 注解，该注解主要 6 个属性，分别介绍如下：</p>\n<ul>\n<li><code>value</code> ：用于指定浏览器指定的地址；</li>\n<li><code>method</code>，指定请求的 method 类型，一般有 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>，而现在我们一般使用对应的注解 <code>@GetMapping</code>、<code>@PostMapping</code>、<code>@PutMapping</code>、<code>@DeleteMapping</code>；</li>\n<li><code>consumes</code>：用于指定处理请求的提交内容类别（<code>Content-Type</code>），如 <code>application/json</code>、<code>test/html</code>；</li>\n<li><code>produces</code>：指定返回的内容类别；</li>\n<li><code>params</code>：指定 <code>request</code> 中必须包含某些引用数值时，才能让该方法处理；</li>\n<li><code>headers</code>：指定 <code>request</code> 中必须包含某些指定 <code>header</code> 值，才能让该方法处理请求；</li>\n</ul>\n<h2> 原型注解及 AOP</h2>\n<p>当我们使用 Spring 原型注解时，可以十分容易地创建一个指向所有具有特定构造型的类的切入点。</p>\n<p>比如我们如果想要衡量一个方法在 DAO 层中的执行时间，就可以充分利用 <code>@Repository</code> 注解的特点。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以上实例中，我们创建了一个切入点，该切入点会去匹配带有 <code>@Repository</code> 注解的类中的所有方法。然后我们用 <code>@Around</code> 通知来定位切入点，并确定被拦截的方法调用的执行时间。通过使用这个方式，我们就可以轻松地给每个应用程序添加日志记录、性能管理、审计以及其他行为。</p>\n<h2> 总结</h2>\n<p>好了，以上就主要介绍了 Spring 中的原型注释，并了解了它们各自所代表的意义。此外，还学习了如何使用组件扫描功能，从而告知 Spring 容器在何处能找到带有注解的类。</p>\n<p>如果你有更多的见解，欢迎评论留言，一起交流呀！</p>\n",
      "date_published": "2021-05-21T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Spring 系列"
      ]
    },
    {
      "title": "IoC 简介及入门实例（XML 版）",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/spring/20220428-ioc-xml.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/spring/20220428-ioc-xml.html",
      "summary": "IoC IoC（Inversion of Control），中文名又叫做控制反转。 针对当前书写代码时耦合度偏高的现状，大牛们提出了对应的解决方案。那就是在使用对象时，不要再通过主动使用 new 来创建对象，而是转变为由外部来提供对象。而这种将对象的创建控制权从程序转移到外部的思想就叫做控制反转。 总结来说，IoC 就是指在使用对象时由主动 new 创...",
      "content_html": "<h1> IoC 简介及入门实例（XML 版）</h1>\n<h2> IoC</h2>\n<p>IoC（<code>Inversion of Control</code>），中文名又叫做控制反转。</p>\n<p>针对当前书写代码时耦合度偏高的现状，大牛们提出了对应的解决方案。那就是在使用对象时，不要再通过主动使用 <code>new</code> 来创建对象，而是转变为由外部来提供对象。而这种将对象的创建控制权从程序转移到<strong>外部</strong>的思想就叫做<strong>控制反转</strong>。</p>\n<p>总结来说，IoC 就是指在使用对象时由主动 <code>new</code> 创建对象的方式转换为由外部提供，这个过程中对象的创建控制权由程序转移到了外部，这个思想就叫做控制反转。而 Spring 实现了 IoC 思想，它提供了一个容器用来充当 IoC 思想中的外部，而我们将这个容器称为 IoC 容器。</p>\n<p>IoC 容器专门负责对象创建、初始化等一系列工作，而这些由 IoC 容器所管理的对象我们统称为 <code>Bean</code>。</p>\n<h2> DI</h2>\n<p>DI（<code>Dependency Injection</code>），中文名又叫做依赖注入。</p>\n<p>IoC 容器虽然负责了创建和初始化对象等一系列工作，但实际上不同的对象之间或多或少存在着依赖关系，这个问题 IoC 是解决不了的，因此才有了 DI 的提出。依赖注入实现了容器中 Bean 与 Bean 之间依赖关系的建立。</p>\n<h2> 入门案例</h2>\n<p>接下来我们来看看 IoC 的一个入门实例。</p>\n<p>首先，我们创建一个 Maven 项目，如果不太熟悉如何创建，可以参考我之前的一篇教程 -&gt; <a href=\"https://cunyu1943.github.io/JavaPark/java/maven/maven-project-with-idea.html\" target=\"_blank\" rel=\"noopener noreferrer\">Maven 入门手册：使用 IDEA 创建 Maven 项目 | JavaPark</a></p>\n<p>接着我们分别创建 DAO 层和 Service 层接口，并实现其接口，最后则是在主程序入口中调用，创建后的项目结构如下：</p>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li><strong>DAO 层</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>Service 层</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 传统方式</h3>\n<p>我们先以传统的方式，通过手动创建对象的方式。通过创建一个 <code>BookService</code> 对象，调用接口后打印结果如下。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> IoC 方式</h3>\n<p>以上还是通过我们手动创建对象的方式，接下来看看利用 IoC 的方式。</p>\n<p>首先，要使用 IoC  的特性，我们需要在项目的 <code>pom.xml</code> 中引入 Spring 的依赖。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>接着我们创建配置文件，告知 IoC 容器需要管理的对象。</p>\n<p>在 <code>resource</code> 目录下创建 Spring 配置文件 <code>applicationContext.xml</code>，然后配置需要管理的 <code>BookService</code> 和 <code>BookDao</code> 对象。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>最后，我们创建一个主程序入口，通过从配置文件中获取对象，然后调用对应方法。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> DI 方式</h3>\n<p>之前的方式有一点不知道有没有注意，那就是在 Service 层中，无论是使用传统方式还是 IoC 的方式，我们都是通过手动创建的 <code>BookDao</code> 的对象，那有没有什么方式让我们不用通过手动创建 <code>BookDao</code> 对象的呢？答案是：有的，那就是 DI。接下来我们就来看看基于依赖注入的方式，来解决 <code>BookDao</code> 和 <code>BookService</code> 之间的依赖关系。</p>\n<p>DAO 层中的代码我们依旧保持不变，主要修改 Service 中的代码，去掉通过 <code>new</code> 方式来创建对象，修改后 Service 层 的代码如下。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>然后在 Spring 配置文件 <code>applicationContext</code> 中配置 <code>BookDao</code> 和 <code>BookService</code> 的关系。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>最后，用 IoC 方式中同样的方式，在主程序入口获取配置文件，然后获取对象调用接口即可。</p>\n<figure><figcaption></figcaption></figure>\n<h2> 总结</h2>\n<p>本文主要讲了 IoC 和 DI 的定义，然后对比了传统方式、IoC 方式和 DI 方式用来管理对象，而且最终三者的结果都是一样的，但其中还是有一点的区别。通过引入 Spring 中的 IoC 和 DI 特性，我们只需要配置相关配置即可，而不用再去通过 <code>new</code> 手动创建对象以及管理 Bean 之间的依赖关系。</p>\n<p>最后，关于本文的示例代码，我已经上传到远程仓库，有需要的小伙伴可以自取。</p>\n<blockquote>\n<p><a href=\"https://github.com/cunyu1943/java-learning-demos/tree/main/spring-ioc-demo\" target=\"_blank\" rel=\"noopener noreferrer\">Spring-IoC-Demo</a></p>\n</blockquote>\n",
      "date_published": "2022-04-28T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Spring 系列"
      ]
    },
    {
      "title": "Bean 详解",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/spring/20220429-bean.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/spring/20220429-bean.html",
      "summary": "Bean 的别名配置 接着上一篇文章中的 配置，其中配置了 id 属性，通过 id 属性我们就可以获取到对象。其实 配置也提供了 name 属性，它是用于定义 Bean 的别名，一个 Bean 的别名是可以有多个的，各个别名之间可以通过逗号（,）、分号（;）、空格（ ）分隔。 当我们要获取 Bean 时，既可以通过 id，也可以通过 name 获取。两...",
      "content_html": "<h1> Bean 详解</h1>\n<h2> Bean 的别名配置</h2>\n<p>接着上一篇文章中的 <code>&lt;bean&gt;</code> 配置，其中配置了 <code>id</code> 属性，通过 <code>id</code> 属性我们就可以获取到对象。其实 <code>&lt;bean&gt;</code> 配置也提供了 <code>name</code> 属性，它是用于定义 Bean 的别名，一个 Bean 的别名是可以有多个的，各个别名之间可以通过逗号（<code>,</code>）、分号（<code>;</code>）、空格（<code> </code>）分隔。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当我们要获取 Bean 时，既可以通过 <code>id</code>，也可以通过 <code>name</code> 获取。两者的区别在于 <code>id</code> 属性是惟一的，而 <code>name</code> 不是，因此在配置时，更加推荐使用 <code>id</code> 而非 <code>name</code> 防止因为重名而导致在获取 Bean 时混淆。</p>\n<p>通过 <code>id</code> 或者 <code>name</code> 获取 Bean 时，如果获取不到，此时程序将抛出异常 <code>NoSuchBeanDefinitionException</code>。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>一旦遇到以上错误，那么第一反应应该是是去 Spring 配置文件 <code>applicationContext.xml</code> 中查看对应 Bean 是否配置，或者在代码和配置中的 Bean 名是否匹配一致。</p>\n<h2> Bean 的作用范围</h2>\n<p>Bean 既然是一个对象，那么它也是有作用范围的。在 <code>&lt;bean&gt;</code> 配置时我们可以利用 <code>scope</code> 属性。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>singleton</code></td>\n<td>单例，也是 Bean 磨人的作用范围</td>\n</tr>\n<tr>\n<td><code>prototype</code></td>\n<td>非单例</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>以上两种配置的效果是一致的，因为 Bean 默认的作用范围是 <code>singleton</code>。接着我们创建两个 <code>BookService</code> 对象，然后打印出来，可以看到它们指向的是同一块内存。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>而如果我们将 Bean 的 <code>scope</code> 配置为 <code>prototype</code>，那么此时再创建两个 <code>BookService</code> 对象，然后对比它们的内存地址，会发现两者指向的并非指向同一块内存。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> Bean 实例化</h2>\n<h3> 构造方法</h3>\n<p>Bean 的本质是对象，所以可以使用构造方法完成。</p>\n<p>同样基于上一篇文章中的实例，配置好 <code>&lt;bean&gt;</code> 之后，然后在 <code>BookDao</code> 接口的实现中用构造方法来创建 Bean，最后在主程序入口中获取 Bean 之后调用方法，可以发现调用了构造方法。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 静态工厂方法</h3>\n<p>利用静态工厂方法对 Bean 进行实例化时，首先需要创建一个工厂类，并在工厂类中创建一个静态方法用于创建对象。然后在 Spring 的配置文件 <code>applicationContext.xml</code> 中配置静态工厂类并指定其中的方法，最后在主程序入口中获取 Bean 并调用方法即可。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 实例工厂对象方法</h3>\n<p>假设有一个接口和它的实现如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>我们创建一个实例工厂方法，注意此时我们是继承了 <code>FactoryBean</code> 接口，然后实现了其中的 <code>getObject()</code> 和 <code>getObjectType()</code> 两个方法。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>接着在 Spring 的配置文件中进行配置，需要注意此时的类应该是我们的工厂类 <code>PersonDaoFactoryBean</code>，而不是 <code>PersonDaoImpl</code>。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>最后在程序主入口中获取 Bean，然后调用方法即可。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> Bean 的生命周期</h2>\n<p>先来看看生命周期的定义，所谓生命周期就是指从创建到消亡的完整过程，类比到我们人身上，生命周期就是从我们出生到死亡的这个过程。而 Bean 的生命周期就指的是 Bean 从创建到销毁的整体过程。</p>\n<p>Bean 的生命周期主要分为三个阶段：</p>\n<ul>\n<li><strong>初始化容器</strong></li>\n<li><strong>使用 Bean</strong></li>\n<li><strong>销毁容器</strong></li>\n</ul>\n<p>初始化容器阶段，主要执行的操作有：创建对象（内存分配）、执行构造方法、执行属性注入（<code>set</code> 操作）、执行 Bean 初始化方法。</p>\n<p>使用 Bean 阶段，主要是去执行业务操作。</p>\n<p>销毁容器阶段，主要是执行 Bean 的销毁方法。</p>\n<h2> 总结</h2>\n<p>以上就是今天关于 Bean 的内容了，主要从 Bean 的别名配置、作用范围、如何进行实例化以及声明周期 4 个方面着手，学习了 Bean 的相关操作。</p>\n",
      "date_published": "2022-04-29T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Spring 系列"
      ]
    },
    {
      "title": "Spring",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/spring/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/spring/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Spring Boot",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/framework/springboot/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/framework/springboot/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "计算机网络面试知识点",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/interview/knowledge/20201231-network.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/interview/knowledge/20201231-network.html",
      "summary": "1. 计算机网络基础 1.1 主机间的通信方式 1. 客户端-服务器（C/S） 客户端是服务的请求放，服务器是服务的提供方。 2. 对等（P2P） 不用区分谁是客户端，谁是服务器，双方都能够向对方请求与提供服务。 1.2 电路 & 分组交换 1. 分组交换 每个分组由首部和尾部组成，包含源地址和目的地址等控制信息，在同一个传输线路上同时传输多个分组互不...",
      "content_html": "<h1> 计算机网络面试知识点</h1>\n<h2> 1. 计算机网络基础</h2>\n<h3> 1.1 主机间的通信方式</h3>\n<ol>\n<li><strong>客户端-服务器（C/S）</strong></li>\n</ol>\n<p>客户端是服务的请求放，服务器是服务的提供方。</p>\n<ol start=\"2\">\n<li><strong>对等（P2P）</strong></li>\n</ol>\n<p>不用区分谁是客户端，谁是服务器，双方都能够向对方请求与提供服务。</p>\n<h3> 1.2 电路 &amp; 分组交换</h3>\n<ol>\n<li><strong>分组交换</strong></li>\n</ol>\n<p>每个分组由首部和尾部组成，包含源地址和目的地址等控制信息，在同一个传输线路上同时传输多个分组互不影响，因此在同一条传输线路上允许同时传输多个分组，即分组交换不会占用传输线路。</p>\n<ol start=\"2\">\n<li><strong>电路交换</strong></li>\n</ol>\n<p>电路交换用于电话通讯系统，两个用户之间建立通信前需要有一条专用的物理链路，而且在通信过程中始终占用该链路。由于通信过程中不可能一直在使用传输线路，因此电路交换对线路利用率很低，通常不到 10%.</p>\n<h3> 1.3 时延</h3>\n<ol>\n<li><strong>排队时延</strong></li>\n</ol>\n<p>分组在路由器的输入和输出队列中排队等待所需时间，取决于当前网络的通信量；</p>\n<ol start=\"2\">\n<li><strong>处理时延</strong></li>\n</ol>\n<p>主机或路由器接收到分组时进行处理所需时间，一般这些处理包括分析首部、从分组中提取数据、进行差错校验或查找适当路由等；</p>\n<ol start=\"3\">\n<li><strong>传输时延</strong></li>\n</ol>\n<p>主机或路由器传输数据帧所需时间：</p>\n<p v-pre=\"\" class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>y</mi><mo>=</mo><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>v</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mi>i</mi><mi>t</mi><mi mathvariant=\"normal\">/</mi><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\ndelay = length(bit)/v(bit/s)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">bi</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">bi</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>其中 <code>length</code> 表示数据帧的长度，<code>v</code> 表示传输速率；</p>\n<ol start=\"4\">\n<li><strong>传播时延</strong></li>\n</ol>\n<p>电磁波在信道中传输所需时间，电磁波传播速度无限接近于光速：</p>\n<p v-pre=\"\" class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>y</mi><mo>=</mo><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>v</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi mathvariant=\"normal\">/</mi><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\ndelay = length(m)/v(m/s)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>其中 <code>length</code> 表示信道的长度，<code>v</code> 表示电磁波在信道中的传播速度；</p>\n<h3> 1.4 体系结构</h3>\n<figure><figcaption></figcaption></figure>\n<table>\n<thead>\n<tr>\n<th>体系结构</th>\n<th>协议</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>物理层</td>\n<td>RJ45、CLOCK、IEEE802.3（中继器、集线器）</td>\n</tr>\n<tr>\n<td>数据链路</td>\n<td>PPP、FR、HDLC、VLAN、MAC（网桥、交换机）</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP（路由器）</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>TCP（HTTP/S、FTP、POP3、SMTP、TENET、SSH）、UDP（BOOTP、NTP、DHCP）、SPX</td>\n</tr>\n<tr>\n<td>会话层</td>\n<td>NFS、SQL、NETBIOS、RPC</td>\n</tr>\n<tr>\n<td>表示层</td>\n<td>JPEG、MPEG、ASII</td>\n</tr>\n<tr>\n<td>应用层</td>\n<td>FTP、DNS、Telenet、SMTP、HTTP、WWW、NFS</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><strong>OSI 七层体系结构</strong></li>\n</ol>\n<p>为把在一个网络结构下开发的系统与在另一个网络结构下开发的系统互联起来，以实现更高一级的应用，使异种机之间的通信成为可能，便于网络结构标准化，国际标准化组织（ISO）于1984年形成了开放系统互连参考模型OSI/RM（Open Systems Interconnection Reference Model，简称OSI）的正式文件。</p>\n<ul>\n<li>\n<p><strong>物理层（Physical，PH）：</strong> 传递信息需要利用一些物理传输媒体，如双绞线、同轴电缆、光纤等。物理层的任务就是为上层提供一个物理的连接，以及该物理连接表现出来的机械、电气、功能和过程特性，实现透明的比特流传输。在这一层，数据还没有组织，仅作为原始的比特流提交给上层——数据链路层。</p>\n</li>\n<li>\n<p><strong>数据链路层（Data-link，D）</strong>：数据链路层负责在2个相邻的结点之间的链路上实现无差错的数据帧传输。每一帧包括一定的数据和必要的控制信息，在接收方接收到数据出错时要通知发送方重发，直到这一帧无差错地到达接收结点，数据链路层就是把一条有可能出错的实际链路变成让网络层看起来像不会出错的数据链路。实现的主要功能有：帧的同步、差错控制、流量控制、寻址、帧内定界、透明比特组合传输等。</p>\n</li>\n<li>\n<p><strong>网络层（Network，N）</strong>：网络中通信的2个计算机之间可能要经过许多结点和链路，还可能经过几个通信子网。网络层数据传输的单位是分组（Packet）。网络层的主要任务是为要传输的分组选择一条合适的路径，使发送分组能够正确无误地按照给定的目的地址找到目的主机，交付给目的主机的传输层。</p>\n</li>\n<li>\n<p><strong>传输层（Transport，T）</strong>：传输层的主要任务是通过通信子网的特性，最佳地利用网络资源，并以可靠与经济的方式为2个端系统的会话层之间建立一条连接通道，以透明地传输报文。传输层向上一层提供一个可靠的端到端的服务，使会话层不知道传输层以下的数据通信的细节。传输层只存在端系统中，传输层以上各层就不再考虑信息传输的问题了。</p>\n</li>\n<li>\n<p><strong>会话层（Session，S）</strong>：在会话层以及以上各层中，数据的传输都以报文为单位，会话层不参与具体的传输，它提供包括访问验证和会话管理在内的建立以及维护应用之间的通信机制。如服务器验证用户登录便是由会话层完成的。</p>\n</li>\n<li>\n<p><strong>表示层（Presentation，P）</strong>：这一层主要解决用户信息的语法表示问题。它将要交换的数据从适合某一用户的抽象语法，转换为适合OSI内部表示使用的传送语法。即提供格式化的表示和转换数据服务。数据的压缩和解压缩、加密和解密等工作都由表示层负责。</p>\n</li>\n<li>\n<p><strong>应用层（Application，A）</strong>：这是OSI参考模型的最高层。应用层确定进程之间通信的性质以满足用户的需求，以及提供网络与用户软件之间的接口服务。</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>五层协议</strong></li>\n</ol>\n<p>我们日常网络中使用的体系结构，总共可以分为 5 层，分别是：</p>\n<ul>\n<li><strong>应用层</strong> ：为特定应用程序提供数据传输服务，例如 HTTP、DNS 等协议。数据单位为报文。</li>\n<li><strong>传输层</strong> ：为进程提供通用数据传输服务。由于应用层协议很多，定义通用的传输层协议就可以支持不断增多的应用层协议。运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议 UDP，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。TCP 主要提供完整性服务，UDP 主要提供及时性服务。</li>\n<li><strong>网络层</strong> ：为主机提供数据传输服务。而传输层协议是为主机中的进程提供数据传输服务。网络层把传输层传递下来的报文段或者用户数据报封装成分组。</li>\n<li><strong>数据链路层</strong> ：网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧。</li>\n<li><strong>物理层</strong> ：考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>TCP/IP</strong></li>\n</ol>\n<p>不严格遵循 OSI 分层概念，只有四层，相当于将五层协议中的数据链路层和物理层合并为网络结构层。</p>\n<h2> 2. 五层协议详解</h2>\n<h3> 2.1 物理层</h3>\n<p>物理层上传送的数据单位是比特，其作用是实现相邻计算机节点间比特流的透明传送，尽可能屏蔽调具体传输介质和屋里设备的差异。根据信息在传输线上的传输方向，可以分为如下三种通信方式：</p>\n<ul>\n<li>单工通信：单向传输</li>\n<li>半双工通信：双向交替传输</li>\n<li>全双工通信：双向同时传输</li>\n</ul>\n<h3> 2.2 链路层</h3>\n<p>两台主机之间的数据传输，总是在一段一段的链路上进行传送的，此时就需要使用专门的链路层协议。在两个相邻节点间传输数据时，数据链路层将网络层交下来的 IP 数据包组装成帧，在两个相邻节点间的链路上传送帧，每帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。</p>\n<h3> 2.3 网络层</h3>\n<p>互联网的核心，向上提供数据报服务，通过 IP 协议将异构的物理网络连接起来。其任务是选择合适的网间路由和交换节点，从而确保计算机通信的数据及时传送，配套使用的有如下三个协议：</p>\n<ul>\n<li><strong>地址解析协议 ARP</strong></li>\n<li><strong>网际控制报文协议 ICMP</strong></li>\n<li><strong>网际组管理协议 IGMP</strong></li>\n</ul>\n<h3> 2.4 传输层</h3>\n<p>传输层提供了进程间的逻辑通信，负责向两台主机进程之间的通信提供通用的 <strong>数据传输服务</strong>，向高层用户屏蔽网络层的核心细节，这一层中主要涉及 UDP 和 TCP 两个协议。</p>\n<h3> 2.5 应用层</h3>\n<p>应用层的任务是通过应用进程之间的交互来完成特定网络应用，应用层协议定义的是应用进程间的通信和交互的规则。</p>\n<p>对于不同的网络应用需要不同的应用层协议，常见的有 DNS、HTTP、SMTP 协议等；</p>\n<h2> 3. HTTP</h2>\n<h3> 3.1 HTTP 基础</h3>\n<ol>\n<li><strong>URI（统一资源标识符）</strong></li>\n</ol>\n<blockquote>\n<p>URI = URL + URN</p>\n</blockquote>\n<p>URL：统一资源 <strong>定位</strong> 符，标示一个具体的资源位置</p>\n<p>URN：统一资源名称</p>\n<ol start=\"2\">\n<li><strong>请求报文</strong></li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<p>主要由以下三部分构成：</p>\n<ul>\n<li><strong>请求行</strong>：包括请求方法、URL、协议/版本</li>\n<li><strong>请求头</strong>：<code>Request Header</code></li>\n<li><strong>请求正文</strong></li>\n</ul>\n<ol start=\"3\">\n<li><strong>响应报文</strong></li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<p>主要由以下三部分构成：</p>\n<ul>\n<li><strong>状态行</strong></li>\n<li><strong>响应头</strong></li>\n<li><strong>响应正文</strong></li>\n</ul>\n<h3> 3.2 HTTP 方法</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>GET</code></td>\n<td>请求指定页面信息，并返回实体主体</td>\n</tr>\n<tr>\n<td><code>POST</code></td>\n<td>传输实体主体，向指定资源提交数据进行处理请求，数据被包含在请求体中，可能会导致新资源的建立和/或已有资源的修改</td>\n</tr>\n<tr>\n<td><code>PUT</code></td>\n<td>从客户端向服务器传送的数据取代指定文档的内容，上传文件 ，不带验证机制，存在安全性问题</td>\n</tr>\n<tr>\n<td><code>DELETE</code></td>\n<td>请求服务器删除指定页面，一般是删除文件</td>\n</tr>\n<tr>\n<td><code>HEAD</code></td>\n<td>获取报文首部，类似于 <code>GET</code>，但不返回报文实体主体部分，主要用于确认 URL 的有效性以及资源更新时间等</td>\n</tr>\n<tr>\n<td><code>PATCH</code></td>\n<td>对资源进行部分修改</td>\n</tr>\n<tr>\n<td><code>OPTIONS</code></td>\n<td>查询支持的方法，查询指定的 URL 能支持的方法，返回 <code>Allow: GET,POST,HEAD,OPTIONS</code> 等内容</td>\n</tr>\n<tr>\n<td><code>CONNECT</code></td>\n<td>要求在于代理服务器通信时建立隧道，使用 SSL 和 TLS 协议将通信内容加密后经网络隧道传输</td>\n</tr>\n<tr>\n<td><code>TRACE</code></td>\n<td>追踪路径，服务器将通信路径返回给客户端</td>\n</tr>\n</tbody>\n</table>\n<h3> 3.3 HTTP 状态码</h3>\n<p>服务器返回的响应报文中的第一行是状态行，包含状态码以及原因短语，用于告知客户端请求的结果，主要分为如下类型，常见的状态码如下：</p>\n<ul>\n<li><strong>1xx - 信息型</strong>：服务器收到请求，需要请求者继续操作；</li>\n<li><strong>2xx - 成功型</strong>：请求成功收到，理解并处理；</li>\n<li><strong>3xx - 重定向</strong>：需要进一步操作以完成请求；</li>\n<li><strong>4xx - 客户端错误</strong>：请求包含语法错误或无法完成请求；</li>\n<li><strong>5xx - 服务器错误</strong>：服务器在处理请求的过程中发生了错误；</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>状态</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100</td>\n<td><code>Continue</code></td>\n<td>到目前为止很正常，客户端能继续发送请求或忽略该响应</td>\n</tr>\n<tr>\n<td>200</td>\n<td><code>OK</code></td>\n<td>表示请求成功</td>\n</tr>\n<tr>\n<td>204</td>\n<td><code>No Content</code></td>\n<td>请求已经成功处理，但返回的响应报文不含实体的主体部分，一般只需要从客户端向服务器发送信息，而无需返回数据时使用</td>\n</tr>\n<tr>\n<td>206</td>\n<td><code>Partial Content</code></td>\n<td>表示客户端进行范围请求，响应报文包含由 <code>Content-Range</code> 指定范围的实体内容</td>\n</tr>\n<tr>\n<td>301</td>\n<td><code>Moved Permanently</code></td>\n<td>永久性重定向</td>\n</tr>\n<tr>\n<td>302</td>\n<td><code>Found</code></td>\n<td>临时性重定向</td>\n</tr>\n<tr>\n<td>303</td>\n<td><code>See Other</code></td>\n<td>和 302 功能相同，但 303 明确要求客户端应该采用 <code>GET</code> 方法获取资源</td>\n</tr>\n<tr>\n<td>304</td>\n<td><code>Not Modified</code></td>\n<td>若请求报文首部包含一些条件，如 <code>If-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since</code>，若不满足条件，则服务器返回 304</td>\n</tr>\n<tr>\n<td>307</td>\n<td><code>Temporary Redirect</code></td>\n<td>临时重定向，类似于 302，但 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法</td>\n</tr>\n<tr>\n<td>400</td>\n<td><code>Bad Request</code></td>\n<td>请求报文中存在语法错误</td>\n</tr>\n<tr>\n<td>401</td>\n<td><code>Unauthorized</code></td>\n<td>该状态码表示发送的请求需要有认证信息</td>\n</tr>\n<tr>\n<td>403</td>\n<td><code>Forbidden</code></td>\n<td>请求被拒绝</td>\n</tr>\n<tr>\n<td>404</td>\n<td><code>Not Found</code></td>\n<td>请求的页面不存在</td>\n</tr>\n<tr>\n<td>500</td>\n<td><code>Internal Server Error</code></td>\n<td>服务器正在执行请求时发生错误</td>\n</tr>\n<tr>\n<td>503</td>\n<td><code>Service Unavailable</code></td>\n<td>服务器暂时处于超负载或正进行停机维护，现在无法处理请求</td>\n</tr>\n</tbody>\n</table>\n<h3> 3.4 HTTP 首部</h3>\n<p>有 4 中类型的首部字段：</p>\n<ul>\n<li><strong>通用首部字段</strong></li>\n<li><strong>请求首部字段</strong></li>\n<li><strong>响应首部字段</strong></li>\n<li><strong>实体首部字段</strong></li>\n</ul>\n<h3> 3.5 GET vs POST</h3>\n<ol>\n<li><strong>作用不同</strong></li>\n</ol>\n<p><code>GET</code> 用于获取资源，一般是查询，而 <code>POST</code> 用于传输实体主体，一般是提交；</p>\n<ol start=\"2\">\n<li><strong>参数不同</strong></li>\n</ol>\n<p><code>GET</code> 和 <code>POST</code> 的请求都能使用额外参数，但 <code>GET</code> 的参数以查询字符串出现在 URL 中，不会对服务器中的内容产生作用，但 <code>POST</code> 的参数存储在实体主体中。但是 <code>POST</code> 的安全性也不能说很高，我们仍然可以用抓包工具来进行查看。另一方面，URL 只支持 ASCII，因此 GET 的参数中若有中文等字符时需要先进行编码，但是 POST 的参数支持标准字符集；</p>\n<ol start=\"3\">\n<li><strong>安全性</strong></li>\n</ol>\n<p>GET 方法是安全的，因为它不会改变服务器的状态。但是 POST  非安全，因为 POST 的目的是传送实体主体内容，内容可能是用户上传的表单数据，一旦上传成功，服务器就可能把该数据存入数据库，此时状态也就发生了改变。</p>\n<p>安全的方法：<code>GET、HEAD、OPTIONS</code>；</p>\n<p>不安全的方法：<code>POST、PUT、DELETE</code>；</p>\n<ol start=\"4\">\n<li><strong>幂等性</strong></li>\n</ol>\n<p>幂等的 HTTP 方法，同样的请求被执行一次和被连续执行多次的效果是一样的，服务器的状态也一样，即幂等的方法不具有副作用，因此所有安全的方法也都是幂等的。</p>\n<p>一般来说，<code>GET、HEAD、PUT、DELETE</code> 等方法都是幂等的，但 <code>POST</code> 不是。</p>\n<ol start=\"5\">\n<li><strong>可缓存</strong></li>\n</ol>\n<p>若要对响应进行缓存，则应该满足一下条件：</p>\n<ul>\n<li>请求报文的 HTTP 方法本身是可缓存的，包括 <code>GET、HEAD</code>，但是 <code>PUT、DELETE</code> 不可缓存，<code>POST</code> 在大多数情况下是不可缓存的；</li>\n<li>响应报文的状态码是可缓存的，包括：200、203、204、206、300、301、404、405、410、411、501；</li>\n<li>响应报文的 <code>Cache-Control</code> 首部字段未指定则不进行缓存；</li>\n</ul>\n<h2> 4. HTTP 和 HTTPS</h2>\n<h3> 4.1 什么是 HTTP/S 协议？</h3>\n<ol>\n<li><strong>HTTP</strong></li>\n</ol>\n<p>HTTP（Hyper Text Transfer Protocol），<strong>超文本传输协议</strong>，它是从 Web 服务器传输超文本标记语言（HTML）到本地浏览器的传送协议。</p>\n<p>HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法；</p>\n<ol start=\"2\">\n<li><strong>HTTPS</strong></li>\n</ol>\n<p>HTTPS（Hyper Text Transfer Protocol over Secure Socket Layer），以安全为目标的 HTTP 通道，通俗来讲就是 HTTP 的安全版，加入了 SSL/TLS 层，通过 SSL 证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密。HTTPS 的安全基础是 SSL，其主要作用有如下两种：</p>\n<ul>\n<li>建立一个信息安全通道，来保证数据传输的安全；</li>\n<li>确认网站真实性；</li>\n</ul>\n<h3> 4.2 HTTP/S 特点</h3>\n<ol>\n<li><strong>HTTP</strong></li>\n</ol>\n<ul>\n<li>HTTP 支持 C/S 模式，是一种 <strong>请求/响应模式</strong> 的协议；</li>\n<li><strong>简单快速</strong>：客户向服务器请求服务时，只需要传送请求方法和路径，常用方法有 <code>GET、POST、HEAD</code>；</li>\n<li><strong>灵活</strong>：HTTP 允许传输任意类型的数据对象，传输数据的类型由 <code>Content - Type</code> 来标记；</li>\n<li><strong>无连接</strong>：限制每次连接只处理一个请求，服务器处理完请求并受到客户的应答后，会断开连接，但是不利于客户端和服务器保持会话连接；</li>\n<li><strong>无状态</strong>：值协议对于事务处理没有回忆，后续处理如果需要前面的信息，则必须重传；</li>\n</ul>\n<h3> 4.2 HTTP/S 原理</h3>\n<ol>\n<li><strong>HTTP</strong></li>\n</ol>\n<p>HTTP 是 <strong>基于 TCP/IP 通信协议来传递数据的协议</strong>，传输的数据类型有 HTML 文件、图片文件、查询结果等。此外，HTTP 协议一般用于 <code>B/S</code> 架构，浏览器作为 HTTP 客户端通过 URL 向 HTTP 服务器即 Web 服务器发送所有请求；</p>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>HTTPS</strong></li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<p>如上图，使用 HTTPS 传输数据的流程如下：</p>\n<ol>\n<li>首先客户端通过 URL 访问服务器建立 SSL 连接；</li>\n<li>服务器收到客户端请求后，将网站支持的证书信息（其中包含公钥）传送一份给客户端；</li>\n<li>客户端的服务器开始协商 SSL 连接的安全等级，即信息加密的等级；</li>\n<li>客户端的浏览器根据双方同意的安全等级，建立会话秘钥，然后利用网站的公钥将会话秘钥加密，并传送给网站；</li>\n<li>服务器利用自己的秘钥解密出会话秘钥；</li>\n<li>服务器利用会话秘钥加密与客户端之间的通信；</li>\n</ol>\n<h3> 4.3 HTTP 和 HTTPS 的区别</h3>\n<p>HTTP 协议传输的数据都是未经加密的，即明文的，因此使用 HTTP 协议传输隐私信息不安全。为了保证隐私数据能够加密传输，于是使用 SSL 协议用于对 HTTP 协议传输的数据进行加密，即 HTTPS；</p>\n<p>HTTPS 协议是 HTTP + SSL 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 更加安全，两者的区别主要有：</p>\n<ol>\n<li>HTTPS 需要到 CA 申请证书，一般免费证书较少，因此需要一定费用；</li>\n<li>HTTP 是超文本传输信息，信息是明文传输；HTTPS 是具有安全性的 SSL 加密传输协议；</li>\n<li>HTTP 和 HTTPS 使用的是完全不同的连接方式，HTTP 默认使用 <code>80</code> 端口，而 HTTPS 默认使用 <code>443</code> 端口；</li>\n<li>HTTP 的连接简单，是无状态的；而 HTTPS 是 SSL + HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全；</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>HTTP</th>\n<th>HTTPS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>协议</td>\n<td>基于 TCP，明文传输，<strong>客户端与服务器端均无法验证对方身份</strong></td>\n<td>HTTP + SSL，运行于 TCP 之上，<strong>添加了加密和认证机制的 HTTP</strong></td>\n</tr>\n<tr>\n<td>端口</td>\n<td>80</td>\n<td>443</td>\n</tr>\n<tr>\n<td>资源消耗</td>\n<td>较少</td>\n<td>由于加解密操作，将消耗更多的 CPU 和内存资源</td>\n</tr>\n<tr>\n<td>开销</td>\n<td>无需证书</td>\n<td>需要证书，一般是向认证机构购买</td>\n</tr>\n<tr>\n<td>加密机制</td>\n<td>无</td>\n<td>共享秘钥加密和公开秘钥加密并用的混合加密机制</td>\n</tr>\n<tr>\n<td>安全性</td>\n<td>弱</td>\n<td>强</td>\n</tr>\n</tbody>\n</table>\n<h2> 5. TCP VS UDP</h2>\n<h3> 5.1 TCP 和 UDP 的特点</h3>\n<ol>\n<li><strong>TCP</strong></li>\n</ol>\n<p>TCP（传输控制协议，Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供 <strong>全双工通信，面向字节流</strong> （将应用层传下来的报文当做字节流，将字节流组织为大小不等的数据块），每条 TCP 连接只能是 <strong>点对点（一对一）</strong>，总结起来有如下特点：</p>\n<ul>\n<li><strong>面向连接</strong></li>\n<li><strong>仅支持单播</strong></li>\n<li><strong>面向字节流</strong></li>\n<li><strong>可靠性</strong></li>\n<li><strong>提供拥塞控制以及全双工通信</strong></li>\n</ul>\n<ol start=\"2\">\n<li><strong>UDP</strong></li>\n</ol>\n<p>UDP（用户数据表协议，User Datagram Protocol）是面向无连接的，尽最大可能交付，无拥塞控制，<strong>面向报文</strong>（对应用层中传下来的报文不合并也不拆分，只添加 UDP 首部），支持 <strong>一对一、一对多、多对一和对多点的交互通信</strong>，总结起来有如下特点：</p>\n<ul>\n<li><strong>面向无连接</strong></li>\n<li><strong>有单播、多播、广播的功能</strong></li>\n<li><strong>面向报文</strong></li>\n<li><strong>不可靠性</strong></li>\n<li><strong>头部开销小，传输数据时高效</strong></li>\n</ul>\n<h3> 5.2 TCP VS UDP</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>TCP</th>\n<th>UDP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>是否连接</td>\n<td>面向连接</td>\n<td>无连接</td>\n</tr>\n<tr>\n<td>是否可靠</td>\n<td>可靠传输，使用流量控制和拥塞控制</td>\n<td>不可靠传输，不使用流量控制和拥塞控制</td>\n</tr>\n<tr>\n<td>连接对象个数</td>\n<td>只能一对一</td>\n<td>支持一对一、一对多、多对一和多对多</td>\n</tr>\n<tr>\n<td>传输方式</td>\n<td>面向字节流</td>\n<td>面向报文</td>\n</tr>\n<tr>\n<td>首部开销</td>\n<td>首部最小 20 字节，最大 60 字节</td>\n<td>首部开销小，仅 8 字节</td>\n</tr>\n<tr>\n<td>场景</td>\n<td>传输可靠，比如文件传输等</td>\n<td>实时应用，比如视频会议、直播等</td>\n</tr>\n</tbody>\n</table>\n<h3> 5.3 三次握手以及四次挥手</h3>\n<ol>\n<li><strong>三次握手</strong></li>\n</ol>\n<ul>\n<li><strong>第一次握手</strong>：客户端向服务端发送连接请求报文段，报文段中含有自身的数据通讯初始序号。请求发送后，客户端进入 <code>SYN-SENT</code> 状态；</li>\n<li><strong>第二次握手</strong>：服务端接收到来自客户端的连接请求报文，如果同意就会发送一个响应，响应中也会包含自身的数据通讯初始序号，发送完成后进入 <code>SYN-RECEIVED</code> 状态；</li>\n<li><strong>第三次握手</strong>：客户端收到来自服务端同意连接的响应后，再次向服务端发送一个确认报文。客户端发送完该报文后进行 <code>ESTABLISHED</code> 状态，服务端收到该应答后也进入 <code>ESTABLISHED</code> 状态，此时连接就建立成功了。</li>\n</ul>\n<figure><figcaption>源自 ThinkWon 博客</figcaption></figure>\n<ol start=\"2\">\n<li><strong>四次挥手</strong></li>\n</ol>\n<ul>\n<li><strong>第一次挥手：</strong> 一旦客户端 A 认为数据发送完成，则向服务端 B 发送请求释放请求；</li>\n<li><strong>第二次挥手：</strong> 服务端 B 收到连接释放请求后，将告知应用层释放 TCP 连接，接着发送 ACK 包并进入 <code>CLOST_WAIT</code> 状态，此时表明 A 到 B 的连接已经释放，不再接收 A 发的数据。但是 TCP 是双向通信的，所以 B 此时仍可以向 A 发送数据；</li>\n<li><strong>第三次挥手：</strong> 若 B 此时还有未发送完的数据，就会继续发送直到完毕，然后向 A 发送连接释放请求，接着 B 进入 <code>LAST-ACK</code> 状态；</li>\n<li><strong>第四次挥手：</strong> A 收到释放请求后，向 B 发送确认应答，此时 A 进入 <code>TIME-WAIT</code> 状态并持续一段时间（一般是 2MSL），若在该时间段内没有来自 B 的重发请求，就进入 <code>CLOSED</code> 状态。当 B 收到确认应答后，也进入 <code>CLOSE</code> 状态。</li>\n</ul>\n<figure><figcaption>图源自 Thinkwon 博客</figcaption></figure>\n<h2> 6. Session vs Cookie</h2>\n<h3> 6.1 Session 和 Cookie 的定义</h3>\n<h4> 6.1.1 什么是 cookie</h4>\n<p><code>cookie</code> 是由 Web 服务器保存在用户浏览器上的小文件（<code>key-value</code> 格式），包含用户相关信息。客户端向服务器发起请求，若服务器需要记录该用户状态，则使用 <code>response</code> 向客户端浏览器颁发一个 <code>cookie</code>。客户端浏览器将 <code>cookie</code> 保存起来，当浏览器再请求该网站时，浏览器将请求的网址连同该 <code>cookie</code> 一起提交给服务器，服务器检查该 <code>cookie</code>，以此来确认用户身份。</p>\n<h4> 6.1.2 什么是 session</h4>\n<p><code>session</code> 依赖于 <code>cookie</code> 实现，<code>session</code> 是服务端对象。<code>session</code> 浏览器和服务器会话过程中，服务器分配的一块存储空间。服务器默认为浏览器在 <code>cookie</code> 中设置 <code>sessionid</code>，浏览器在向服务器请求过程中传输 <code>cookie</code> 包含 <code>sessionid</code>，服务器将根据 <code>sessionid</code> 获取出会话中存储的信息，然后确认会话的身份信息。</p>\n<h3> 6.2 Session 和 Cookie 的区别</h3>\n<ol>\n<li><strong>存储空间</strong>：单个 <code>cookie</code> 所保存的数据不能超过 4k，许多浏览器都会限制一个站点最多能保存的 <code>cookie</code> 数（一般是 20），但是 <code>session</code> 没有该限制；</li>\n<li><strong>占用服务器资源</strong>：<code>session</code> 一定时间保存在服务器上，当访问增多时，占用服务器性能，考虑到服务器性能方面，应当使用 <code>cookie</code>；</li>\n<li><strong>存储位置与安全性</strong>：<code>cookie</code> 数据放在客户端，安全性较差，<code>session</code> 数据放在服务器上，安全性相对较高；</li>\n</ol>\n<h2> 7. 常见面试题</h2>\n<h3> 7.1 TCP 连接为什么不是 2 次，而是 3 次？</h3>\n<p>因为考虑到连接时丢包的问题，如果是 2 次，那么第二次握手时如果服务器响应给客户端的确认报文段丢失，但此时服务器端已经准备好接收数据，而客户端一直没收到服务端的确认报文，客户端就不清楚服务端是否已经准备好了。这样一来，客户端既不会向服务端发送数据，也会忽略服务端所发送过来的数据。</p>\n<h3> 7.2 发出 4 次挥手的确认报文后为什么要等 2MSL 的时间才能释放 TCP 连接？</h3>\n<p>同样是出于考虑丢包问题，若第四次挥手的报文丢失，服务器未确认 Ack 报文就会重发第三次挥手的报文，若报文一来一去的最常时间就是 2 MSL，所以需要等这么长时间来确认服务端确实已经收到。</p>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "求职面试"
      ]
    },
    {
      "title": "Spring 面试知识点",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/interview/knowledge/20210103-spring.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/interview/knowledge/20210103-spring.html",
      "summary": "1. Spring 特点 Spring 主要有如下特点： 1. 轻量级：Spring 是非侵入式，其中的对象不依赖 Spring 的特定类； 2. 控制反转（IoC）：通过 IoC，促进了低耦合，一个对象依赖的其他对象通过被动的方式传递进来，而不用该对象主动创建或查找； 3. 面向切面（AOP）：支持面向切面编程，将应用业务逻辑层和系统服务层分开； 4...",
      "content_html": "<h1> Spring 面试知识点</h1>\n<h2> 1. Spring 特点</h2>\n<p>Spring 主要有如下特点：</p>\n<ol>\n<li><strong>轻量级</strong>：Spring 是非侵入式，其中的对象不依赖 Spring 的特定类；</li>\n<li><strong>控制反转（IoC）</strong>：通过 IoC，促进了低耦合，一个对象依赖的其他对象通过被动的方式传递进来，而不用该对象主动创建或查找；</li>\n<li><strong>面向切面（AOP）</strong>：支持面向切面编程，将应用业务逻辑层和系统服务层分开；</li>\n<li><strong>容器</strong>：包含并管理应用对象的配置以及生命周期，此时 Spring 就相当于一个容器；</li>\n<li><strong>框架集合</strong>：能将简单的组件进行配置，组合成为更为复杂的应用；在 Spring 中，应用对象被声明式地组合在一个 XML 文件中；此外，Spring 也提供了事务管理、 持久化框架集成等基础功能，将应用逻辑的开发留给开发者；</li>\n</ol>\n<h2> 2. Spring 核心组件</h2>\n<p>\nSpring 是一个分层架构，主要由如下 7 大模块所构成。Spring 模块位于核心容器，定义了创建、配置和管理 Bean 的方式。</p>\n<ol>\n<li><strong>Spring Core</strong>：提供 Spring 框架基本功能，主要组件是 BeanFactory，是工厂模式的实现，通过 IOC 机制将应用程序的配置和依赖性规范与实际的应用程序代码分开。</li>\n<li><strong>Spring Context</strong>：一个配置文件，给 Spring 框架提供上下文信息，上下文包括 JNDI、EJB、电子邮件、国际化、校验和调度等企业服务。</li>\n<li><strong>Spring AOP</strong> ：通过配置管理特性，Spring AOP 直接将 AOP（面向切面）功能集成到 Spring 框架。从而我们能够十分方便的使用 Spring 框架来管理任何支持 AOP 的对象。模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用该组件，可以不依赖其他组件九江声明性事务管理集成到应用程序中。</li>\n<li><strong>Spring DAO</strong>：JDBC DAO 抽象层提供了有意义的异常层次结构，可以用来管理异常处理和不同数据库供应商抛出的错误信息。异常层次结构简化了错误处理，而且极大降低了需要编写的异常代码数量。Spring DAO 面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</li>\n<li><strong>Spring ORM</strong>：Spring 框架中插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map，这些都遵从 Spring 的通用事务和 DAO 异常层次结构；</li>\n<li><strong>Spring Web</strong>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文，所以 Spring 框架支持与 Jakarta Structs 的集成。同时该模块还简化了处理多部分请求以及请求参数绑定到域对象的工作。</li>\n<li><strong>Spring MVC</strong>：MVC 是一个全功能的构建 Web 应用的 MVC 实现，可以通过策略接口对 MVC 框架实现高度可配置。而且 MVC 还容纳了 JSP、Velocity、Tiles 等视图技术。</li>\n</ol>\n<h2> 3. Spring 常用注解</h2>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@Controller</code></td>\n<td>1. 用于标注控制层组件<br>2. 用于标记一个类，表示它是一个 SpringMVC Controller 对象<br>3. 分发处理器将扫描使用了该注解的类的方法，同时检测方法是否使用 <code>@RequestMapping</code><br>4. 能够将 <code>Request</code> 请求 <code>header</code> 部分的值绑定到方法的参数上</td>\n</tr>\n<tr>\n<td><code>@RestController</code></td>\n<td>相当于 <code>@Component</code> 与 <code>@ResponseBody</code> 的组合</td>\n</tr>\n<tr>\n<td><code>@Component</code></td>\n<td>泛指组件，当组件不好归类时进行注解</td>\n</tr>\n<tr>\n<td><code>@Repository</code></td>\n<td>用于注解 <code>DAO</code> 层，在 <code>DaoImpl</code> 类中注解</td>\n</tr>\n<tr>\n<td><code>@Service</code></td>\n<td>用于注解业务层组件</td>\n</tr>\n<tr>\n<td><code>@ResponseBody</code></td>\n<td>1. 异步请求<br>2. 用于将 <code>Controller</code> 的方法返回的对象，通过适当的 <code>HttpMessageConverter</code> 转换为指定格式后，写入到 <code>Response</code> 对象的 <code>body</code> 数据区<br>3. 返回的数据并非 <code>html</code> 的页面，而是其他某种格式的数据（json、xml）时使用</td>\n</tr>\n<tr>\n<td><code>@RequestMapping</code></td>\n<td>用于处理请求地址映射的注解，用于类或方法，用于类时，表示类中所有响应请求的方法都以该地址作为父路径</td>\n</tr>\n<tr>\n<td><code>@Autowired</code></td>\n<td>对类成员变量、方法以及构造函数进行标注，从而完成自动装配，通过 <code>@Autowired</code> 的使用来消除 <code>get、set</code> 方法</td>\n</tr>\n<tr>\n<td><code>@PathVariable</code></td>\n<td>用于将请求 URL 中的模板变量映射到功能处理方法的参数上，即取出 URL 模板中的变量作为参数</td>\n</tr>\n<tr>\n<td><code>@RequestParam</code></td>\n<td>用于在 Spring MVC 后台控制层获取参数，类似 <code>request.getParameter(\"name\")</code></td>\n</tr>\n<tr>\n<td><code>@RequestHeader</code></td>\n<td>将 <code>Request</code> 请求 <code>header</code> 部分的值绑定到方法的参数上</td>\n</tr>\n<tr>\n<td><code>@ModelAttribute</code></td>\n<td>在该 <code>Controller</code> 所有方法在调用前，先执行该注解，可用于注解和方法参数中</td>\n</tr>\n<tr>\n<td><code>@SessionAttributes</code></td>\n<td>将值放到 <code>session</code> 作用域，写在 <code>Class</code> 上面</td>\n</tr>\n<tr>\n<td><code>@Valid</code></td>\n<td>实体数据校验，结合 Hibernate Validator 一起使用</td>\n</tr>\n<tr>\n<td><code>@CookieValue</code></td>\n<td>获取 <code>cookie</code> 中的值</td>\n</tr>\n</tbody>\n</table>\n<h2> 4. IoC 原理</h2>\n<h3> 4.1 定义</h3>\n<p>Spring 通过一个配置文件来描述 <code>Bean</code> 之间的相互依赖关系，利用 Java 的反射功能来实例化 <code>Bean</code> 并建立 <code>Bean</code> 之间的依赖关系。Spring 的 IoC 容器在完成这些底层工作的基础上，还提供 <code>Bean</code> 实例缓存、生命周期管理、<code>Bean</code> 实例代理、事件发布、资源装载等高级服务；</p>\n<p>总结而言：<strong>IOC 负责创建对象、管理对象（通过依赖注入）、整合对象、配置对象以及管理对象的生命周期</strong>；</p>\n<h3> 4.2 Spring 容器高层视图</h3>\n<figure><figcaption></figcaption></figure>\n<ol>\n<li>Spring 启动时先读取 <code>Bean</code> 配置信息，并在 Spring 容器中生成一份对应的 <code>Bean</code> 配置注册表；</li>\n<li>根据上一步中生成的 <code>Bean</code> 配置注册表来实例化 <code>Bean</code>，并装配好 <code>Bean</code> 之间的依赖关系；</li>\n<li>将实例化后的 <code>Bean</code> 装载到 Spring 容器中的 <code>Bean</code> 缓存池中，供上层的应用程序使用；</li>\n</ol>\n<h3> 4.3 Spring Bean 的作用域及生命周期</h3>\n<h4> 4.3.1 作用域</h4>\n<p>Spring 中，用来组成应用程序的主体以及由 Spring IoC 容器所管理的对象叫做 Bean。简而言之，Bean 就是由 IoC 容器来进行初始化、装配和管理的对象。</p>\n<p>Bean 的作用域主要有如下几种：</p>\n<ol>\n<li><strong>Singleton（单例）</strong></li>\n</ol>\n<p>作用域为 <code>Singleton</code>，<strong>该模式在多线程下不安全</strong>，表明 IoC  容器中只会存在一个共享 Bean 实例，而且所有对 Bean 的请求，主要 <code>id</code> 和该 Bean 定义相匹配，那么就会返回 Bean 的同一实例。<code>Singleton</code> 是单例模型，即在从创建容器的同时就会自动创建一个 Bean 的对象，无论是否使用，而且 <strong>每次获取到的对象都是同一对象</strong>。</p>\n<ol start=\"2\">\n<li><strong>Prototype（原型）：每次创建时使用</strong></li>\n</ol>\n<p>作用域为 <code>Prototype</code>，表明一个 Bean 定义对应多个实例，该作用域中的 Bean 会导致在 <strong>每次对该 Bean 请求时均创建一个新的 Bean 实例</strong>。<code>Prototype</code> 是一个原型类型，在我们创建容器时并未实例化，而是当我们获取 Bean 时才去创建一个对象，而且每次获取到的对象都不一样。</p>\n<ol start=\"3\">\n<li><strong>Request：一次 request 一个实例</strong></li>\n</ol>\n<p>作用域为 <code>Request</code>，<strong>表明在一次 <code>HTTP</code> 请求中，容器返回该 Bean 的同一个实例</strong>，即每个 <code>HTTP</code> 请求均有各自的 Bean 实例，依据某个 Bean 定义创建而成，只在基于 Web 的 Spring ApplicationContext 情形下有效。当一次 <code>HTTP</code> 请求处理结束时，该作用域中的 Bean 实例均被销毁。</p>\n<ol start=\"4\">\n<li><strong>Session</strong></li>\n</ol>\n<p>作用域为 <code>Session</code> ，表明 <strong>在一个 <code>HTTP Session</code> 中，容器返回该 Bean 的同一个实例，对不同的 <code>Session</code> 请求则创建新的实例，该 <code>Bean</code> 实例仅在当前 <code>Session</code> 内有效</strong>，只在基于 Web 的 Spring ApplicationContext 情形下有效。当一个 <code>HTTP Session</code> 被废弃时，在该作用域内的 Bean 也将失效。</p>\n<table>\n<thead>\n<tr>\n<th>作用域类别</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Singleton</code></td>\n<td>Spring IoC 容器中仅存在一个 Bean 实例，以单例方式存在，是 Spring 中的默认值</td>\n</tr>\n<tr>\n<td><code>Prototype</code></td>\n<td>每次从容器中调用 Bean 时，均返回一个新的实例，即每次调用 <code>getBean()</code> 方法，相当于 <code>new</code> 一个新的对象</td>\n</tr>\n<tr>\n<td><code>Request</code></td>\n<td>每次 HTTP 请求均创建一个新的 Bean，仅适用于 WebApplicationContext 环境</td>\n</tr>\n<tr>\n<td><code>Session</code></td>\n<td>每次 HTTP Session 共享一个 Bean，不同 Session 使用不同的 Bean，仅适用于 WebApplicationContext 环境</td>\n</tr>\n</tbody>\n</table>\n<h4> 4.3.2 生命周期</h4>\n<ol>\n<li>Spring 对 Bean 进行实例化；</li>\n<li>Spring 将值和 Bean 的引用注入到 Bean 对应属性中；</li>\n<li>若 Bean 实现了 BeanNameAware 接口，则 Spring 将 Bean 的 ID 传递给 setBeanName() 方法；</li>\n<li>若 Bean 实现了 BeanFactoryAware 接口，Spring 将调用 <code>setBeanFactory()</code> 方法，将 Bean 所在应用引用传入进来；</li>\n<li>若 Bean 实现了 ApplicationContextAware 接口，Spring 将调用 <code>setApplicationContext()</code> 方法，将 Bean 所在应用的引用传入进来；</li>\n<li>若 Bean 实现了 BeanPostProcessor 接口，Spring 将调用 <code>post-ProcessBeforeInitalization()</code> 方法；</li>\n<li>若 Bean 实现了 <code>InitializingBean</code> 接口，Spring 将调用他们的 <code>after-PropertiesSet()</code> 方法，类似地，如果 Bean 使用 <code>init-method</code> 声明了初始化方法，则该方法也会被调用；</li>\n<li>若 Bean 实现了 BeanPostProcessor 接口，Spring 将调用他们的 <code>post-ProcessAfterInitialization()</code> 方法；</li>\n<li>此时，Bean 已经准备就绪，我们就可以被应用程序使用，他们将一直驻留在应用上下文中，直到该应用被销毁；</li>\n<li>若 Bean 实现了 DisposableBean 接口，Spring 将调用它的 <code>destory()</code> 接口方法；同样，若 Bean 使用 <code>destroy-method</code> 声明了销毁方法，该方法也将被调用；</li>\n</ol>\n<h3> 4.4 Spring 依赖注入的四种方式</h3>\n<ol>\n<li><strong>构造器注入</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>setter 方法注入</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li><strong>静态工厂注入</strong></li>\n</ol>\n<p>所谓静态工厂就是通过调用静态工厂的方法来获取自己所需对象，而且为了方便 Spring 管理，我们不能通过 “类.静态方法()” 来获取对象，而应该通过 Spring 注入的形式；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li><strong>实例工厂</strong></li>\n</ol>\n<p>实例工厂表示获取对象实例的方法不是静态的，所以需要先 <code>new</code> 工厂类，然后再调用普通的实例方法；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 4.5 Spring 自动装配方式</h3>\n<p>要实现自动装配，主要从如下两个角度来进行实现：</p>\n<ol>\n<li><strong>组件扫描（Component Scanning）</strong>：Spring 会自动发现应用上下文中所创建的 Bean；</li>\n<li><strong>自动装配（Autowiring）</strong>：Spring 自动满足 Bean 之间的依赖；</li>\n</ol>\n<p>Spring 装配包括 <strong>手动转配和自动装配</strong>，<strong>手动装配是通过 <code>XML</code> 装配、构造方法、<code>setter</code> 方法等方式；</strong></p>\n<p>而自动装配有如下几种，使得 Spring 容器通过自动装配方式来进行依赖注入；</p>\n<table>\n<thead>\n<tr>\n<th>装配方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>no</code></td>\n<td>默认不进行自动装配，通过显式设置 <code>ref</code> 属性来进行装配</td>\n</tr>\n<tr>\n<td><code>byName</code></td>\n<td>通过参数名自动装配，Spring 容器在配置文件中发现 <code>Bean</code> 的 <code>autowire</code> 属性被设置为 <code>byName</code> 后试图匹配、装载和该 <code>Bean</code> 的属性具有相同名字的 <code>Bean</code></td>\n</tr>\n<tr>\n<td><code>byType</code></td>\n<td>通过参数类型自动装配，Spring 容器在配置文件中发现 <code>Bean</code> 的 <code>autowire</code> 属性被设置为 <code>byType</code> 后试图匹配、装载和该 <code>Bean</code> 的属性具有相同了类型的 <code>Bean</code>，若发现多个 <code>Bean</code> 符合条件，则抛出错误</td>\n</tr>\n<tr>\n<td><code>constructor</code></td>\n<td>类似于 <code>byType</code>，但需要提供给构造器参数，若无固定的带参的构造器参数类型，则抛出异常</td>\n</tr>\n<tr>\n<td><code>autodetect</code></td>\n<td>首先尝试使用 <code>constructor</code> 来自动装配，若无法工作，则使用 <code>byType</code> 方式</td>\n</tr>\n</tbody>\n</table>\n<h3> 4.6 IoC 的优缺点</h3>\n<ol>\n<li><strong>优点</strong>：组件之间的解耦，提高程序可维护性、灵活性；</li>\n<li><strong>缺点</strong>：创建对象步骤复杂，有一定学习成本；利用反射创建对象，效率会降低；</li>\n</ol>\n<h2> 5. AOP 原理</h2>\n<h3> 5.1 定义</h3>\n<p>即剖开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为 <code>Aspect</code>，<strong>即切面</strong>。所谓切面即 <strong>与业务无关，但被业务模块所公用的逻辑，便于减少系统的重复代码，降低模块间的耦合度，利于后续的可操作性和可维护性</strong>。</p>\n<p>通过使用横切，AOP 将软件切分为：<strong>核心关注点和横切关注点</strong>。业务处理的主要流程是核心关注点，与横切关注点关系不大。<strong>横切关注点的特点是经常发生在核心关注点的多处，且各处基本相似</strong>。AOP 的作用就在于 <strong>分离系统中的各种关注点，将核心关注点和横切关注点分离开</strong>。</p>\n<h3> 5.2 核心概念</h3>\n<h3> 5.3 AOP 的两种代理方式</h3>\n<p>Spring 提供了两种方式来生成代理对象：JDK Proxy 和 CGlib，<strong>默认的策略是如果目标类是接口，则使用 JDK 动态代理技术，否则使用 CGlib 来生成代理</strong>；</p>\n<ol>\n<li><strong>JDK 动态接口代理</strong></li>\n</ol>\n<p>主要涉及 <code>Proxy</code> 和 <code>InvocationHandler</code>，<code>InvocationHandler</code> 是一个接口，通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态地将横切逻辑与业务逻辑编制在一起。而 <code>Proxy</code> 则利用 <code>InvocationHandler</code> 动态创建一个符合某一接口的实例，生成目标类的代理对象；</p>\n<ol start=\"2\">\n<li><strong>CGlib 动态代理</strong></li>\n</ol>\n<p>全称 <code>Code Generation Library</code>，<strong>是一个高性能高质量的代码生成类库，能在运行期间扩展 Java 类与实现 Java 接口。</strong> CGlib 封装了 ASM，能在运行期间动态生成新的类。</p>\n<ol start=\"3\">\n<li><strong>JDK 动态代理和 CGlib 动态代理的区别</strong></li>\n</ol>\n<p>JDK 动态代理只能为接口创建代理实例，而对于没有通过接口定义业务方法的类，则需要通过 CGlib 创建动态代理；</p>\n<h3> 5.4 切面的通知类型</h3>\n<ol>\n<li><strong>前置通知（Before）</strong>：目标方法在被调用前调用通知；</li>\n<li><strong>后置通知（After）</strong>：目标方法完成后调用通知；</li>\n<li><strong>返回通知（After-returning）</strong>：目标方法成功执行之后调用通知；</li>\n<li><strong>异常通知（After-throwing）</strong>：目标方法抛出异常后调用通知；</li>\n<li><strong>环绕通知（Around）</strong>：在被通知的方法调用之前和调用之后执行自定义的行为；</li>\n</ol>\n<h2> 6. Spring MVC</h2>\n<h3> 6.1 什么是 MVC 框架？</h3>\n<p>MVC，全称 Model View Controller，是模型（model）-视图（view）-控制器（controller）的缩写，是一种软件设计典范。用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件中，然后在改进和个性化定制界面及用户交互的同时，不用重写业务逻辑；</p>\n<p>采用 MVC 设计模式主要有如下好处：</p>\n<ol>\n<li>通过分层设计，实现了业务系统各组件之间的结构，有利于业务系统的可扩展性和可维护性；</li>\n<li>有利于系统的并行开发，提升开发效率；</li>\n</ol>\n<h3> 6.2 SpringMVC</h3>\n<h4> 6.2.1 定义</h4>\n<p>Spring MVC 是 Spring 框架的一个模块，一个基于 MVC 的框架；</p>\n<h4> 6.2.2 组件</h4>\n<ol>\n<li><code>DispatcherServlet</code>：核心组件，前端控制器，也叫中央控制器，由它来调度相关组件，<strong>用于接收请求、响应结果，相当于转发器，有了 <code>DispatcherServlet</code> 就减少了其他组件之间的耦合度</strong>；</li>\n<li><code>HandlerMapping</code>：处理器映射器，根据 URL 路径映射到不同的 <code>Handler</code>；</li>\n<li><code>HandlerAdapter</code>：处理器适配器，按照 <code>HandlerAdapter</code> 的规则来执行 <code>Handler</code>；</li>\n<li><code>Handler</code>：处理器，由我们自己根据业务进行开发；</li>\n<li><code>ViewResolver</code>：视图解析器，将逻辑视图解析成具体的视图；</li>\n<li><code>View</code>：一个接口，支持不同的视图类型；</li>\n</ol>\n<h4> 6.2.3 MVC 工作流程</h4>\n<ol>\n<li>浏览器发送请求，前端控制区 <code>DispatcherServlet</code> 拦截该请求；</li>\n<li><code>DispatcherServlet</code> 拦截到请求后，对请求 URL 进行解析，得到请求资源标识符 URI，根据 URI 调用 <code>HandlerMapping</code> 后获取对应 <code>Handler</code>；</li>\n<li><code>DispatcherServlet</code> 拿到 <code>Handler</code> 之后，找到 <code>HandlerAdapter</code> ，通过它来访问 <code>Handler</code>，并执行处理器；</li>\n<li>执行 <code>Handler</code> 的逻辑，返回一个 <code>ModelAndView</code> 对象给 <code>DispatcherServlet</code>；</li>\n<li>然后 <code>DispatcherServlet</code> 请求 <code>ViewResolver</code> 解析视图，根据逻辑视图名解析真正的 <code>View</code>；</li>\n<li>然后 <code>ViewResolver</code> 将解析后的 <code>View</code> 返回给 <code>DispatcherServlet</code>，然后对 <code>View</code> 进行渲染；</li>\n<li>然后由 <code>DispatcherServlet</code> 响应视图给浏览器；</li>\n</ol>\n<h4> 6.2.4 SpringMVC 的优点</h4>\n<ol>\n<li>具有 Spring 的特性；</li>\n<li>支持多种视图；</li>\n<li>配置方便，非侵入；</li>\n<li>分层更加清晰，利于团队开发的代码维护，以及可读性好；</li>\n</ol>\n<h3> 6.3 注解</h3>\n<h4> 6.3.1 注解原理</h4>\n<p>注解本质上是一个集成了 <code>Annotation</code> 的特殊接口，其具体实现类是 Java 运行时生成的动态代理类。通过反射获取注解时，返回的是 Java 运行时生成的动态代理对象。通过代理对象调用自定义注解的方法，将最终调用 <code>AnnotationInvocationHandler</code> 的 <code>invoke</code> 方法，然后该方法从 <code>memberValues</code> 的 <code>Map</code> 中索引出对应的值；</p>\n<h4> 6.3.2 常用注解</h4>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@RequestMapping</code></td>\n<td>用于处理请求 <code>url</code> 映射的注解，能用在类或方法上，用于类时表示所有响应请求的方法均以该地址作为父路径</td>\n</tr>\n<tr>\n<td><code>@RequestBody</code></td>\n<td>实现接收 <code>HTTP</code> 请求的 <code>json </code>数据，将 <code>json </code>转换为 Java 对象</td>\n</tr>\n<tr>\n<td><code>@ResponseBody</code></td>\n<td>实现将 <code>controller</code> 方法返回对象转化为 Json 对象响应给客户</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "求职面试"
      ]
    },
    {
      "title": "异常面试知识点",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/interview/knowledge/20210528-exception.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/interview/knowledge/20210528-exception.html",
      "summary": "异常简介 异常类层次结构 从结构图可以看出，所有异常均继承自 Throwable 类，它有两个重要的子类：Exception 和 Error ，各自又包含大量子类。 1. Exception 程序本身可以处理的异常，又可以分为 受检异常 和 非受检异常 ，受检异常 可以用 try...catch... 语句进行捕获处理，而且能从异常中恢复。但 非受检异...",
      "content_html": "<h1> 异常面试知识点</h1>\n<h2> 异常简介</h2>\n<h3> 异常类层次结构</h3>\n<figure><figcaption></figcaption></figure>\n<p>从结构图可以看出，所有异常均继承自 <code>Throwable</code> 类，它有两个重要的子类：<code>Exception</code> 和 <code>Error</code> ，各自又包含大量子类。</p>\n<ol>\n<li><strong>Exception</strong></li>\n</ol>\n<p><strong>程序本身可以处理的异常</strong>，又可以分为 <strong>受检异常</strong> 和 <strong>非受检异常</strong> ，<strong>受检异常</strong> 可以用 <code>try...catch...</code> 语句进行捕获处理，而且能从异常中恢复。但 <strong>非受检异常</strong> 是程序运行时错误，会导致程序崩溃而无法恢复。</p>\n<ul>\n<li><strong>受检异常</strong></li>\n</ul>\n<p>编译器要求必须处理的异常，正确的程序在运行时，经常会出现、预期范围内的情况。一旦发生该类异常，就必须使用某种方式进行处理。<strong>包括除开 <code>RuntimeException</code> 及其子类之外的 <code>Exception</code> 异常</strong>。编译器会检查此类异常，所以我们必须使用 <code>throws</code> 进行抛出或者 <code>try...catch</code> 进行捕获，否则将导致编译失败。</p>\n<ul>\n<li><strong>非受检异常</strong></li>\n</ul>\n<p>编译器不会检查而且也不要求我们进行处理，即就算在程序中出现了此类异常，即便我们没有用 <code>try...catch</code> 进行捕获或者用 <code>throws</code> 进行抛出，编译都会成功。包括 <strong><code>RuntimeException</code> 及其子类和错误 <code>Error</code></strong>.</p>\n<p>同时也可以分为：<strong>运行时异常和编译时异常</strong>。</p>\n<ul>\n<li><strong>运行时异常</strong></li>\n</ul>\n<p><code>RuntimeException</code> 类及其子类，表示 JVM 在运行期间可能出现的异常，Java 编译器不会检查它。没有通过 <code>throws</code> 抛出或 <code>try...catch</code> 捕获，仍然可以编译通过，常见的有 <code>NullPointerException、ArrayIndexOutBoundException、ClassCastException、ArithmeticException、NumberFormatException、IllegalArgumentException</code>；</p>\n<ul>\n<li><strong>编译时异常</strong></li>\n</ul>\n<p><code>Exception</code> 中除开运行时异常之外的异常，Java 编译器会检查它，一旦出现，必须使用 <code>throws</code> 进行声明抛出，或者使用 <code>try...catch</code> 进行捕获异常，否则不能通过编译。常见的有 <code>ClassNotFoundException、IOException</code>。在程序中，通常不会自定义该类异常，而是直接用系统提供的异常类，<strong>该异常必须手动在代码中添加捕获语句来处理。</strong></p>\n<ol start=\"2\">\n<li><strong>Error</strong></li>\n</ol>\n<p><strong>程序无法处理的错误</strong>，表示程序运行过程中教严重的问题，大多与 coder 所做操作无关，而是代码运行时 JVM 出现的问题。此时说明故障发生于虚拟机本身、或者发生在虚拟机试图执行应用时。</p>\n<h3> Throwable 常用方法</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public String getMessage()</code></td>\n<td>返回异常发生时的简要描述</td>\n</tr>\n<tr>\n<td><code>public String toString()</code></td>\n<td>返回异常发生时的详细信息</td>\n</tr>\n<tr>\n<td><code>public String getLocalizeMessage()</code></td>\n<td>返回异常对象的本地化信息，若子类重写该方法，可以生成本地化信息，若未重写，则返回信息同 <code>getMessage()</code> 方法</td>\n</tr>\n<tr>\n<td><code>public void printStackTrace()</code></td>\n<td>在控制台中打印异常对象封装的异常信息</td>\n</tr>\n</tbody>\n</table>\n<h3> try-catch-finally 和 try-with-resources</h3>\n<ol>\n<li><strong>try-catch-finally</strong>\n<ul>\n<li><strong>try</strong> ：用于捕获异常，后接零个或多个 <code>catch</code>，没有 <code>catch</code> 则必须加上 <code>finally</code>；</li>\n<li><strong>catch</strong>：用于处理 <code>try</code> 捕获到的异常；</li>\n<li><strong>finally</strong>：无论是否捕获/处理异常，<code>finally</code> 块中内容均会执行，就算 <code>try</code> 或 <code>catch</code> 中有 <code>return</code> 语句，<code>finally</code> 中代码也将在方法返回之前执行；</li>\n</ul>\n</li>\n<li><strong>try-with-resources</strong></li>\n</ol>\n<p>当我们有必须要关闭的资源时，建议优先使用 <code>try-with-resources</code>，这样写出的代码更加简短清晰。</p>\n<ol start=\"3\">\n<li><strong>两者对比</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 异常处理</h2>\n<p>Java 中，异常处理机制分为 <strong>声明异常、抛出异常和捕获异常</strong>，根据异常的情况，可以对异常进行不同处理：</p>\n<figure><figcaption></figcaption></figure>\n<h3> 声明异常</h3>\n<p>对于知道如何进行处理的异常，一般要进行捕获，但此时不知道如何将处理的异常继续传递下去，可以通过在方法签名中使用 <code>throws</code> 来声明可能抛出的异常，有如下两点需要注意：</p>\n<ol>\n<li><strong>非受检异常（Error、RuntimeException 及其子类）</strong> 不能使用 <code>throws</code> 关键字来声明要抛出的异常；</li>\n<li><strong>一个方法出现编译时异常，就需要 <code>try...catch/throws</code> 进行处理，否则会导致编译失败</strong> ；</li>\n</ol>\n<h3> 抛出异常</h3>\n<p>一旦觉得某些异常无法处理，但同时又不用我们进行处理，那我们就可以将其抛出。一般是使用 <code>throw</code> 在方法内部抛出一个 <code>Throwable</code> 类型的异常。</p>\n<h3> 捕获异常</h3>\n<p>程序在运行前一般不会报错，但是运行后可能出现某些未知错误，如果不想直接抛出给上一级处理，那我们就需要通过 <code>try...catch...</code> 的形式对异常进行捕获，然后根据不同的情况来进行相应处理。</p>\n<h2> 异常常见面试题</h2>\n<h3> Error 和 Exception 的区别？</h3>\n<p><code>Exception</code> 类的异常能够在程序中进行捕获并处理，遇到该类异常，应该进行处理，从而使程序能够继续正常运行；</p>\n<p><code>Error</code> 类的错误一般是虚拟机相关错误，如系统崩溃、内存不足、堆栈溢出等，编译器不会检测这类错误。我们也不会对这类错误进行捕获，一旦发生，一般都会导致程序崩溃无法恢复；</p>\n<h3> 运行时异常和受检异常的区别？</h3>\n<p>运行时异常包括 <code>RuntimeException</code> 及其子类，表示 JVM 运行期间可能出现的异常，不会被 Java 编译器检查。</p>\n<p>而受检异常是除开 <code>RuntimeException</code> 及其子类之外的其他 <code>Exception</code>，会被 Java 编译器检查。</p>\n<p>两者的 <strong>区别</strong> 在于：是否需要调用者必须处理该异常，<strong>如果必须处理，则一般使用受检异常，否则一般选择非受检异常（RuntimeException）</strong>；</p>\n<h3> throw 和 throws 的区别？</h3>\n<ul>\n<li><strong>throw：用于在方法内部抛出异常对象</strong>\n<ol>\n<li><code>throw</code> 用在方法体内，表示抛出异常，由方法体内的语句处理；</li>\n<li><code>throw</code> 是具体向外抛出异常的动作，所以抛出的是一个异常实例，执行 <code>throw</code> 一定是抛出了某种异常；</li>\n</ol>\n</li>\n<li><strong>throws：用于在方法签名上声明该方法所要抛出的异常</strong>\n<ol>\n<li><code>throws</code> 语句使用在方法声明后，表示若抛出异常，则由该方法的调用者来进行异常的处理；</li>\n<li><code>throws</code> 主要是声明这个方法会抛出某种类型的异常，让它的使用者要知道需要捕获的异常的类型；</li>\n<li><code>throws</code> 表示出现异常的一种可能性，并非一定发生该种异常；</li>\n</ol>\n</li>\n</ul>\n<h3> final、finally、finallize 的区别？</h3>\n<p><code>final</code> 用于修饰类、方法、变量，修饰类时表示类不能被继承；修饰方法时表示方法不能别重写，但是能够被重载；修饰变量时表示该变量是一个常量无法被重写赋值；</p>\n<p><code>finally</code> 一般作用于 <code>try...catch</code> 代码块，处理异常时，通常将必须要执行的代码放在 <code>finally</code> 代码块中，表示无论是否出现异常，此代码块均执行，一般用来存放一些关闭资源的代码；</p>\n<p><code>finallize</code> 是一个方法，属于 <code>Object</code> 类，Java 允许用 <code>finallize()</code> 方法在垃圾回收器将对象从内存中清除前做一些必要的清理工作；</p>\n<h3> 常见的 RuntimeException 异常？</h3>\n<ul>\n<li><code>ClassCastException</code></li>\n<li><code>IndexOutOfBoundsException</code></li>\n<li><code>NullPointerException</code></li>\n<li><code>ArrayStoreException</code></li>\n<li><code>BufferOverFlowException</code></li>\n</ul>\n<h3> JVM 如何处理异常？</h3>\n<p>一旦某方法发生异常，该方法就会创建一个异常对象，并将其转交给 JVM，该异常对象一般包含 <strong>异常名称、异常描述以及异常发生时应用程序的状态</strong>。这个 <strong>创建异常对象并转交给 JVM 的过程叫做抛出异常</strong>。可能有一系列的方法调用，最终才能进入抛出异常的方法，这一系列方法调用的有序列表叫做调用栈。</p>\n<p>JVM 沿着调用栈去查找是否有需要处理异常的代码，一旦发现则调用异常处理代码。当 JVM 发现可以处理异常的代码时，会将发生的异常传递给它。如果 JVM 未找到能够处理该异常的代码块，就会将其转交给默认的异常处理器（JVM 的一部分），由异常处理器打印出异常信息并终止应用程序；</p>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "求职面试"
      ]
    },
    {
      "title": "多线程面试知识点",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/interview/knowledge/20210629-thread.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/interview/knowledge/20210629-thread.html",
      "summary": "1. 进程和线程 1.1 进程 进程是系统中正在运行的一个程序，是 资源分配的基本单位，每个进程都有独立的地址空间。 进程控制块（Process Control Block，PCB）描述了进程的基本信息和运行状态，所谓的创建和撤销进程，都是指对于 PCB 的操作； 1.2 线程 线程是 独立调度的基本单位，被包含在进程中，是进程中的实际运作单位。一个进...",
      "content_html": "<h1> 多线程面试知识点</h1>\n<h2> 1. 进程和线程</h2>\n<h3> 1.1 进程</h3>\n<p>进程是系统中正在运行的一个程序，是 <strong>资源分配的基本单位，每个进程都有独立的地址空间</strong>。</p>\n<p>进程控制块（Process Control Block，PCB）描述了进程的基本信息和运行状态，所谓的创建和撤销进程，都是指对于 PCB 的操作；</p>\n<h3> 1.2 线程</h3>\n<p>线程是 <strong>独立调度的基本单位，被包含在进程中，是进程中的实际运作单位。一个进程中可以有多个线程，所有线程共享该进程的资源</strong>。</p>\n<h3> 1.3 进程和线程的区别？</h3>\n<ol>\n<li>进程和线程均为并发单元，根本区别在于：<strong>进程不共享公共内存，但线程共享进程资源</strong>；</li>\n<li>从系统的角度来看，进程相当于一个独立软件，在其自己的虚拟内存空间中运行。系统通过将内存中的进程分开，这样一旦某一进程失败也不会干扰公共内存来拖累其他进程。因此一般 <strong>进程是隔离的，通过进程间通信进行协作，进程间通信由操作系统定义为一种中间 API</strong>。</li>\n<li>而线程是应用程序的一部分，和同一程序的其他线程共享公共内存，通过公共内存从而减少内存开销，能够更快的交换数据和进行线程间协作；</li>\n</ol>\n<h3> 1.4 线程分类</h3>\n<p>Java 线程由两种，一种是 <strong>用户线程</strong>，一种是 <strong>守护线程</strong>；</p>\n<h4> 1.4.1 守护线程</h4>\n<ol>\n<li><strong>守护线程的特点</strong></li>\n</ol>\n<p>守护线程是一个较特殊的线程，主要被用作程序中后台调度以及支持性工作。当 Java 虚拟机中不存在非守护线程时，守护线程才会随着 JVM 一起结束工作；</p>\n<ol start=\"2\">\n<li><strong>Java 中的典型守护线程</strong></li>\n</ol>\n<p>GC（垃圾回收器）</p>\n<ol start=\"3\">\n<li>如何设置守护线程</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><strong>注意：</strong> <code>Daemon</code> 属性需要再启动线程前设置，不能再启动后设置；</p>\n<h2> 2. 如何创建线程实例并运行</h2>\n<p><code>Thread</code> 类本质上是实现 <code>Runnable</code> 接口的一个实例，代表一个线程的实例。创建线程实例一般有两种方法：</p>\n<h3> 2.1 创建 Thread 的子类并重写 <code>run()</code></h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>run()</code> 方法会在调用 <code>start()</code> 方法后被执行，而且一旦线程启动后 <code>start()</code> 方法后就会立即返回，而不是等到 <code>run()</code> 方法执行完毕后再返回。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2.2 实现 Runnable 接口</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在新建类时实现 <code>Runnable</code> 接口，然后在 <code>Thread</code> 类的构造函数中传入  <code>MyRunnable</code> 的实例对象，最后执行 <code>start()</code> 方法即可；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 3. Runnable vs Callable</h2>\n<h3> 3.1 Runnable</h3>\n<p>该接口表示必须在单独的线程中运行的计算单位，只有 <code>run()</code> 方法，而且不允许该方法返回值或抛出未经检查的异常；</p>\n<h3> 3.2 Callable</h3>\n<p>该接口表示具有返回值的任务，只有一个 <code>call()</code> 方法，该方法可以返回一个值（也可以是 <code>void</code>），同时也支持抛出异常。<code>Callable</code> 通常在 <code>ExecutorService</code> 事例中用于启动异步任务，然后调用返回的实例从而获取其值；</p>\n<h2> 4. 并发 vs 并行</h2>\n<h3> 4.1 并发</h3>\n<p>同一时间段，多个任务均在执行（单位时间内不一定同时执行）；</p>\n<h3> 4.2 并行</h3>\n<p>单位时间内，多个任务同时执行；</p>\n<h2> 5. 4 种线程池</h2>\n<p>Java 中线程池的顶级接口是 <code>Executor</code>，但严格来讲它并不是一个线程池，而只是一个执行线程的工具，真正的线程池接口应该是 <code>ExecutorService</code>，一般可以有如下 4 种线程池：</p>\n<h3> 5.1 newCachedThreadPool</h3>\n<p><strong>创建一个根据需要来创建新线程的线程池</strong>，但在以前构造的线程可用时将重用它们。对于执行许多短期异步任务的程序而言，这些线程池通常能够提高程序性能。<strong>调用 <code>execute</code> 将重用以前构造的线程（若线程可用），若线程无可用的，则创建一个新线程并添加到线程池中。对于那些已经有 60s 未使用的线程，则从缓存中将其移除。</strong> 因此长时间保持空闲的线程池不会使用任何资源。</p>\n<h3> 5.2 newFixedThreadPool</h3>\n<p><strong>创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。</strong> 在任意时间点，大多数 <code>nThreads</code> 线程将会处理任务的活动状态。如果在所有线程处于活动状态时提交附加任务，则在有可用线程前，附加任务将在队列中进行等待。如果在关闭前的执行期间由于失败而导致任何线程终止，则一个新的线程将代替它执行后续任务。在某个线程被显式关闭前，池中线程都将一直存在。</p>\n<h3> 5.3 newScheduledThreadPool</h3>\n<p><strong>创建一个线程池，能够安排在给定延迟后运行命令或定期执行。</strong></p>\n<h3> 5.4 newSingleThreadExecutor</h3>\n<p><code>Executors.newSingleThreadExecutor()</code> 返回一个线程池（该线程池只有线程），<strong>该线程池可以在线程死后（或发生异常时）重新启动一个线程来替代原来的线程继续执行下去</strong>；</p>\n<h2> 6. 线程生命周期及状态</h2>\n<h3> 6.1 线程状态</h3>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>NEW</code></td>\n<td>初始状态，创建线程，但还未调用 <code>start()</code> 方法</td>\n</tr>\n<tr>\n<td><code>RUNNABLE</code></td>\n<td>可执行状态，“就绪” 和 “运行” 两种状态统称 “运行中”</td>\n</tr>\n<tr>\n<td><code>BLOCKED</code></td>\n<td>阻塞状态，表示线程阻塞于锁</td>\n</tr>\n<tr>\n<td><code>WAITING</code></td>\n<td>等待状态，线程进行登台状态，进入该状态表示当前线程需要等待其他线程做出通知或中断</td>\n</tr>\n<tr>\n<td><code>TIME_WAITING</code></td>\n<td>超时等待状态，不同于 <code>WAITING</code> ，经过指定时间后可以自行返回</td>\n</tr>\n<tr>\n<td><code>TERMINATED</code></td>\n<td>终止状态，表示线程执行完毕</td>\n</tr>\n</tbody>\n</table>\n<figure><figcaption>Java 线程状态变迁《Java 并发编程艺术》</figcaption></figure>\n<p>上图源自《Java 并发编程艺术》，可以看出一个线程的状态变迁过程：</p>\n<p>线程创建后处于 <code>NEW</code> 状态，然后调用 <code>start()</code> 方法后开始运行，此时处于 <code>READY</code> 状态，接着一旦可运行状态的线程获得了 CPU 时间片之后，就处于 <code>RUNNING</code> 状态。如果线程执行了 <code>wait()</code> 方法，则进入 <code>WAITING</code> 状态。进入 <code>WAITING</code> 状态的线程池需要依靠其他线程的通知后才能返回 <code>RUNNING</code> 状态。而 <code>TIME_WAITING</code> 状态相当于在 <code>WAITING</code> 状态的基础上增加了超时限制，当超时后线程将自动返回 <code>RUNNABLE</code> 状态。当线程调用同步方法后，如果没有获取到锁，线程将进入 <code>BLOCKED</code> 状态。同时，如果线程执行了 <code>RUNNABLE</code> 的 <code>run()</code> 方法，线程将进入 <code>TERMINATED</code> 状态。</p>\n<h3> 6.2 线程阻塞的三种情况</h3>\n<p>当线程因为某种原因放弃 CPU 使用权后，即让出了 CPU 时间片，暂时就会停止运行，知道线程进入可运行状态（<code>Runnable</code>），才有机会再次获得 CPU 时间片转入 <code>RUNNING</code> 状态。一般来讲，阻塞的情况可以分为如下三种：</p>\n<ol>\n<li><strong>等待阻塞（Object.wait -&gt; 等待队列）</strong></li>\n</ol>\n<p><code>RUNNING</code> 状态的线程执行 <code>Object.wait()</code> 方法后，JVM 会将线程放入等待序列（waitting queue）；</p>\n<ol start=\"2\">\n<li><strong>同步阻塞（lock -&gt; 锁池）</strong></li>\n</ol>\n<p><code>RUNNING</code> 状态的线程在获取对象的同步锁时，若该 <strong>同步锁被其他线程占用，则 JVM 将该线程放入锁池（lock pool）中</strong>；</p>\n<ol start=\"3\">\n<li><strong>其他阻塞（sleep/join）</strong></li>\n</ol>\n<p><code>RUNNING</code> 状态的线程执行 <code>Thread.sleep(long ms)</code> 或 <code>Thread.join()</code> 方法，或发出 I/O 请求时，JVM 会将该线程置为阻塞状态。当 <code>sleep()</code> 状态超时，<code>join()</code> 等待线程终止或超时、或者 I/O 处理完毕时，线程重新转入可运行状态（<code>RUNNABLE</code>）；</p>\n<h3> 6.3 线程死亡的三种方式</h3>\n<ol>\n<li><strong>正常结束</strong></li>\n</ol>\n<p><code>run()</code> 或者 <code>call()</code> 方法执行完成后，线程正常结束；</p>\n<ol start=\"2\">\n<li><strong>异常结束</strong></li>\n</ol>\n<p>线程抛出一个未捕获的 <code>Exception</code> 或 <code>Error</code>，导致线程异常结束；</p>\n<ol start=\"3\">\n<li><strong>调用 stop()</strong></li>\n</ol>\n<p>直接调用线程的 <code>stop()</code> 方法来结束该线程，但是一般不推荐使用该种方式，<strong>因为该方法通常容易导致死锁</strong>；</p>\n<h3> 6.4 终止线程的 4 种方式</h3>\n<ol>\n<li><strong>正常运行结束</strong></li>\n</ol>\n<p>程序运行结束，线程自动结束。</p>\n<ol start=\"2\">\n<li><strong>使用退出标志退出线程</strong></li>\n</ol>\n<p>一般 <code>run()</code> 方法执行完毕后，线程就会正常结束，但是有的线程是伺服线程，<strong>需要长时间的运行，直到满足某些外部条件满足时，才能关闭</strong>，一般通过使用关键字 <code>volatile</code> 来使退出标志进行同步（<code>volatile</code> 修饰时，同一时刻只能有一个线程来修改退出标志的值）；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li><strong>Interrupt 方法结束线程</strong></li>\n</ol>\n<p>利用 <code>interrput()</code> 方法来终止线程有两种情况：</p>\n<ul>\n<li><strong>线程处于阻塞状态</strong></li>\n</ul>\n<p>若使用了 <code>sleep</code>，同步锁的 <code>wait</code>，socket 中的 <code>receive、accept</code> 等方法时，线程会处于阻塞状态。当调用线程的 <code>interrupt()</code> 方法时，将抛出 <code>InterrputException</code> 异常，阻塞中的线程哪个方法抛出该异常，就通过代码来进行捕获，然后 <code>break</code> 跳出循环状态，从而让我们有机会结束该线程的执行。<strong>并非调用了 <code>interrput()</code> 方法后线程就会结束，而是需要我们先捕获 <code>InterruptException</code> 异常后通过 <code>break</code> 来跳出循环，才能正常结束 <code>run()</code> 方法</strong>；</p>\n<ul>\n<li><strong>线程未处于阻塞状态</strong></li>\n</ul>\n<p>使用<code>isInterrupted()</code> 判断线程的中断标志来退出循环，当使用 <code>interrupt()</code> 时，中断标志会置为 <code>true</code>，和使用自定义的退出标志来控制循环原理一致；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li><strong>stop 方法终止进程（线程不安全）</strong></li>\n</ol>\n<p>可以使用 <code>Thread.stop()</code> 来强行终止线程，但 <strong>调用 <code>stop()</code> 后，创建子线程就会抛出 <code>ThreadDeathError</code> 的错误，且会释放子线程所持有的所有锁。一般任何进行加锁的代码块都是为了保护数据一致性，若在调用 <code>Thread.stop()</code> 方法后导致该线程所持有的的所有锁的突然释放（不受控制），则被保护数据就有可能呈现不一致性，其他线程在使用这些被破坏的数据时，就可能会导致一些奇怪的应用程序错误。</strong></p>\n<h2> 7. 上下文切换</h2>\n<h3> 7.1 上下文切换活动</h3>\n<p>多线程编程时一般线程数量均比 CPU 核心数多，但一个 CPU 在任一时刻只能被一个线程占用，针对这一问题，CPU 通过 <strong>给每个线程分配时间片并转轮</strong>。当一个线程的时间片消耗完时，该线程进入就绪状态，而 CPU 此时就让给其他线程占用，这样的一个过程就是 <strong>一次上下文切换</strong>。</p>\n<p>总结来说：当前线程在执行完 CPU 时间片之后切换到另一个线程前，会先保存自己的状态，从而方便下次切换回这个线程时，能够快速加载该线程的状态。<strong>线程从保存到再加载的过程就是一次上下文切换</strong>。</p>\n<figure><figcaption></figcaption></figure>\n<p>如上图，上下文切换的步骤可以总结为如下三步：</p>\n<ol>\n<li>首先挂起一个进程，然后将这个进程在 CPU 中的状态（上下文）存储在内存中某处；</li>\n<li>然后在内存中检索下一个进程的上下文并将其在 CPU  的寄存器中恢复；</li>\n<li>跳转到程序计数器指向的位置（即跳转到进程被中断时的代码行），然后恢复该进程；</li>\n</ol>\n<h3> 7.2 上下文切换的原因</h3>\n<p>引起上下文切换的原因通常有如下几种：</p>\n<ol>\n<li>当前执行任务的时间片用完之后，系统 CPU 正常调度下一个任务；</li>\n<li>当前执行任务碰到 IO 阻塞，调度器将此任务挂起，继续下一任务；</li>\n<li>多个任务抢占锁资源，当前任务未抢到锁资源，被调度器挂起，继续下一个任务；</li>\n<li>用户代码挂起当前业务，让出 CPU 时间；</li>\n<li>硬件中断；</li>\n</ol>\n<h2> 8. 锁</h2>\n<h3> 8.1 锁的分类</h3>\n<p>Java 中的锁有很多种，通常可以分为如下类型：</p>\n<h4> 8.1.1 乐观锁</h4>\n<p>乐观锁是一种乐观思想，认为 <strong>读多写少，遇到并发写的可能性低，每次去拿数据时都认为别人不会修改，所以不会上锁。</strong> 但是 <strong>在更新时会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出当前版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），</strong> 若失败则要重复读-比较-写操作。</p>\n<p>Java 中的乐观锁基本都是通过 <strong>CAS</strong> 操作来实现，CAS 是一种更新的原子操作，<strong>用于比较当前值与传入值是否一样，一样则更新，否则则失败</strong>。</p>\n<h4> 8.1.2 悲观锁</h4>\n<p>悲观锁是一种悲观思想，认为 <strong>写多读少，遇到并发写的可能性高。每次去拿数据时都认为别人会修改，所以每次在读写数据时均上锁，这样别人想读写该数据时就会阻塞直接拿到锁。</strong></p>\n<p>Java 中的悲观锁就是 <strong>Synchronized</strong>，AQS 框架下的锁会先去尝试 CAS 乐观锁去获取锁，如果获取不到就转换为悲观锁。</p>\n<h4> 8.1.3 自旋锁</h4>\n<ol>\n<li><strong>自旋锁原理</strong></li>\n</ol>\n<p><strong>若持有锁的线程能在较短时间内释放锁资源，则那些等待竞争锁的线程就不需要做内核态和用户态之间的切换就会进入阻塞挂起状态，他们只需要等上一段时间（自旋），等待持有锁的线程释放锁之后就可以立刻释放锁，从而避免用户线程和内核的切换的消耗。</strong></p>\n<ol start=\"2\">\n<li><strong>自旋锁优缺点</strong></li>\n</ol>\n<p>自旋锁能尽可能的减少线程的阻塞，对于锁的竞争不激烈，而且占用锁时间非常短的代码块而言性能会有大幅度的提升。因为自旋的消耗会小于线程阻塞挂起再唤醒的操作的消耗，这些操作将导致线程发生两次上下文切换。</p>\n<p>但是如果锁的竞争比较激烈，或者持有锁的线程需要长时间的占用锁来执行同步块，此时就不适合使用自旋锁，因为自旋锁在获取锁之前一直都占用 CPU 做无用功。同时大量线程竞争一个锁，将导致获取锁的时间变长，线程自旋的消耗远远大于线程阻塞挂起操作的消耗，其他需要 CPU 的线程又获取不到 CPU，从而造成 CPU 的浪费，此时我们就应该关闭自旋锁。</p>\n<h4> 8.1.4 Synchronized 同步锁</h4>\n<p><code>synchronized</code> 能把任意一个非 <code>NULL</code> 的对象当作锁，<strong>属于独占式的悲观锁，同时又属于可重入锁。</strong></p>\n<ul>\n<li><strong>Synchronized 作用范围</strong>\n<ol>\n<li>作用于方法时，锁住的是对象实例（<code>this</code>）；</li>\n<li>作用于静态方法时，锁住 <code>Class</code> 实例，而 <code>Class</code> 的相关数据存储在永久代（PermGen），属于全局共享区域，因此静态方法锁相当于类的一个全局锁，将锁住所有调用该方法的线程；</li>\n<li><code>synchronized</code> 作用于一个对象实例时，锁住的是所有以该对象为锁的代码块。有多个队列，当多个线程一起访问某个对象监视器时，对象监视器会将这些线程存储在不同的容器中；</li>\n</ol>\n</li>\n<li><strong>Synchronized  核心组件</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>组件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Wait Set</code></td>\n<td>调用 <code>wait()</code> 方法被阻塞的线程存放处</td>\n</tr>\n<tr>\n<td><code>Contention List</code></td>\n<td><strong>竞争队列</strong>，所有 请求锁的线程首先被存放在该竞争队列</td>\n</tr>\n<tr>\n<td><code>Entry List</code></td>\n<td><strong>竞争队列中有资格成为候选资源的线程被移动到 <code>Entry List</code> 中</strong></td>\n</tr>\n<tr>\n<td><code>OnDeck</code></td>\n<td>任意时间，<strong>最多只有一个线程正在竞争锁资源，该线程被叫做 <code>OnDeck</code></strong></td>\n</tr>\n<tr>\n<td><code>Owner</code></td>\n<td>当前已经获取到锁资源的线程</td>\n</tr>\n<tr>\n<td><code>!Owner</code></td>\n<td>当前释放锁的线程</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>Synchronized  实现</strong></li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ol>\n<li>JVM 每次从等待队列尾部取出一个数据用于锁竞争候选者（<code>OnDeck</code>） ，但在并发情况下，<code>Contention List</code> 会被大量的并发线程进行 CAS 访问，此时，为了降低对队列尾部元素的竞争，JVM 将一部分线程移动到 <code>Entry List</code> 中作为候选竞争线程；</li>\n<li><code>Owner</code> 线程在 <code>unclock</code> 时，将 <code>Contention List</code> 中的部分线程迁移到 <code>Entry List</code>，并指定其中的某一线程为 <code>OnDeck</code> 线程（一般是最先进去的线程）；</li>\n<li><code>Owner</code> 线程并不直接把锁传递给 <code>OnDeck</code> 线程，而是把锁竞争的权利交给 <code>OnDeck</code>，它需要重新竞争锁。虽然在一定程度上牺牲了公平性，但是能够极大地提高系统吞吐量，在 JVM  中这种选择行为叫做 “竞争切换”；</li>\n<li><code>OnDeck</code> 线程获取到锁资源后就会变成 <code>Owner</code> 线程，未获取到锁资源的则仍然停留在 <code>Entry List</code> 中。如果 <code>Owner</code> 线程被 <code>wait()</code> 方法阻塞，则转移到 <code>Wait Set</code> 队列，直到某一时刻通过 <code>notify()/notifyAll()</code> 唤醒，则重新进入 <code>Entry List</code>；</li>\n<li>处于 <code>Contention List、Entry List、Wait Set</code> 中的线程均处于阻塞状态，该阻塞由操作系统来完成；</li>\n<li><code>Synchronized</code> <strong>是非公平锁</strong>。<code>Synchronized</code> 在线程进入 <code>Contention List</code> 时，<strong>等待的线程先尝试自旋获取锁，如果获取不到则进入 <code>Contention List</code></strong>；</li>\n</ol>\n<h3> 8.2 锁的优化</h3>\n<ol>\n<li><strong>减少锁持有时间</strong></li>\n</ol>\n<p>只用在有线程安全要求的程序上加锁；</p>\n<ol start=\"2\">\n<li><strong>减小锁粒度</strong></li>\n</ol>\n<p>将大对象（被多个线程访问）拆分为小对象，大大增加并行度，降低锁竞争。通过降低锁的竞争，偏向锁，轻量级锁的成功率才会提高，其中典型案例为 <code>ConcurrentHashMap</code>；</p>\n<ol start=\"3\">\n<li><strong>锁分离</strong></li>\n</ol>\n<p><strong>最常见的锁分离就是读写锁 <code>ReadWriteLock</code></strong>，根据功能进行分离为读锁和写锁，这样一来读读不互斥，读写互斥，写写互斥，既能保证线程安全，又提高了性能；</p>\n<ol start=\"4\">\n<li><strong>锁粗化</strong></li>\n</ol>\n<p>为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。<strong>但如果对同一个锁不停地进行请求、同步和释放，其本身所消耗的系统资源也不利用性能优化</strong>。</p>\n<ol start=\"5\">\n<li><strong>锁消除</strong></li>\n</ol>\n<p>在即时编译器时，若发现不可能被共享的对象，则可以消除这些对象的锁操作；</p>\n<h3> 8.3 线程死锁</h3>\n<ol>\n<li><strong>定义</strong></li>\n</ol>\n<p>所谓线程死锁，指的是 <strong>多个线程同时被阻塞，其中的一个或全部均在等待某一资源被释放。</strong> 由于线程被无限期阻塞，因此程序也不能正常终止。</p>\n<ol start=\"2\">\n<li><strong>产生死锁必备条件</strong></li>\n</ol>\n<ul>\n<li><strong>互斥条件</strong>：资源在任意一个时刻只被一个线程占用；</li>\n<li><strong>请求与保持条件</strong>：一个进程因请求资源而堵塞时，对已经获得的资源保持不放；</li>\n<li><strong>不可抢占条件</strong>：线程已获得的资源在未使用完前不能被其他线程强行哦度哦，只能在即使用完毕后才释放资源；</li>\n<li><strong>循环等待条件</strong>：若干线程间形成头尾相接的循环等待资源关系；</li>\n</ul>\n<h3> 8.4 如何避免死锁</h3>\n<p>要产生死锁，必须满足上面说的 4 个条件，因此为了避免死锁，我们只要对上述 4 个条件中的一个即可；</p>\n<ol>\n<li><strong>破坏互斥条件</strong></li>\n</ol>\n<p>通过人为破坏互斥条件是不可行的，因为锁的用途就是让其产生互斥。</p>\n<ol start=\"2\">\n<li><strong>破坏请求与保持条件</strong></li>\n</ol>\n<p>我们直接一次性申请所有资源即可；</p>\n<ol start=\"3\">\n<li><strong>破坏不可抢占条件</strong></li>\n</ol>\n<p>占用部分资源的线程进一步申请其他资源时如果申请不到，可以主动释放它所占有的资源；</p>\n<ol start=\"4\">\n<li><strong>破坏循环等待条件</strong></li>\n</ol>\n<p>通过按序申请资源来预防，按某一顺序申请资源，释放资源则反序释放，从而破坏循环等待条件；</p>\n<h2> 9. 线程常用方法</h2>\n<h3> 9.1 基本方法</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>wait()</code></td>\n<td>调用后进入 <code>WAITING</code> 状态，只有等待另外线程的通知或被中断才会返回，而且调用后 <strong>会释放对象占有的锁</strong>，一般用于同步方法或同步代码块</td>\n</tr>\n<tr>\n<td><code>sleep()</code></td>\n<td>调用后进入 <code>TIMED-WAITING</code> 状态，调用后 <strong>不会释放对象占有的锁</strong></td>\n</tr>\n<tr>\n<td><code>yield()</code></td>\n<td>使当前线程 <strong>让出 CPU 执行时间片</strong>，与其他线程一起重新竞争 CPU 时间片。一般情况下优先级越高，竞争到 CPU 时间片的可能性更大</td>\n</tr>\n<tr>\n<td><code>interrupt()</code></td>\n<td>中断线程，本意是 <strong>给线程一个通知信号，会影响该线程内部的一个中断标识位，该进程本身并不会因此改变状态</strong></td>\n</tr>\n<tr>\n<td><code>join()</code></td>\n<td><strong>等待其他线程终止</strong>，当前线程中调用一个线程的 <code>join()</code> 方法，则当前线程转为阻塞状态，回到另一个线程结束，当前线程再由阻塞状态变为就绪状态，等待 CPU 资源</td>\n</tr>\n<tr>\n<td><code>notify()</code></td>\n<td><strong>唤醒在此对象监视器上等待的单个线程，</strong> 若所有线程均在此对象上等待，则会选择唤醒其中一个线程，选择是任意的，并在对实现做出决定时发生</td>\n</tr>\n<tr>\n<td><code>idDaemon()</code></td>\n<td>判断一个线程是否为守护线程</td>\n</tr>\n<tr>\n<td><code>isAlive()</code></td>\n<td>判断一个线程是否存活</td>\n</tr>\n</tbody>\n</table>\n<h3> 9.2 sleep() 和 wait() 的区别</h3>\n<ol>\n<li><code>sleep()</code> 属于 <code>Thread</code> 类，<code>wait()</code> 属于 <code>Object</code> 类；</li>\n<li><code>sleep()</code> 导致程序暂停执行指定时间，让出 CPU 给其他线程，但 <strong>其监控状态依旧保持</strong>，指定时间一过就会自动恢复运行状态；</li>\n<li>调用 <code>sleep()</code> 方法，<strong>线程不会释放对象锁</strong>；但调用 <code>wait()</code> 方法时，<strong>线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用 <code>notify()</code> 方法后本现场才进入对象锁定池准备获取对象锁进入运行状态</strong>；</li>\n</ol>\n<h3> 9.3 start() 和 run() 的区别</h3>\n<ol>\n<li><code>start()</code> 方法用于启动线程，真正实现了多线程运行，无需等待 <code>run()</code> 方法体执行完毕就能直接继续执行下面的代码；</li>\n<li>通过调用 <code>Thread</code> 类的 <code>start()</code> 方法来启动一个线程，此时线程处于 <strong>就绪状态</strong>，并没有运行；</li>\n<li>方法 <code>run()</code> 称为线程体，主要包含要执行的线程的内容，线程就进入了 <strong>运行状态，开始运行 <code>run()</code> 方法中的代码</strong>，<code>run()</code> 方法运行结束，则线程终止，然后 CPU 再调度其他线程；</li>\n</ol>\n<h3> 9.4 ThreadLocal（线程本地存储）</h3>\n<p><code>ThreadLocal</code>，也叫作 <strong>线程本地变量，其作用是提供线程内的局部变量，这种变量在线程生命周期内其作用，减少同一个线程内多个方法或组件间一些公共变量的传递的复杂度</strong>；</p>\n<h3> 9.5 volatile 和 synchronized 的区别</h3>\n<p><code>volatile</code> 解决的是内存可见性问题，会使得所有对 <code>volatile</code> 变量的读写都直接写入主存，即 <strong>保证了变量的可见性</strong>。</p>\n<p><code>synchronized</code> 解决的事执行控制的问题，它会阻止其他线程获取当前对象的监控锁，这样一来就让当前对象中被 <code>synchronized</code> 关键字保护的代码块无法被其他线程访问，也就是无法并发执行。而且，<code>synchronized</code> 还会创建一个 <strong>内存屏障</strong>，内存屏障指令保证了所有 CPU 操作结果都会直接刷到主存中，从而 <strong>保证操作的内存可见性</strong>，同时也使得这个锁的线程的所有操作都 <code>happens-before</code> 于随后获得这个锁的线程的操作。</p>\n<p>两者的区别主要有如下：</p>\n<ol>\n<li>volatile 本质是在告诉 JVM 当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized 则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。</li>\n<li>volatile <strong>仅能使用在变量级别</strong>；synchronized 则可以使用在 <strong>变量、方法、和类级别的</strong></li>\n<li>volatile 仅能实现变量的修改可见性，<strong>不能保证原子性</strong>；而synchronized 则可以 <strong>保证变量的修改可见性和原子性</strong></li>\n<li>volatile <strong>不会造成线程的阻塞</strong>；synchronized <strong>可能会造成线程的阻塞</strong>。</li>\n<li>volatile 标记的变量不会被编译器优化；synchronized 标记的变量可以被编译器优化。</li>\n</ol>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "求职面试"
      ]
    },
    {
      "title": "MyBatis 面试知识点",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/interview/knowledge/20210822-mybatis.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/interview/knowledge/20210822-mybatis.html",
      "summary": "Hibernate 简介 什么是 Hibernate？ Hibernate 是一种 ORM（Object Relational Mapping） 框架，用于在 Java 对象和关系数据库之间建立某种映射，从而实现 Java 对象存取； Hibernate 优缺点 优点 Hibernate 建立在 POJO 和数据库表模型的直接映射关系之上。通过 XML...",
      "content_html": "<h1> MyBatis 面试知识点</h1>\n<h2> Hibernate 简介</h2>\n<h3> 什么是 Hibernate？</h3>\n<p><code>Hibernate</code> 是一种 <code>ORM（Object Relational Mapping）</code> 框架，用于在 <code>Java</code> 对象和关系数据库之间建立某种映射，从而实现 <code>Java</code> 对象存取；</p>\n<h3> Hibernate 优缺点</h3>\n<h4> 优点</h4>\n<p><code>Hibernate</code> 建立在 <code>POJO</code> 和数据库表模型的直接映射关系之上。通过 <code>XML</code> 或者注解就能和数据库表进行映射。通过 <code>POJO</code> 直接就能操作数据库中的数据，提供的是对于全表的映射模型。主要有如下优点：</p>\n<ol>\n<li>消除了代码映射规则，被分离到 <code>XML</code> 或注解中配置；</li>\n<li>配置在 <code>XML</code> 中后，无需再管理数据库连接；</li>\n<li>一个会话中，不用操作多个对象，只要操作 <code>Session</code> 对象即可；</li>\n<li>关闭资源只需关闭 <code>Session</code>；</li>\n</ol>\n<h4> 缺点</h4>\n<ol>\n<li>由于是全表映射，所以某些操作不方便，比如更新需要发送所有字段；</li>\n<li>无法根据不同条件组装不同的 <code>SQL</code>；</li>\n<li>对多表关联和复杂 <code>SQL</code> 查询支持较差，需要自己写 <code>SQL</code>，返回后还需要自己将数据组成 <code>POJO</code>；</li>\n<li>不能有效支持存储过程；</li>\n</ol>\n<h2> MyBatis 简介</h2>\n<h3> 什么是 MyBatis？</h3>\n<p>MyBatis 一款支持自定义 SQL 查询、存储过程和高级映射的持久层框架，消除了几乎所有 JDBC 代码和参数的手动配置以及结果集的检索。只需要使用 XML 或注解进行配置和映射，MyBatis 就能将参数映射到配置的 SQL 形成最终执行的 SQL 语句，最后将执行 SQL 的结果映射为 Java 对象返回；</p>\n<h3> MyBatis 优缺点</h3>\n<h4> 优点</h4>\n<ol>\n<li>小巧，学习成本低，会写 SQL 语句就能很快上手；</li>\n<li>无需过多配置 JDBC，主要专注 SQL 开发；</li>\n<li>方便维护管理，SQL 不用在 Java 代码中找，SQL 代码可以分离重用；</li>\n<li>灵活，支持动态 SQL；</li>\n<li>支持对象与数据库 ORM 字段关系映射；</li>\n</ol>\n<h4> 缺点</h4>\n<ol>\n<li>主要工作集中在 SQL 开发，所以对 SQL 熟练度要求较高；</li>\n<li>移植性查，SQL 依赖于数据库，切换不同数据库会因语法差异而报错；</li>\n</ol>\n<h3> MyBatis 和 Hibernate 的区别</h3>\n<h4> 相同点</h4>\n<p>均是对 JDBC 的封装，都是持久层的框架，用于 Dao 层的开发；</p>\n<h4> 不同点</h4>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>映射关系</th>\n<th>SQL优化和移植性</th>\n<th>开发难易程度和学习成本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Hibernate</td>\n<td>全自动映射，配置 Java 对象与数据库表的对应关系，多表关联关系配置复杂</td>\n<td>对 SQL 语句封装，提供了日志、缓冲、级联等特性，此外还提供 HQL 操作数据库，数据库无关系支持好，但会多消耗性能</td>\n<td>重量级，门槛高，适合需求稳定、中小型项目</td>\n</tr>\n<tr>\n<td>MyBatis</td>\n<td>半自动映射，配置 Java 对象与 SQL 语句执行结果的对应关系，多表关联关系配置简单</td>\n<td>需要手动编写 SQL，支持动态 SQL、处理列表、动态生成表名、支持存储过程；开发工作量相对较大，直接使用 SQL 语句操作数据库，不支持数据库无关性，但 SQL 语句优化容易</td>\n<td>轻量级，门槛低，适合需求变化频繁、大型项目</td>\n</tr>\n</tbody>\n</table>\n<p>Hibernate 属于全自动的 ORM 映射工具，使用 Hibernate 查询关联对象或关联集合对象时，能根据对象关系模型直接获取，所以说它是全自动的；</p>\n<p>而 MyBatis 属于半自动 ORM 映射工具，因为在查询关联对象或关联集合对象时，需要自己手动编写 SQL 来完成；</p>\n<h2> 解析和运行原理</h2>\n<h3> MyBatis 核心组件</h3>\n<ol>\n<li><strong>构造器</strong>：<code>SqlSessionFactoryBuilder</code>，根据配置信息或点来生成 <code>SqlSessionFactory</code>；</li>\n<li><strong>工厂接口</strong>：<code>SqlSessionFactory</code>，依靠工厂来生成 <code>SqlSession</code>；</li>\n<li><strong>会话</strong>：<code>SqlSession</code>，是一个既可以发送 SQL 去执行返回结果，也可以获取 <code>Mapper</code> 接口；</li>\n<li><strong>SQL Mapper</strong>：新设计的组件，由一个 Java 接口和 XML 文件（或注解）构成，需要给出对象的 SQL 和映射规则。负责发送 SQL 去执行，并返回结果；</li>\n</ol>\n<h3> MyBatis 编程步骤</h3>\n<ol>\n<li>创建 <code>SqlSessionFactory</code>；</li>\n<li>通过 <code>SqlSessionFactory</code> 创建 <code>SqlSession</code>；</li>\n<li>通过 <code>SqlSession</code> 执行数据库操作；</li>\n<li>调用 <code>session.commit()</code> 提交事务；</li>\n<li>调用 <code>session.close()</code> 关闭会话；</li>\n</ol>\n<h3> MyBatis 工作原理</h3>\n<figure><figcaption>MyBatis工作原理，源自网络</figcaption></figure>\n<ol>\n<li><strong>首先读取 <code>MyBatis</code> 配置文件</strong>：<code>mybatis-config.xml</code>，它是 MyBatis 的全局配置文件，配置了 MyBatis 的运行环境等信息；</li>\n<li><strong>接着加载映射文件</strong>，即 SQL 映射文件，其中配置了操作数据库的 SQL 语句，需要在 MyBatis 配置文件 <code>mybatis-config.xml</code> 中加载。它可以加载多个映射文件，每个文件对应数据表中的一张表；</li>\n<li><strong>构造会话工厂</strong>，通过 <code>mybatis</code> 的环境等配置信息构建会话工厂 <code>SqlSessionFactory</code>；</li>\n<li><strong>创建会话对象</strong>，由会话工厂创建  <code>SqlSession</code> 对象，该对象包含执行 SQL 语句的所有方法；</li>\n<li><strong><code>Executor</code> 执行器</strong>，MyBatis 底层定义了一个 Executor 接口来操作数据库，它根据 <code>SqlSession</code> 传递的参数动态生成所需执行的 SQL 语句，同时负责查询缓存的维护；</li>\n<li><strong><code>MappedStatement</code> 对象</strong>，在 <code>Executor</code> 接口的执行方法中有一个 <code>MappedStatement</code> 类型的参数，该参数是对映射信息的封装，用于存储要映射的 SQL 语句的 <code>id</code>，参数等信息；</li>\n<li><strong>输入参数映射</strong>，输入参数类型可以是 Map、List 等集合类型，也可以是基本数据类型和 POJO 类型，此过程类似于 JDBC 对 <code>preparedStatement</code> 对象设置参数的过程；</li>\n<li><strong>输出结果映射</strong>，输出结果类型可以是 Map、List 等集合类型，也可以是基本数据类型和 POJO 类型，此过程类似于 JDBC 对结果集的解析过程；</li>\n</ol>\n<h2> 映射器</h2>\n<h3> ${} 和 #{} 的区别</h3>\n<ol>\n<li><code>${}</code> 是拼接符，字符串替换，无预编译处理；<code>#{}</code> 是占位符，预编译处理；</li>\n<li>处理 <code>#{}</code> 时，传入参数以 <strong>字符串传入</strong>，会将 SQL 中的 <code>#{}</code> 替换为 <code>?</code> ，调用 <code>PreparedStatement</code> 中的 <code>set</code> 方法来赋值；</li>\n<li>处理 <code>${}</code> 时，是 <strong>原值传入</strong>，会将 <code>${}</code> 替换为变量的值，相当于 JDBC 中的 <code>Statement</code> 编译；</li>\n<li>变量替换后 ，<code>#{}</code> 对应变量自动加上单引号 <code>‘’</code>，而 <code>${}</code> 对应变量不会加单引号 <code>‘’</code>；</li>\n<li><code>#{}</code> 能有效防止 SQL 注入，提高系统安全性，原因在于 <strong>预编译机制</strong>，预编译完成后，SQL 的结构已经固定，即使用户输入非法参数，也不会对 SQL 结构产生影响，从而避免潜在的安全风险；但 <code>${}</code> 不能防止 SQL 注入；</li>\n<li><code>#{}</code> 的变量替换是在 DBMS 中；<code>${}</code> 的变量替换是在 DBMS 外；</li>\n</ol>\n<p><strong>预编译定义</strong>：预编译是提前对 SQL 语句进行编译，而后注入的参数不会再进行 SQL 编译；而一般 SQL 注入是发生在编译过程中，因为恶意注入了某些特殊字符，最后被编译为了恶意的执行操作，而预编译机制则能很好的防止 SQL 注入；</p>\n<p><strong>SQL 注入定义</strong>：Sql 注入攻击是通过将恶意的 Sql 查询或添加语句插入到应用的输入参数中，再在后台 Sql 服务器上解析执行进行的攻击；主要有 <strong>广泛性、隐蔽性、危害大、操作方便</strong> 等特点；</p>\n<h3> 模糊查询 like</h3>\n<ol>\n<li><code>'%{question}%'</code> 可能引起 SQL 注入，不推荐使用；</li>\n<li><code>\"%{question}%\"</code>，因为 <code>#{}</code> 在解析时会在最外侧自动加单引号，所以外层需要使用双引号，不能使用单引号，否则将查询不到任何结果；</li>\n<li><code>CONCAT('%', #{question}, '%')</code>，使用 <code>CONCAT()</code> 函数，推荐使用；</li>\n<li>使用 <code>bind</code> 标签；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> mapper 中如何传递多个参数</h3>\n<ol>\n<li><strong>顺序传参</strong></li>\n</ol>\n<p><code>#{}</code> 中的数字代表传入参数的顺序，不推荐使用，因为 SQL 层表达不直观，而且一旦顺序跳转则容易出错；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>@Param 注解传参</strong></li>\n</ol>\n<p><code>#{}</code> 中的名称对应注解 <code>@Param</code> 括号中修饰的名称，是更加推荐的一种方式；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li><strong>Map 传参</strong></li>\n</ol>\n<p><code>#{}</code> 中的名称对应的是 Map 中的 <code>key</code> 名称，适合传递多个参数，且参数易变且能灵活传递的情况；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li><strong>Java Bean 传参</strong></li>\n</ol>\n<p><code>#{}</code> 中名称对应的是类中的成员属性，通过这种方法更加直观，代码可读性强、业务逻辑处理方便；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> MyBatis 批量操作</h3>\n<h4> 使用 foreach 标签</h4>\n<p><code>foreach</code> 主要用于构建 <code>in</code> 条件中，可以在 SQL 语句中进行迭代一个集合。<code>foreach</code> 标签的属性主要有 <code>item、index、collection、open、separator、close</code>；</p>\n<table>\n<thead>\n<tr>\n<th>标签</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>item</code></td>\n<td>表示集合中每个元素进行迭代时的别名，随便取的变量名</td>\n</tr>\n<tr>\n<td><code>index</code></td>\n<td>指定一个名字，用于表示在迭代过程中，每次迭代到的位置</td>\n</tr>\n<tr>\n<td><code>collection</code></td>\n<td>必须指定，但在不同情况下的值不一样：<br>1. 若传入单参数且参数类型是 <code>List</code>，则其属性值为 <code>list</code><br>2. 若传入单参数且参数类型是一个数组，则其属性置为 <code>array</code><br>3. 若传入参数是多个时，需要将其封装为一个 <code>Map</code></td>\n</tr>\n<tr>\n<td><code>open</code></td>\n<td>表示该语句以什么开始，常用 <code>(</code></td>\n</tr>\n<tr>\n<td><code>separator</code></td>\n<td>表示在每次进行迭代之间以何种符号作为分隔符，常用 <code>,</code></td>\n</tr>\n<tr>\n<td><code>close</code></td>\n<td>表示该语句以什么结束，常用 <code>)</code></td>\n</tr>\n</tbody>\n</table>\n<h4> 使用 ExecutorType.BATCH</h4>\n<p>MyBatis 内置的 <code>ExecutorType</code> 有 3 种，默认为 <code>simple</code>，此时它为每个语句的执行创建了一个新的预处理语句，单挑提交 SQL；而 <code>batch</code> 模式重复使用已预处理的语句，且批量执行所有更新数据，其性能比 <code>batch</code> 更优；</p>\n<h2> MyBatis 分页及原理</h2>\n<p>MyBatis 内部是通过 <code>RowBounds</code> 对象进行分页，它是针对 <code>ResultSet</code> 结果集执行的内存分页，而非物理分页，可以直接编写带物理分页的参数的 SQL 实现分页，也可以 MyBatis 的分页插件  Page-Helper；</p>\n<p><strong>分页插件的基本原理：</strong> 使用 MyBatis 所提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 SQL，然后重写 SQL，根据 <code>dialect</code> 方言，添加对应物理分页语句和物理分页参数；</p>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "求职面试"
      ]
    },
    {
      "title": "Java 基础面试知识点",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/interview/knowledge/20240201-java-basic.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/interview/knowledge/20240201-java-basic.html",
      "summary": "一个 Java 文件中是否可以存在多个类（修饰类除外）？ 一个 Java 文件中是可以存在多个类的，但是一个 Java 文件中只能存在一个 public 所修饰的类，而且这个 Java 文件的文件名还必须和 public 所修饰类的类名保持一致，一个简单的实例如下。 Java 有哪些特点？ 1. 面向对象，具有封装、继承、多态三大特性 2. 平台独立，...",
      "content_html": "<h1> Java 基础面试知识点</h1>\n<h2> 一个 Java 文件中是否可以存在多个类（修饰类除外）？</h2>\n<p>一个 Java 文件中是可以存在多个类的，但是一个 Java 文件中只能存在一个 <code>public</code> 所修饰的类，而且这个 Java 文件的文件名还必须和 <code>public</code> 所修饰类的类名保持一致，一个简单的实例如下。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Java 有哪些特点？</h2>\n<ol>\n<li>面向对象，具有封装、继承、多态三大特性</li>\n<li>平台独立，Java 通过 Java 虚拟机运行字节码，所以无论在哪个平台中，一旦进行编译后，都可以在其他平台运行。</li>\n<li>安全可靠</li>\n<li>支持多线程</li>\n<li>解释和编译共存</li>\n<li>安全性</li>\n<li>健壮性（Java 语言的强类型机制、异常处理、垃圾的自动收集等）</li>\n</ol>\n<h2> Java 和 C++ 的区别</h2>\n<ul>\n<li><strong>相同点</strong>：两者均为 OOP（面向对象） 语言，均支持 OOP 的三大特性（封装、继承、多态）。</li>\n<li><strong>不同点</strong>：\n<ul>\n<li>Java 不存在指针的概念，所以内存更加安全。</li>\n<li>Java 类是单继承（但是接口可以多继承），C++ 的类是多继承。</li>\n<li>Java 中有自动内存管理机制，但是 C++ 中需要开发者手动释放内存。</li>\n<li>C/C++ 中，字符串和字符数组最后均有一个额外的 <code>\\0</code> 标志来表示结束，但 Java 中不存在这一概念。</li>\n</ul>\n</li>\n</ul>\n<h2> JRE &nbsp;和 JDK 有什么不同。</h2>\n<ul>\n<li>JRE：Java Runtime Environment，即 Java 运行时环境，是用来运行已经编译过的 Java 程序所需内容的集合（JVM、Java 类库、Java 命令等），不能用来开发新程序。</li>\n<li>JDK：Java Development Kit，即 Java 开发工具包，是功能齐全的 Java SDK，包含 JRE 拥有的一切，还有编译器和其他工具，如果我们想要创建和编译新程序，就必须使用到它。</li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<h2> Java 程序编译过程</h2>\n<figure><figcaption></figcaption></figure>\n<p>我们编译的源代码（<code>xxx.java</code>）经 JDK 中的 <code>javac</code> 命令编译后，成为 JVM 能够理解的 Java 字节码（<code>xxx.class</code>），然后经由 JVM 加载，通过解释器 <strong>逐行解释执行</strong>，这就是为什么能经常听见说 <strong>Java 是一门编译和解释共存的语言</strong>。</p>\n<p>其中 JVM 是解释 Java 字节码（<code>xxx.class</code>） 的虚拟机，针对不同系统均有特定实现，方便一次编译，多次运行，即 Java 语言的平台独立性；</p>\n<h2> 说一下 Java 中的数据类型</h2>\n<p>Java 中，数据类型主要包括 8 大基本数据类型和引用数据类型两大类。</p>\n<h3> 基本数据类型</h3>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>bit</th>\n<th>字节</th>\n<th>封装类</th>\n<th>数据范围</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>byte</code></td>\n<td>8</td>\n<td>1</td>\n<td><code>Byte</code></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>7</mn></msup><mtext>&nbsp;</mtext><msup><mn>2</mn><mn>7</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-2^7 \\text{~} 2^7-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord nobreak\">&nbsp;</span></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td>16</td>\n<td>2</td>\n<td><code>Short</code></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>15</mn></msup><mtext>&nbsp;</mtext><msup><mn>2</mn><mn>15</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-2^{15} \\text{~} 2^{15}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">15</span></span></span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord nobreak\">&nbsp;</span></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">15</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>char</code></td>\n<td>16</td>\n<td>2</td>\n<td><code>Character</code></td>\n<td><code>\\\\u0000</code></td>\n<td></td>\n</tr>\n<tr>\n<td>~ <code>\\\\uffff</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>（<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mtext>&nbsp;</mtext><mn>65535</mn></mrow><annotation encoding=\"application/x-tex\">0 \\text{~} 65535</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mord text\"><span class=\"mord nobreak\">&nbsp;</span></span><span class=\"mord\">65535</span></span></span></span>）</td>\n<td><code>u0000</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td>32</td>\n<td>4</td>\n<td><code>Integer</code></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup><mtext>&nbsp;</mtext><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-2^{31} \\text{~} 2^{31}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord nobreak\">&nbsp;</span></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td>64</td>\n<td>8</td>\n<td><code>Long</code></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>63</mn></msup><mtext>&nbsp;</mtext><msup><mn>2</mn><mn>63</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-2^{63} \\text{~} 2^{63}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">63</span></span></span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord nobreak\">&nbsp;</span></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">63</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></td>\n<td><code>0L</code></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td>32</td>\n<td>4</td>\n<td><code>Float</code></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3.4</mn><msup><mi>e</mi><mrow><mo>−</mo><mn>45</mn></mrow></msup><mtext>&nbsp;</mtext><mn>1.4</mn><msup><mi>e</mi><mn>38</mn></msup></mrow><annotation encoding=\"application/x-tex\">3.4e^{-45} \\text{~} 1.4e^{38}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">3.4</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">45</span></span></span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord nobreak\">&nbsp;</span></span><span class=\"mord\">1.4</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">38</span></span></span></span></span></span></span></span></span></span></span></span></td>\n<td><code>0.0f</code></td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td>64</td>\n<td>8</td>\n<td><code>Double</code></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4.9</mn><msup><mi>e</mi><mrow><mo>−</mo><mn>324</mn></mrow></msup><mtext>&nbsp;</mtext><mn>1.8</mn><msup><mi>e</mi><mn>308</mn></msup></mrow><annotation encoding=\"application/x-tex\">4.9e^{-324} \\text{~} 1.8e^{308}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">4.9</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">324</span></span></span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord nobreak\">&nbsp;</span></span><span class=\"mord\">1.8</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">308</span></span></span></span></span></span></span></span></span></span></span></span></td>\n<td><code>0.0D</code></td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td>不确定</td>\n<td>不确定</td>\n<td><code>Boolean</code></td>\n<td><code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td>或 <code>false</code></td>\n<td><code>false</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong></p>\n<ol>\n<li><code>boolean</code> 一般用 1 <code>bit</code> 来存储，但是具体大小并未规定，JVM 在编译期将 <code>boolean</code> 类型转换为 <code>int</code>，此时 1 代表 <code>true</code>，<code>0</code> 代表 <code>false</code>。此外，JVM 还指出 <code>boolean</code> 数组，但底层是通过 <code>byte</code> 数组来实现;</li>\n<li>使用 <code>long</code> 类型时，需要在后边加上 <code>L</code>，否则将其作为整型解析，可能会导致越界；</li>\n<li>浮点数如果没有明确指定 <code>float</code> 还是 <code>double</code>，统一按 <code>double</code> 处理；</li>\n<li><code>char</code> 是用 **单引号 **<code>**‘’**</code> 将内容括起来，相当于一个整型值（ASCII 值），能够参加表达式运算；而 <code>String</code> 是用 **双引号 **<code>“”</code> 将内容括起来，代表的是一个地址值；</li>\n</ol>\n<h3> 引用类型</h3>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数组</td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td>类</td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td>接口</td>\n<td><code>null</code></td>\n</tr>\n</tbody>\n</table>\n<h2> 封装类</h2>\n<p>基本数据类型都有其对应的封装类，两者之间的赋值通过 <strong>自动装箱</strong> 和 <strong>自动拆箱</strong> 来完成；</p>\n<ul>\n<li><strong>自动装箱</strong>：将基本数据类型装箱为封装类；</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>自动拆箱</strong>：将封装类拆箱为基本数据类型；</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>基本类型与对应封装类的不同</strong>\n<ol>\n<li>基本类型只能按值传递，封装类按引用传递；</li>\n<li><strong>基本类型</strong> 会在 <strong>栈</strong> 中创建，效率较高，但可能存在内存泄露问题；<strong>封装类对象会在堆中创建</strong>，其 <strong>引用在栈中创建；</strong></li>\n</ol>\n</li>\n</ul>\n<h2> 缓存池</h2>\n<p>以 <code>new Integer(123)</code> 和 <code>Integer.valueOf(123)</code> 为例：</p>\n<ul>\n<li>通过 <code>new</code> 的方式每次都会创建一个新的对象；</li>\n<li>通过 <code>valueOf()</code> 的方式则会优先判断该值是否位于缓存池，如果在的话就直接返回缓存池中的内容，多次调用指向同一个对象的引用；</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>默认缓存池</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Byte</code></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>7</mn></msup><mtext>&nbsp;</mtext><msup><mn>2</mn><mn>7</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-2^7 \\text{~} 2^7-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord nobreak\">&nbsp;</span></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></td>\n</tr>\n<tr>\n<td><code>Character</code></td>\n<td><code>\\\\u0000</code></td>\n</tr>\n<tr>\n<td>~ <code>\\\\u007F</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>Short</code></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>7</mn></msup><mtext>&nbsp;</mtext><msup><mn>2</mn><mn>7</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-2^7 \\text{~} 2^7-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord nobreak\">&nbsp;</span></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></td>\n</tr>\n<tr>\n<td><code>Integer</code></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>7</mn></msup><mtext>&nbsp;</mtext><msup><mn>2</mn><mn>7</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-2^7 \\text{~} 2^7-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord nobreak\">&nbsp;</span></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></td>\n</tr>\n<tr>\n<td><code>Boolean</code></td>\n<td><code>true</code> &amp; <code>false</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2> 字符串 String</h2>\n<h3> 定义</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上述代码为 <code>Java 8</code> 中 <code>String</code> 的定义，其底层实际上使用的是字符（<code>char</code>）数组，而且由于被声明为 <code>final</code>，代表着它 <strong>不能被继承</strong>。而且一旦初始化之后就不能再去引用其他数组，这样就保证了 <code>String</code> 的不可变性，也因此 String 是线程安全的。</p>\n<h3> 不可变性的优点</h3>\n<ol>\n<li><strong>用于缓存 <strong><code>**hash**</code></strong> 值</strong></li>\n</ol>\n<p>由于 <code>String</code> 的 <code>hash</code> 值被频繁使用，它的不可变性使得 <code>hash</code> 值也不可变，此时只需要进行一次计算；</p>\n<ol start=\"2\">\n<li><strong>字符串常量池（String Pool）的需要</strong></li>\n</ol>\n<p>如果一个 <code>String</code> 对象已经被创建过，那么就会优先从字符串常量池中获取其引用，其不可变性确保了不同引用指向同一 <code>String</code> 对象；</p>\n<ol start=\"3\">\n<li><strong>安全性</strong></li>\n</ol>\n<p>我们经常用 <code>String</code> 作为我们方法的参数，其不变性能够保证参数不可变；</p>\n<ol start=\"4\">\n<li><strong>线程安全</strong></li>\n</ol>\n<p><code>String</code> 的不可变性让它天生 <strong>具备线程安全</strong>，能够在多个线程中方便使用而不用考虑线程安全问题。</p>\n<h3> String vs StringBuffer vs StringBuffer</h3>\n<p>主要从三个方面对三者进行对比：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>可变性</th>\n<th>线程安全</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>String</code></td>\n<td>不可变</td>\n<td>安全</td>\n<td>操作少量的数据</td>\n</tr>\n<tr>\n<td><code>StringBuffer</code></td>\n<td>可变</td>\n<td>安全，内部使用 <code>synchronized</code> 进行同步</td>\n<td>多线程操作字符串缓冲区下操作大量数据</td>\n</tr>\n<tr>\n<td><code>StringBuilder</code></td>\n<td>可变</td>\n<td>不安全</td>\n<td>单线程操作字符串缓冲区下操作大量数据，性能高于 <code>StringBuffer</code></td>\n</tr>\n</tbody>\n</table>\n<h3> 字符串常量池（String Pool）</h3>\n<p>String Pool 位于 <strong>方法区</strong>，通常保存着所有 <a href=\"https://baike.baidu.com/item/%E5%AD%97%E9%9D%A2%E9%87%8F\" target=\"_blank\" rel=\"noopener noreferrer\">字符串字面量（literal strings）</a>，在编译期间就被确定。此外，还可以用 <code>String</code> 中的 <code>intern()</code> 方法在运行过程中添加到 <code>String Pool</code> 中。当一个字符串调用 <code>intern()</code> 时，如果 <code>String Pool</code> 中已经存在字面量相同的字符串，则会返回 <code>String Pool</code> 中的引用；如果不存在，则向 <code>String Pool</code> 中添加一个新的字符串，同时返回新字符串的引用。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在下面的代码中，内存分析如下图：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> new String(“xxx”)</h3>\n<p>使用 <code>new</code> 的方式创建字符串对象，会有两种不同的情况：</p>\n<ol>\n<li><strong>String Pool 中不存在 “xxx”</strong></li>\n</ol>\n<p>此时会创建两个字符串对象，“xxx” 属于字符串字面量，因此在编译期会在 String Pool 中创建一个字符串对象，用于指向该字符串的字面量 “xxx”；然后 <code>new</code> 会在堆中创建一个字符串对象；</p>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>String Pool 中存在 “xxx”</strong></li>\n</ol>\n<p>此时只需要创建一个字符串对象，由于 String Pool 中已经存在指向 “xxx” 的对象，所以直接在堆中创建一个字符串对象；</p>\n<figure><figcaption></figcaption></figure>\n<h2> 基础语法</h2>\n<h3> 注释</h3>\n<ul>\n<li><strong>单行注释</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>多行注释</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>文档注释</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 常见关键字</h3>\n<p>![](assets/20240203-java-basic/imgJava 关键字.webp)</p>\n<h3> 标识符和关键字</h3>\n<ul>\n<li><strong>标识符</strong>：用于给程序、类、对象、变量、方法、接口、自定义数据类型等命名；</li>\n<li><strong>关键字</strong>：特殊的标识符，被 Java 赋予了特殊含义，只能有特定用途；</li>\n<li><strong>标识符命名规则</strong>（可以参考《阿里巴巴开发手册》，关注公众号【<strong>村雨遥</strong>】回复【资源下载】下载 PDF）\n<ol>\n<li>标识符由英文字符大小写（a - z, A - Z）、数字（0 - 9）、下划线（<code>_</code>）和美元符号（<code>$</code>）组成；</li>\n<li>不能以数字开头，不能是关键字；</li>\n<li>严格区分大小写；</li>\n<li>包名：多个单词组成是所有单词均小写；</li>\n<li>类名和接口：大写驼峰命名法；</li>\n<li>变量名和函数名：多个单词组成时，第一个单词全小写，其他单词采用大写驼峰命名法；</li>\n<li>常量名：字母全部大写，单词之间用下划线（<code>_</code>）分割；</li>\n</ol>\n</li>\n</ul>\n<h2> 说一下 Java 中的访问控制</h2>\n<p>Java 主要提供了 3 中访问修饰符 <code>public</code>、<code>protected</code>、<code>private</code>，但实际使用过程中，一共可以形成 4 种访问权限，分别是 <code>public</code>、<code>protected</code>、<code>private</code>、<code>default</code>，其中 <code>default</code> 是不加任何修饰符时的访问权限。关于 4 种访问权限的对比如下表，✅ 表示可以访问，❌ 表示不可访问。</p>\n<table>\n<thead>\n<tr>\n<th>作用域</th>\n<th>当前类</th>\n<th>同一 <code>package</code> 的类</th>\n<th>子类</th>\n<th>其他 <code>package</code> 的类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public</code></td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><code>protected</code></td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>❌</td>\n</tr>\n<tr>\n<td><code>default</code></td>\n<td>✅</td>\n<td>✅</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n<tr>\n<td><code>private</code></td>\n<td>✅</td>\n<td>❌</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n</tbody>\n</table>\n<h3> static、final、this、super</h3>\n<ol>\n<li><strong>static</strong></li>\n</ol>\n<p><code>static</code> 主要有如下 4 中使用场景：</p>\n<ul>\n<li><strong>修饰成员变量和成员方法</strong>：被 <code>static</code> 修饰的成员属于类，属于静态成员变量，存储在 Java 内存中的 <strong>方法区</strong>，不属于单个对象，被所有对象共享，而且最好通过 <code>类名.静态成员名/静态方法名()</code> 调用；</li>\n<li><strong>静态代码块</strong>：定义在类中方法外，先于非静态代码块之前执行（<strong>静态代码块 -&gt; 非静态代码块 -&gt; 构造方法</strong>） ，而且不管执行多少次创建新对象的操作，静态代码只执行一次；</li>\n<li><strong>静态内部类</strong>：<code>static</code> 要修饰类时，只有修饰内部类这一种用法。非静态内部类在编译后会隐含保存一个引用，用于指向创建它的外部类，但是静态内部类不存在。即内部类的创建不用依赖外围类的创建，同时内部类也只能使用任意外部类的 <code>static</code> 成员变量和方法；</li>\n<li><strong>静态导包</strong>：用于导入静态资源，<code>import static</code> 用于指定导入某一类中的静态资源，然后我们就可以直接使用类中的静态成员变量和方法；</li>\n<li><strong>注意：</strong>\n<ul>\n<li><code>abstract</code> 方法不能同时是 <code>static</code> 的，因为 <code>abstract</code> 方法需要被重写，但 <code>static</code> 方法不可以；</li>\n<li>不能从 <code>static</code> 方法内部发出对非静态方法的调用，因为静态方法只能访问静态成员，而非静态方法的调用需要先创建对象；</li>\n<li><code>static</code> 不能用于修饰局部变量；</li>\n<li>内部类与静态内部类的区别：静态内部类相对外部类是独立存在的，在静态内部类中无法直接访问外部类中变量和方法。如果要进行访问，则必须 <code>new</code> 一个外部类对象，使用该对象来进行访问，但对于静态变量和静态方法，能够直接调用。而普通的内部类作为外部类的一个成员而存在，能够直接访问外部类属性，调用外部类方法。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>final</strong></li>\n</ol>\n<ul>\n<li>修饰类时，被修饰的类不能被继承，而且类中所有成员方法均被隐式指定为 <code>final</code> 方法；</li>\n<li>修饰方法时，表明该方法无法被重写；</li>\n<li>修饰变量时，说明该变量是一个常量。若变量为基本数据类型，则一旦初始化后不能再改变；若变量是引用类型，则初始化后不能指向其他对象。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>this</strong></li>\n</ol>\n<p>用于引用类的当前实例，比如我们最常用的构造方法中，注意不能用在 <code>static</code> 方法中；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中 <code>this.age</code> 说明访问的是 <code>User</code> 类中的成员变量，而后面的 <code>age</code> 则代表传入的形参；</p>\n<ol start=\"4\">\n<li><strong>super</strong></li>\n</ol>\n<p>用于从子类访问父类中的变量和方法，注意不能用在 <code>static</code> 方法中。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> continue、break 和 return</h3>\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>continue</code></td>\n<td>用于循环结构，指跳出当前循环，进入下一次循环</td>\n</tr>\n<tr>\n<td><code>break</code></td>\n<td>用于循环结构，指跳出整个循环体，继续执行循环下面的语句</td>\n</tr>\n<tr>\n<td><code>return</code></td>\n<td>1. <code>return ;</code>进行同步：直接用 <code>return</code> 结束方法执行，用于没有返回值函数的方法；<br>2. <code>return value;</code> ：<code>return</code> 一个特定值，用于有返回值函数的方法</td>\n</tr>\n</tbody>\n</table>\n<h3> while 循环与 do 循环</h3>\n<p><code>while</code> 循环结构在循环开始前会判断下一个迭代是否应该继续，可能一次循环体都不执行。</p>\n<p><code>do……while</code> 会在循环的结果来判断是否继续下一轮迭代，至少会执行一次循环体。</p>\n<h3> final、finally、finalize</h3>\n<ol>\n<li><strong>final</strong></li>\n</ol>\n<p><code>final</code> 既是一个修饰符，也是一个关键字，修饰不同对象时，表示的意义也不一样。</p>\n<ul>\n<li><strong>修饰类：</strong> 表示该类无法被继承；</li>\n<li><strong>修饰变量</strong>：若变量是基本数据类型，则其数值一旦初始化后就不能再改变，若变量是引用类型，则在其初始化之后便不能再让其指向另一个对象，但其指向的对象的内容是可变的。</li>\n<li><strong>修饰方法</strong>：表示方法无法被重写，但是允许重载，<code>private</code> 方法会隐式指定为 <code>final</code> 方法。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>finally</strong></li>\n</ol>\n<ul>\n<li><code>finally</code> 是一个关键字，在异常处理时提供 <code>finally</code> 块来执行任何清除操作，无论是否有异常被抛出或捕获，<code>finally</code> 块均会被执行，通常用于释放资源。</li>\n<li><code>finally</code> 正常情况下一定会被执行，但是在如下两种情况下不会执行：\n<ul>\n<li>对应的 <code>try</code> 未执行，则该 <code>try</code> 块的 <code>finally</code> 块并不会被执行；</li>\n<li>若 <code>try</code> 块中 JVM 关机，则 <code>finally</code> 块也不会执行；</li>\n</ul>\n</li>\n<li><code>finally</code> 中如果有 <code>return</code> 语句，则会覆盖 <code>try</code> 或 <code>catch</code> 中的 <code>return</code> 语句，导致两者无法 <code>return</code>，所以建议 <code>finally</code> 中不要存在 <code>return</code> 关键字；</li>\n</ul>\n<ol start=\"3\">\n<li><strong>finallize</strong></li>\n</ol>\n<p><code>finallize()</code> 是 <code>Object</code> 类的 <code>protected</code> 方法，子类能够覆盖该方法以实现资源清理工作；</p>\n<p><code>GC</code> 在回收前均会调用该方法，但是 <code>finalize()</code> 方法存在如下问题：</p>\n<ul>\n<li>Java 语言规范不保证 <code>finalize()</code> 方法会被及时执行，也不保证他们一定被执行；</li>\n<li><code>finalize()</code> 方法会带来性能问题，因为 JVM 通常在单独的低优先线程中完成 <code>finalize</code> 的执行；</li>\n<li><code>finalize()</code> 方法中，可将待回收对象赋值给 <code>GC Roots</code> 可达的对象引用，从而达到对象再生的目的；</li>\n<li><code>finalize()</code> 方法最多由 GC 执行一次（但是可以手动调用对象的 <code>finalize</code> 方法）；</li>\n</ul>\n<h2> 运算符</h2>\n<h3> 算术运算</h3>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>+</code></td>\n<td>加法 - 相加运算符两侧的值</td>\n<td>A + B 等于 30</td>\n</tr>\n<tr>\n<td><code>-</code></td>\n<td>减法 - 左操作数减去右操作数</td>\n<td>A – B 等于 -10</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>乘法 - 相乘操作符两侧的值</td>\n<td>A * B等于200</td>\n</tr>\n<tr>\n<td><code>/</code></td>\n<td>除法 - 左操作数除以右操作数</td>\n<td>B / A等于2</td>\n</tr>\n<tr>\n<td><code>％</code></td>\n<td>取余 - 左操作数除以右操作数的余数</td>\n<td>B%A等于0</td>\n</tr>\n<tr>\n<td><code>++</code></td>\n<td>自增: 操作数的值增加1</td>\n<td>B++ 或 ++B 等于 21</td>\n</tr>\n<tr>\n<td><code>--</code></td>\n<td>自减: 操作数的值减少1</td>\n<td>B-- 或 --B 等于 19</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意</strong>：<code>++</code> 和 <code>--</code> 可以放在操作数之前，也可以放在操作数之后；<strong>位于操作数之前时，先自增/减，再赋值；位于操作数之后，先赋值，再自增/减</strong>；总结起来就是 <strong>符号在前就先加/减，符号在后就后加/减</strong>。</p>\n<h3> 关系运算符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>==</code></td>\n<td>检查如果两个操作数的值是否相等，如果相等则条件为真。</td>\n<td>（A == B）为假。</td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td>检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td>\n<td>(A != B) 为真。</td>\n</tr>\n<tr>\n<td><code>&gt;</code></td>\n<td>检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td>\n<td>（A&gt; B）为假。</td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td>检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td>\n<td>（A &lt;B）为真。</td>\n</tr>\n<tr>\n<td><code>&gt;=</code></td>\n<td>检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td>\n<td>（A&gt; = B）为假。</td>\n</tr>\n<tr>\n<td><code>&lt;=</code></td>\n<td>检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td>\n<td>（A &lt;= B）为真。</td>\n</tr>\n</tbody>\n</table>\n<h3> 位运算符</h3>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>＆</code></td>\n<td>如果相对应位都是 1，则结果为 1，否则为 0</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mtext>＆</mtext><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(A\\text{＆}B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mord text\"><span class=\"mord cjk_fallback\">＆</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span>，得到 12，即 0000 1100</td>\n</tr>\n<tr>\n<td>`</td>\n<td>`</td>\n<td>如果相对应位都是 0，则结果为 0，否则为 1</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>如果相对应位值相同，则结果为 0，否则为1</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi>A</mi><mi>B</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(A ^ B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05017em;\">B</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>得到 49，即 0011 0001</td>\n</tr>\n<tr>\n<td><code>〜</code></td>\n<td>按位取反运算符翻转操作数的每一位，即 0 变成 1，1 变成 0。</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mtext>&nbsp;</mtext><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">( \\text{~} A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord nobreak\">&nbsp;</span></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span> 得到 -61，即1100 0011</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td>按位左移运算符。左操作数按位左移右操作数指定的位数。</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>&lt;</mo><mo>&lt;</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">A &lt;&lt; 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> 得到 240，即 1111 0000</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code></td>\n<td>按位右移运算符。左操作数按位右移右操作数指定的位数。</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>&gt;</mo><mo>&gt;</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">A &gt;&gt; 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> 得到 15 即 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1111</mn></mrow><annotation encoding=\"application/x-tex\">1111</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1111</span></span></span></span></td>\n</tr>\n<tr>\n<td><code>&gt;&gt;&gt;</code></td>\n<td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>&gt;</mo><mo>&gt;</mo><mo>&gt;</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">A &gt;&gt;&gt; 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;&gt;&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> 得到 15 即 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>00001111</mn></mrow><annotation encoding=\"application/x-tex\">0000 1111</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">00001111</span></span></span></span></td>\n</tr>\n</tbody>\n</table>\n<h3> 逻辑运算符</h3>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&amp;&amp;</code></td>\n<td>称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td>\n<td><code>（A &amp;&amp; B）</code></td>\n</tr>\n<tr>\n<td>`</td>\n<td>`</td>\n<td>称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td>\n</tr>\n<tr>\n<td><code>!</code></td>\n<td>称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td>\n<td><code>!(A &amp;&amp; B)</code></td>\n</tr>\n<tr>\n<td>为真。</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3> 赋值运算符</h3>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>=</code></td>\n<td>简单的赋值运算符，将右操作数的值赋给左侧操作数</td>\n<td>C = A + B将把A + B得到的值赋给C</td>\n</tr>\n<tr>\n<td><code>+=</code></td>\n<td>加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>\n<td>C + = A等价于C = C + A</td>\n</tr>\n<tr>\n<td><code>-=</code></td>\n<td>减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>\n<td>C - = A等价于C = C - A</td>\n</tr>\n<tr>\n<td><code>*=</code></td>\n<td>乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>\n<td>C _ = A等价于C = C _ A</td>\n</tr>\n<tr>\n<td><code>/=</code></td>\n<td>除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>\n<td>C / = A，C 与 A 同类型时等价于 C = C / A</td>\n</tr>\n<tr>\n<td><code>％=</code></td>\n<td>取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>\n<td>C％= A等价于C = C％A</td>\n</tr>\n<tr>\n<td><code>&lt;&lt; =</code></td>\n<td>左移位赋值运算符</td>\n<td>C &lt;&lt; = 2等价于C = C &lt;&lt; 2</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;=</code></td>\n<td>右移位赋值运算符</td>\n<td>C &gt;&gt; = 2等价于C = C &gt;&gt; 2</td>\n</tr>\n<tr>\n<td><code>＆=</code></td>\n<td>按位与赋值运算符</td>\n<td>C＆= 2等价于C = C＆2</td>\n</tr>\n<tr>\n<td><code>^=</code></td>\n<td>按位异或赋值操作符</td>\n<td>C ^ = 2等价于C = C ^ 2</td>\n</tr>\n<tr>\n<td><code>&amp;#124;=</code></td>\n<td>按位或赋值操作符</td>\n<td>C | = 2等价于C = C | 2</td>\n</tr>\n</tbody>\n</table>\n<h3> 条件运算符（? :）</h3>\n<p>也叫作三元运算符，共有 3 个操作数，且需要判断布尔表达式的值；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> instanceof</h3>\n<p>用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> equals() 和 ==</h3>\n<ul>\n<li><code>==</code></li>\n</ul>\n<p>基本数据类型用 <code>==</code> 比较的是值，用于引用数据类型时判断两个对象的内存地址是否相等，即两对象是否是同一个对象；</p>\n<blockquote>\n<p>本质来讲，由于 Java 中只有值传递，所以不管是基本数据类型还是引用数据类型，比较的其实都是值，只不过引用类型变量存的值是对象的地址；</p>\n</blockquote>\n<ul>\n<li><code>equals()</code></li>\n</ul>\n<p>作用也是判断两个对象是否相等，但是 <strong>不能用于基本数据类型变量的比较</strong>。存在于 <code>Object()</code> 类中，所以所有类都具有 <code>equals()</code> 方法存在两种使用情况：</p>\n<ol>\n<li><strong>类未覆盖 <strong><code>**equals()**</code></strong> 方法</strong>：此时通过 <code>equals()</code> 比较该类的两个对象时，等价于 <code>==</code> 比较这两个对象，默认使用 &nbsp;<code>Object</code> 类中的 <code>equals()</code> 方法；</li>\n<li><strong>类覆盖了 <strong><code>**equals()**</code></strong> 方法</strong>：一旦覆盖了该方法，则用来比较两个对象的内容是否相等，如我们常用的 <code>String、BitSet、Data、File</code> 就覆盖了 <code>equals()</code> 方法；</li>\n</ol>\n<h2> 方法</h2>\n<h3> 方法的类型</h3>\n<ol>\n<li>无参无返回值；</li>\n<li>无参有返回值；</li>\n<li>有参无返回值；</li>\n<li>有参有返回值；</li>\n</ol>\n<h3> 重载和重写</h3>\n<ol>\n<li><strong>重载（Overload）</strong></li>\n</ol>\n<p>重载就是同样方法能够根据输入的不同，做出不同的处理。重载发生在 <strong>编译期</strong>，而且在同一个类中，<strong>方法名必须相同，参数类型、参数个数、参数顺序不同，返回值和访问修饰符可以不同。</strong> 总的而言：<strong>重载就是同一类中多个同名方法根据不同传参来执行不同的逻辑处理。</strong></p>\n<ol start=\"2\">\n<li><strong>重写（Override）</strong></li>\n</ol>\n<p>重写是当子类继承自父类的相同方法，输入数据一样，但最终响应不同于父类。重写发生在 <strong>运行期</strong>，是子类对父类允许访问的方法的实现逻辑进行改写。重写方法的方法名、参数列表以及返回值必须相同，抛出的异常范围不超出父类，访问修饰符的范围也不能小于父类。此外，若父类方法别 <code>private/final/static</code> 修饰，则子类无法重写父类方法，但 <code>static</code> 修饰的方法能被再次声明。<strong>构造方法是个特例，不能被重写</strong>。总结起来就是：<strong>重写即子类对父类方法的改造，外部样子不能改变，但能够改变内部逻辑</strong>。</p>\n<ol start=\"3\">\n<li><strong>重载 vs 重写</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>不同点</th>\n<th>重载</th>\n<th>重写</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>参数列表</td>\n<td>必须不同</td>\n<td>必须相同</td>\n</tr>\n<tr>\n<td>返回类型</td>\n<td>可不同</td>\n<td>必须相同</td>\n</tr>\n<tr>\n<td>访问修饰符</td>\n<td>可不同</td>\n<td>不能比父类更严格</td>\n</tr>\n<tr>\n<td>发生范围</td>\n<td>同一类中</td>\n<td>父子类</td>\n</tr>\n<tr>\n<td>异常范围</td>\n<td>可修改</td>\n<td>可以减少或删除，不能抛新异常或范围更广的异常</td>\n</tr>\n<tr>\n<td>发生阶段</td>\n<td>编译期</td>\n<td>运行期</td>\n</tr>\n</tbody>\n</table>\n<h3> 深/浅拷贝</h3>\n<ol>\n<li><strong>浅拷贝</strong></li>\n</ol>\n<p>浅拷贝是 <strong>按位拷贝对象，会创建一个新对象，该对象具有原始对象属性值的精确拷贝。</strong> 若属性是基本类型，则拷贝的是基本类型的值；若属性是引用类型（内存地址），则拷贝的是内存地址。因此，一旦其中任一对象改变了该引用类型属性，均会影响到对方；</p>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>深拷贝</strong></li>\n</ol>\n<p>深拷贝会 <strong>拷贝所有属性，同时拷贝属性指向的动态分配的内存</strong>。当对象和它引用的对象一起拷贝是即发生深拷贝，<strong>相比于浅拷贝，深拷贝速度较慢同时花销更大</strong>。</p>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li><strong>总结</strong></li>\n</ol>\n<p>浅拷贝后，改变其中任一份值都会引起另一份值的改变；而深拷贝后，改变其中任何一份值，均不会对另一份值造成影响；</p>\n<h3> 值传递</h3>\n<p>推荐阅读：<a href=\"https://juejin.im/post/5bce68226fb9a05ce46a0476\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.im/post/5bce68226fb9a05ce46a0476</a></p>\n<h4> 形参和实参</h4>\n<ol>\n<li><strong>形参</strong>：方法被调用时需要传递进来的参数，如 <code>func(String name)</code> 中的 <code>name</code> 就是一个形参，只有在 <code>func</code> 被调用时 <code>name</code> 才被分配内存空间，当方法执行完后，<code>name</code> 将自动销毁释放空间；</li>\n<li><strong>实参</strong>：方法调用时传入的实际值，在方法调用前就已经被初始化且在方法调用时被传入；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 值传递和引用传递</h4>\n<ol>\n<li><strong>值传递</strong></li>\n</ol>\n<p>方法被调用时，实参通过形参将其内容副本传入方法内部，此时形参接收的内容实际上是实参的一个拷贝，因此在方法内对形参的任何操作均只针对于实参的拷贝，不会影响到实参原始值的内容。即 <strong>值传递的是实参的一个副本，对副本的操作不会影响实参原始值，也即无论形参如何变化，都不会影响到实参的内容。</strong></p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>引用传递</strong></li>\n</ol>\n<p>引用即指向真实内容的地址值，在方法调用时，<strong>实参的地址被传递给相应形参，在方法体内，形参和实参指向同一个地址内存，因此此时操作形参也会影响到实参的真实内容。</strong></p>\n<p>但 Java 中并 <strong>不存在引用传递</strong>，因为 <strong>无论是基本类型还是引用类型，在实参传入形参时，均为值传递，即传递的都是一个副本，而非实参内容本身</strong>。</p>\n<ol start=\"3\">\n<li><strong>总结</strong></li>\n</ol>\n<p><strong>如果是对基本数据类型的数据进行操作，由于实参原始内容和副本都是存储实际值，并且处于不同栈区，因此对形参的操作，实参原始内容不受影响。</strong></p>\n<p><strong>如果是对引用类型的数据进行操作，分两种情况，</strong></p>\n<ul>\n<li><strong>一种是形参和实参保持指向同一个对象地址，则形参的操作，会影响实参指向的对象的内容。</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>另一种是形参被改动指向新的对象地址（如重新赋值引用），则形参的操作，不会影响实参指向的对象的内容。</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 面向对象</h2>\n<h3> 面向对象 vs 面向过程</h3>\n<p>推荐阅读：<a href=\"https://www.zhihu.com/question/27468564/answer/757537214\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.zhihu.com/question/27468564/answer/757537214</a></p>\n<ul>\n<li><strong>面向对象（Object Oriented）</strong></li>\n</ul>\n<p>面向过程是一种 <strong>对现实世界理解和抽象的方法</strong>，<strong>更容易维护、复用、扩展</strong>。最主要的特点就是 <strong>继承、封装、多态</strong>，所以 设计出的系统耦合性较低，但比起面向过程性能要低。</p>\n<ul>\n<li><strong>面向过程（Procedure Oriented）</strong></li>\n</ul>\n<p>面向过程是一种 <strong>以过程为中心</strong> 的编程思想，以正在发生为主要目标进行编程，不同于面向的的是谁受影响。最主要的不同就在于 <strong>封装、继承、多态</strong>，其性能比面向对象更高。</p>\n<ul>\n<li><strong>总结</strong></li>\n</ul>\n<p>面向对象的方式使得每个类都各司其职，最后整合到一起来共同完成一个项目，而面向过程则是让一个类中的功能越来越多，就像一个全栈工程师能够一个人搞定所有事。</p>\n<h3> 封装、继承、多态</h3>\n<ol>\n<li><strong>封装</strong></li>\n</ol>\n<p>将客观事物封装为抽象的类，同时类能把自己的数据和方法只让可信的类或对象进行操作，对不可信的类进行信息隐藏。即把属于同一类事物的共性（属性与方法）归到一个类，从而方便使用。</p>\n<p>通过 封装，实现了 <strong>专业分工</strong>，将能实现特定功能的代码封装为独立实体，供我们在需要时调用。此外，封装还 <strong>隐藏了信息以及实现细节</strong>，使得我们通过访问权限权限符就能将想要隐藏的信息隐藏起来。</p>\n<ol start=\"2\">\n<li><strong>继承</strong></li>\n</ol>\n<p>可以使用现有类的所有功能，且无需重写现有类来进行功能扩展，即个性对共性的属性与方法的接受，并加入特性所特有的属性与方法。通过继承的新类叫做 <strong>子类/派生类</strong>，被继承的类叫做 <strong>父类/基类/超类</strong>，具有如下特点：</p>\n<ul>\n<li><strong>子类拥有父类对象所有属性和方法，但父类中的私有属性和方法，子类是无法访问的</strong>；</li>\n<li>子类可以对父类进行扩展；</li>\n<li>子类可以用自己的方式来实现父类的方法；</li>\n</ul>\n<ol start=\"3\">\n<li><strong>多态</strong></li>\n</ol>\n<p>多态是允许 <strong>将父对象设置为和一个或多个其子对象相等的技术</strong>，赋值后，父对象能够根据指向的子类对象的特性以不同方式运作，即 <strong>父类引用指向子类对象实例</strong>，有 <strong>重载和重写</strong> 两种实现方式。具有如下特点：</p>\n<ul>\n<li>对象类型不可变，但引用类型可变；</li>\n<li>对象类型和引用类型之间有继承（类）/实现（接口）的关系；</li>\n<li>方法具有多态性，但属性不具有；</li>\n<li>若子类重写了父类方法，则真正执行的是子类覆盖的方法，若子类未覆盖父类方法，则调用父类的方法。</li>\n</ul>\n<h3> 成员变量 vs 局部变量 vs 静态变量</h3>\n<table>\n<thead>\n<tr>\n<th>不同</th>\n<th>语法</th>\n<th>存储位置</th>\n<th>生命周期</th>\n<th>初始化值</th>\n<th>调用方式</th>\n<th>别名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>成员变量</td>\n<td>1、 属于类</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>2、能被访问控制符、<code>static、final</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>等修饰</td>\n<td>堆</td>\n<td>与对象共存亡</td>\n<td>有，基本数据类型为对应默认值，而对象统一为 <code>null</code></td>\n<td>对象调用</td>\n<td>实例变量</td>\n<td></td>\n</tr>\n<tr>\n<td>局部变量</td>\n<td>1、属于方法（方法中的变量或参数）</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>2、不能被访问控制符及 <code>static</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>修饰，但可以被 <code>final</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>修饰</td>\n<td>栈</td>\n<td>与方法共存亡</td>\n<td>无，必须定义赋值后使用</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>静态变量</td>\n<td>1、属于类</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>2、被 <code>static</code></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>修饰，被所有类对象共用</td>\n<td>方法区</td>\n<td>与类共存亡</td>\n<td>同成员变量初始化值</td>\n<td>类名调用（推荐）、对象调用</td>\n<td>类变量</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3> 构造方法的特点</h3>\n<ol>\n<li>方法名与类名同名；</li>\n<li>无返回值，但不能用 <code>void</code> 关键字声明；</li>\n<li>生成类对象时自动执行，无需显式调用；</li>\n</ol>\n<h3> 抽象类 &amp; 接口</h3>\n<ol>\n<li><strong>接口</strong></li>\n</ol>\n<ul>\n<li>接口中所有方法默认是 <code>public</code>，而且不能有实现（Java 8 之前，Java 8 开始可以有默认实现）；</li>\n<li>接口中所有变量均为 <code>static、final</code>，不能有其他变量；</li>\n<li>一个类可以实现多个接口（通过 <code>implements</code> 关键字），而且接口自身可以通过 <code>extends</code> 来扩展多个接口；</li>\n<li>接口是对行为的抽象，属于行为规范；</li>\n</ul>\n<ol start=\"2\">\n<li><strong>抽象类</strong></li>\n</ol>\n<ul>\n<li>抽象类中既可以有抽象方法，也可以有非抽象的方法；</li>\n<li>一个类只能实现一个抽象类；</li>\n<li>抽象方法可以被 <code>public、protected、default</code> 修饰，但不能用 <code>private</code>，否则不能被重写；</li>\n<li>抽象是对类的抽象，是一种模板设计；</li>\n</ul>\n<h3> Object 类中常见方法</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public final native Class&lt;?&gt; getClass()</code></td>\n<td>用于返回当前运行时对象的 Class 对象，使用了final 关键字修饰，故不允许子类重写</td>\n</tr>\n<tr>\n<td><code>public native int hashCode()</code></td>\n<td>用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的 HashMap</td>\n</tr>\n<tr>\n<td><code>public boolean equals(Object obj)</code></td>\n<td>用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写用户比较字符串的值是否相等</td>\n</tr>\n<tr>\n<td><code>protected native Object clone() throws CloneNotSupportedException</code></td>\n<td>用于创建并返回当前对象的一份浅拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为true，x.clone().getClass() == x.getClass() 为 true。Object 本身没有实现 Cloneable 接口，所以不重写clone方法并且进行调用的话会发生CloneNotSupportedException 异常</td>\n</tr>\n<tr>\n<td><code>public String toString()</code></td>\n<td>返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法</td>\n</tr>\n<tr>\n<td><code>public final native void notify()</code></td>\n<td>不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个</td>\n</tr>\n<tr>\n<td><code>public final native void notifyAll()</code></td>\n<td>不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程</td>\n</tr>\n<tr>\n<td><code>public final native void wait(long timeout) throws InterruptedException</code></td>\n<td>不能重写。暂停线程的执行注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间，调用该方法后当前线程进入睡眠状态，知道如下时间发生：</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>其他线程调用该对象的 <code>notify()/notifyAll()</code>\n方法；</li>\n<li>时间间隔到了；</li>\n<li>其他线程调用了 <code>interrupt()</code>\n中断该线程； |\n| <code>public final void wait(long timeout, int nanos) throws InterruptedException</code> | 多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 毫秒 |\n| <code>public final void wait() throws InterruptedException</code> | 跟之前的 2 个 wait 方法一样，只不过该方法一直等待，没有超时时间这个概念 |\n| <code>protected void finalize() throws Throwable { }</code> | 实例被垃圾回收器回收的时候触发的操作 |</li>\n</ol>\n<h3> hashCode &amp; equals</h3>\n<p>推荐阅读：<a href=\"https://juejin.im/post/5a4379d4f265da432003874c\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.im/post/5a4379d4f265da432003874c</a></p>\n<h4> equals</h4>\n<ol>\n<li>重写 <code>equals()</code> 方法的准则：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>准则</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>自反性</strong></td>\n<td>对任意非空引用值 <code>x</code></td>\n</tr>\n<tr>\n<td>，<code>x.equals(x)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>应该返回 <code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>对称性</strong></td>\n<td>对于任何非空引用值 <code>x</code></td>\n</tr>\n<tr>\n<td>和 <code>y</code></td>\n<td></td>\n</tr>\n<tr>\n<td>，当 <code>y.equals(x)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>返回 <code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td>时，<code>x.equals(y)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>也应返回 <code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>传递性</strong></td>\n<td>对于任何非空引用值<code>x、y</code></td>\n</tr>\n<tr>\n<td>和 <code>z</code></td>\n<td></td>\n</tr>\n<tr>\n<td>，如果 <code>x.equals(y)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>返回 <code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td>， 并且 <code>y.equals(z)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>返回 <code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td>，那么 <code>x.equals(z)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>也应返回 <code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>一致性</strong></td>\n<td>对于任何非空引用值 <code>x</code></td>\n</tr>\n<tr>\n<td>和 &nbsp;<code>y</code></td>\n<td></td>\n</tr>\n<tr>\n<td>，多次调用 <code>x.equals(y)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>始终返回 <code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td>或始终返回 <code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>， 前提是对象上 <code>equals</code></td>\n<td></td>\n</tr>\n<tr>\n<td>比较中所用的信息没有被修改</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>非空性</strong></td>\n<td>对于任何非空引用值 <code>x</code></td>\n</tr>\n<tr>\n<td>，<code>x.equals(null)</code></td>\n<td></td>\n</tr>\n<tr>\n<td>都应返回 <code>false</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4> hashCode</h4>\n<p><code>hashCode</code> 用于返回对象 <code>hash</code> 值，主要是为了加快查找的快捷性，因为 <code>hashCode()</code> 是 <code>Object</code> 类中的方法，所以所有 Java 类均有 <code>hashCode()</code>，在 <code>HashTable</code> 和 <code>HashMap</code> 这类的散列结构中，均是通过 <code>hashCode()</code> 来查找在散列表中位置，通过 <code>hashCode</code> 能够较快的茶道小内存块。</p>\n<h4> 为什么重写 <code>equals()</code> 必须重写 <code>hashCode()</code></h4>\n<ol>\n<li>若两个对象相等，则 <code>hashCode()</code> 一定也相同，因为 <code>equals()</code> 是绝对可靠的；</li>\n<li>两个对象相等，则两个对象分别调用 <code>equals()</code> 方法也返回 <code>true</code>；</li>\n<li>两个对象有相同的 <code>hashCode()</code>，他们不一定相等，因为 <code>hashCode()</code> 不是绝对可靠的；</li>\n<li>如果重写了 <code>equals()</code>，但保留 <code>hashCode()</code> 的实现不变，则可能出现两者相等，但 <code>hashCode</code> 却不一样；</li>\n<li>因此，一旦重写了 <code>equals()</code> 方法，则必须重写 <code>hashCode()</code>，<code>hashCode()</code> 的默认行为是对堆上的对象产生独特值。如果没有重写 <code>hashCode()</code>，则该 <code>class</code> 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。</li>\n</ol>\n<h3> 序列化与反序列化</h3>\n<h4> 定义</h4>\n<ul>\n<li><strong>序列化</strong>：指将对象转换为字节序列的过程；</li>\n<li><strong>反序列化</strong>：指将字节序列转换为目标对象的过程；</li>\n</ul>\n<h4> 需要序列化的场景</h4>\n<p>当 Java 对象需要在网络上传输或者持久化存储到文件中时，我们就需要对象进行序列化；</p>\n<h4> 如何实现序列化</h4>\n<p>要实现序列化，只需要让类实现 <code>Serializable</code> 接口即可，此时就标注该类对象能够被序列化；</p>\n<p>针对类中某些数据不想序列化时，可以使用 <code>transient</code> 关键字来实现，例如：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2024-02-01T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "求职面试"
      ]
    },
    {
      "title": "Java 进阶面试知识点",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/interview/knowledge/20240203-java-advanced.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/interview/knowledge/20240203-java-advanced.html",
      "summary": "异常 异常类层次结构 从结构图可以看出，所有异常均继承自 Throwable 类，它有两个重要的子类：Exception 和 Error ，各自又包含大量子类。 1. Exception 程序本身可以处理的异常，又可以分为 受检异常 和  非受检异常 ，受检异常 可以用 try...catch... 语句进行捕获处理，而且能从异常中恢复。但 非受检异常...",
      "content_html": "<h1> Java 进阶面试知识点</h1>\n<h2> 异常</h2>\n<h3> 异常类层次结构</h3>\n<figure><figcaption></figcaption></figure>\n<p>从结构图可以看出，所有异常均继承自 <code>Throwable</code> 类，它有两个重要的子类：<code>Exception</code> 和 <code>Error</code> ，各自又包含大量子类。</p>\n<ol>\n<li><strong>Exception</strong></li>\n</ol>\n<p><strong>程序本身可以处理的异常</strong>，又可以分为 <strong>受检异常</strong> 和 &nbsp;<strong>非受检异常</strong> ，<strong>受检异常</strong> 可以用 <code>try...catch...</code> 语句进行捕获处理，而且能从异常中恢复。但 <strong>非受检异常</strong> 是程序运行时错误，会导致程序崩溃而无法恢复。</p>\n<ol start=\"2\">\n<li><strong>Error</strong></li>\n</ol>\n<p><strong>程序无法处理的错误</strong>，表示程序运行过程中较严重的问题，大多与 coder 所做操作无关，而是代码运行时 JVM 出现的问题。此时说明故障发生于虚拟机本身、或者发生在虚拟机试图执行应用时。</p>\n<h3> Throwable 常用方法</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public String getMessage()</code></td>\n<td>返回异常发生时的简要描述</td>\n</tr>\n<tr>\n<td><code>public String toString()</code></td>\n<td>返回异常发生时的详细信息</td>\n</tr>\n<tr>\n<td><code>public String getLocalizeMessage()</code></td>\n<td>返回异常对象的本地化信息，若子类重写该方法，可以生成本地化信息，若未重写，则返回信息同 <code>getMessage()</code></td>\n</tr>\n<tr>\n<td>方法</td>\n<td></td>\n</tr>\n<tr>\n<td><code>public void printStackTrace()</code></td>\n<td>在控制台中打印异常对象封装的异常信息</td>\n</tr>\n</tbody>\n</table>\n<h3> try-catch-finally 和 try-with-resources</h3>\n<ol>\n<li><strong>try-catch-finally</strong>\n<ul>\n<li><strong>try</strong> ：用于捕获异常，后接零个或多个 <code>catch</code>，没有 <code>catch</code> 则必须加上 <code>finally</code>；</li>\n<li><strong>catch</strong>：用于处理 <code>try</code> 捕获到的异常；</li>\n<li><strong>finally</strong>：无论是否捕获/处理异常，<code>finally</code> 块中内容均会执行，就算 <code>try</code> 或 <code>catch</code> 中有 <code>return</code> 语句，<code>finally</code> 中代码也将在方法返回之前执行；</li>\n</ul>\n</li>\n<li><strong>try-with-resources</strong></li>\n</ol>\n<p>当我们有必须要关闭的资源时，建议优先使用 <code>try-with-resources</code>，这样写出的代码更加简短清晰。</p>\n<ol start=\"3\">\n<li><strong>两者对比</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> IO</h2>\n<h3> IO 流的定义</h3>\n<p>IO 流是一种数据的流从源头流到目的地，如文件拷贝操作，输入和输出流都包括了。输入流从文件中读取数据存储到进程，然后输出流从进程中读取数据写入到目标文件；</p>\n<h3> IO 分类</h3>\n<p>Java IO 共涉及 40 多个类，均从如下 4 个抽象类中派生而来：</p>\n<ol>\n<li><code>InputStream</code>：所有输入流的基类，<strong>字节输入流</strong></li>\n<li><code>OutputStream</code>：所有输出流的基类，<strong>字节输出流</strong></li>\n<li><code>Reader</code>：所有输入流的基类，<strong>字符输入流</strong></li>\n<li><code>Writer</code>：所有输出流的基类，<strong>字符输出流</strong></li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<h3> 字节流 vs 字符流</h3>\n<p>推荐阅读：<a href=\"https://www.zhihu.com/question/39262026\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.zhihu.com/question/39262026</a></p>\n<ol>\n<li><strong>字节流</strong></li>\n</ol>\n<p><code>1 Byte = 8 bit</code>，<strong>字节流处理的最基本单位为单个字节</strong>，默认不使用缓冲区，而是直接操作磁盘文件，常用于处理音频、图片等媒体文件二进制数据；</p>\n<ol start=\"2\">\n<li><strong>字符流</strong></li>\n</ol>\n<p><code>1 char = 2 Byte = 16 bit</code>，<strong>字符流处理的最基本的单元是 Unicode 码元</strong>，更适合对于操作需要通过 IO 在内存中频繁处理字符串的情况，因为字符流具有缓冲区，性能更高，常用于处理文本数据；</p>\n<ol start=\"3\">\n<li><strong>有了字节流，为什么还要字符流？</strong></li>\n</ol>\n<p>字节流由 JVM 将字节转换而来，但是该过程非常耗时，而且一旦编码未知就很容易导致乱码。为了解决这个问题，所以提供了一个直接操作字符的接口，从而方便我们对字符进行流处理。</p>\n<h3> BIO、NIO 和 AIO</h3>\n<p>推荐阅读：<a href=\"https://zhuanlan.zhihu.com/p/83597838\" target=\"_blank\" rel=\"noopener noreferrer\">https://zhuanlan.zhihu.com/p/83597838</a></p>\n<ol>\n<li><strong>BIO (Blocking I/O)</strong></li>\n</ol>\n<p><strong>BIO 特点</strong>：就是 IO 执行的两个阶段用户进程都会阻塞住；</p>\n<p>最传统的一种 IO 模型，在读写过程中会发生阻塞现象。当线程发出 IO 请求后，内核查看数据是否就绪，若未就绪就等待数据就绪，此时用户线程处于阻塞状态，用户线程交出 CPU。一旦数据准备就绪，内核就将数据拷贝到用户线程并返回结果给用户线程，此时用户线程才接触阻塞状态。</p>\n<p><strong>同步阻塞</strong> I/O 模式，数据的读取写入必须阻塞在一个线程内等待其完成。适合于连接数较小（小于单机 1000）且固定的框架，该方式对服务器资源要求较高，并发局限于应用中，是 JDK 1.4 之前唯一的选择。该模式让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。</p>\n<p>线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的，因此，需要更加高效的模式来处理更高的并发量。</p>\n<p>假设一个烧开水的场景，有一排水壶在烧开水，BIO 的工作模式就是， 一个线程对应一个水壶，在当前水壶烧开后，才去处理下一个水壶。但是实际上线程在等待水壶烧开的时间段什么都没有做。</p>\n<p>总结而言，一个典型的读操作流程大致为：</p>\n<ul>\n<li>用户进程调用 <code>recvfrom</code> 系统调用，内核此时开始 IO 第一阶段：<strong>准备数据，将数据拷贝到内核缓冲区中</strong>；</li>\n<li>等到数据拷贝到操作系统内核缓冲区后，进入 IO 第二阶段：<strong>将数据从内核缓冲区拷贝到用户内存，然后内核返回结果，用户进程才会解除 <strong><code>**block**</code></strong> 状态，重新运行起来</strong>；</li>\n</ul>\n<ol start=\"2\">\n<li><strong>NIO (Non-blocking/New I/O)</strong></li>\n</ol>\n<p><strong>NIO 特点</strong>：用户进程需要不断的主动询问内核数据准备好没有；</p>\n<p>用户线程不断询问内核数据是否就绪，即 NIO 不会交出 CPU，而是一直占用 CPU，直到数据准备好。</p>\n<p>NIO 是一种 <strong>同步非阻塞</strong> 的 I/O 模型，在 Java 1.4 中引入了 NIO 框架，对应 <code>java.nio</code> 包，提供了 Channel , Selector，Buffer 等抽象，适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器。NIO 中的 N 可以理解为 <code>Non-blocking</code>，不单纯是 <code>New</code>。它支持 <strong>面向缓冲</strong> 的，<strong>基于通道</strong> 的 I/O 操作方法。</p>\n<p>NIO 提供了与传统 BIO 模型中的 <code>Socket</code> 和 <code>ServerSocket</code> 相对应的 <code>SocketChannel</code> 和 <code>ServerSocketChannel</code> 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞 I/O 来提升开发速率和更好的维护性；对于 <strong>高负载、高并发的（网络）应用</strong>，应使用 NIO 的非阻塞模式来开发。</p>\n<p>还拿烧开水场景来说，NIO 的做法是让一个线程不断的轮询每个水壶的状态，看看是否有水壶的状态发生了改变，从而进行下一步的操作。</p>\n<ol start=\"3\">\n<li><strong>AIO (Asynchronous I/O)</strong></li>\n</ol>\n<p>AIO 中，<strong>有一个线程不断去轮询多个 Socket 的状态，只有当 Socket 真正有读写事件时，才真正调用实际的 IO 读写操作</strong>。</p>\n<p>AIO 也就是 NIO 2，在 Java 7 中引入了 NIO 的改进版 NIO 2,它是 <strong>异步非阻塞</strong> 的 IO 模型，适合连接数目多且连接比较长（重操作）的架构，比如相册服务器。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</p>\n<p>AIO 是异步 IO 的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO 操作本身是同步的。</p>\n<p><strong>AIO 比 NIO 效率高的原因在于在 NIO 中，不断询问 Socket 状态是通过用户线程去实现的，但在 AIO 中，轮询 Socket 状态是内核来进行的，效率比用户线程高</strong>。</p>\n<p>对应烧开水场景中就是，为每个水壶上面装了一个开关，水烧开之后，水壶会自动通知我水烧开了。</p>\n<h3> 读取大数据量文件，如何选择流？</h3>\n<p>选用字节流时，选择 <code>BufferedInputStream</code> 和 <code>BufferedOutputStream</code>；</p>\n<p>选用字符流时，选用 <code>BufferedReader</code> 和 <code>BufferedWriter</code>；</p>\n<h3> NIO</h3>\n<h4> NIO 与 IO 的区别？</h4>\n<table>\n<thead>\n<tr>\n<th>IO</th>\n<th>NIO</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>面向流</td>\n<td>面向缓冲</td>\n</tr>\n<tr>\n<td>阻塞 IO</td>\n<td>非阻塞 IO</td>\n</tr>\n<tr>\n<td>无</td>\n<td>选择器</td>\n</tr>\n<tr>\n<td>少量连接，但每次要发送大量数据</td>\n<td>大量连接，但连接每次只发送少量数据</td>\n</tr>\n</tbody>\n</table>\n<p>NIO 是为了弥补传统 IO 不足而诞生，但也存在如下缺点：<strong>因为 NIO 是面向缓冲区的操作，每次的数据处理均是对缓冲区进行的，所以在数据处理之前必须判断缓冲区的数据是否完整或已经读取完毕，如果没有，则假设数据只读取了一部分，对不完整的数据处理无任何意义。</strong></p>\n<h4> NIO 核心组件</h4>\n<ol>\n<li>NIO 核心组件可以分为如下三个：\n<ul>\n<li>channel</li>\n<li>buffer</li>\n<li>selector</li>\n</ul>\n</li>\n<li><strong>channel</strong></li>\n</ol>\n<p>一个 <code>channel</code> （通道）代表和某一实体的连接，该实体可以是文件、网络套接字等。即 NIO 中的 <code>channel</code> 相当于一个中介，用于程序和操作系统底层 I/O 服务进行交互；</p>\n<p>一般最常用的通道实现有：</p>\n<ul>\n<li><code>FileChannel</code>：读写文件；</li>\n<li><code>DatagramChannel</code>：UDP 协议网络通信；</li>\n<li><code>SocketChannel</code> ：TCP 协议网络通信；</li>\n<li><code>ServerSocketChannel</code>：监听 TCP 连接；</li>\n</ul>\n<ol start=\"3\">\n<li><strong>buffer</strong></li>\n</ol>\n<p>NIO 中的缓冲区不是一个简单的 <code>byte</code> 数组，而是封装过的 <code>Buffer</code> 类，NIO 提供了 <code>ByteBuffer、CharBuffer、IntBuffer</code> 等，他们之间的区别在于读写缓冲区时的单位长度不一样；</p>\n<p><code>buffer</code> 有如下基本操作来进行读写数据：</p>\n<ul>\n<li>将数据写入 <code>buffer</code>；</li>\n<li>调用 <code>buffer.flip()</code>；</li>\n<li>将数据从 &nbsp;<code>buffer</code> 中读取数据；</li>\n<li>调用 <code>buffer.clean</code> 或 <code>buffer.compact()</code>；</li>\n</ul>\n<ol start=\"4\">\n<li><strong>selector</strong></li>\n</ol>\n<p>选择器是一个特殊组件，用于采集各个通道的状态。现将通道注册到选择器，并设置好关心的时间，然后就可以通过调用 <code>select()</code> 方法，等待事件发生即可；</p>\n<h2> 集合</h2>\n<h3> Collections 工具类</h3>\n<p><code>java.util.Collections</code> 工具类提供了许多常用方法，而且都是静态（<code>static</code>）的，可以分为如下几类：</p>\n<ol>\n<li><strong>排序（主要针对 List 接口）</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void reverse(List list)</code></td>\n<td>反转指定 <code>List</code></td>\n</tr>\n<tr>\n<td>集合中元素的顺序</td>\n<td></td>\n</tr>\n<tr>\n<td><code>void shuffle(List list)</code></td>\n<td>对 <code>List</code></td>\n</tr>\n<tr>\n<td>中的元素进行随机排序（洗牌）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>void sort(List list)</code></td>\n<td>对 <code>List</code></td>\n</tr>\n<tr>\n<td>里的元素根据自然升序排序</td>\n<td></td>\n</tr>\n<tr>\n<td><code>void sort(List list, Comparator c)</code></td>\n<td>自定义比较器进行排序</td>\n</tr>\n<tr>\n<td><code>void swap(List list, int i, int j)</code></td>\n<td>将指定 <code>List</code></td>\n</tr>\n<tr>\n<td>集合中 <code>i</code></td>\n<td></td>\n</tr>\n<tr>\n<td>处元素和 <code>j</code></td>\n<td></td>\n</tr>\n<tr>\n<td>处元素进行交换</td>\n<td></td>\n</tr>\n<tr>\n<td><code>void rotate(List list, int distance)</code></td>\n<td>将所有元素向右移位指定长度，如果 <code>distance</code></td>\n</tr>\n<tr>\n<td>等于 <code>size</code></td>\n<td></td>\n</tr>\n<tr>\n<td>那么结果不变</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li><strong>查找、替换（主要针对 Collection 接口）</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>int binarySearch(List list, Object key)</code></td>\n<td>使用二分搜索法，以获得指定对象在 <code>List</code></td>\n</tr>\n<tr>\n<td>中的索引，前提是集合有序</td>\n<td></td>\n</tr>\n<tr>\n<td><code>int max(Collection coll)</code></td>\n<td>返回最大元素</td>\n</tr>\n<tr>\n<td><code>int max(Collection coll, Comparator c)</code></td>\n<td>根据自定义比较器，返回最大元素</td>\n</tr>\n<tr>\n<td><code>int min(Collection coll)</code></td>\n<td>返回最小元素</td>\n</tr>\n<tr>\n<td><code>int min(Collection coll, Comparator c)</code></td>\n<td>根据自定义比较器，返回最小元素</td>\n</tr>\n<tr>\n<td><code>void fill(List list, Object obj)</code></td>\n<td>使用指定对象填充 <code>List</code></td>\n</tr>\n<tr>\n<td><code>int frequency(Collection c, Object o)</code></td>\n<td>返回指定集合中指定对象出现的次数</td>\n</tr>\n<tr>\n<td><code>int indexOfSubList(List list, List target)</code></td>\n<td>统计 <code>target</code></td>\n</tr>\n<tr>\n<td>在 <code>list</code></td>\n<td></td>\n</tr>\n<tr>\n<td>中第一次出现的索引，找不到则返回 -1</td>\n<td></td>\n</tr>\n<tr>\n<td><code>boolean replaceAll(List list, Object oldVal, Object newVal)</code></td>\n<td>替换</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li><strong>同步控制</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>synchronizedCollection(Collection&lt;T&gt; c)</code></td>\n<td>返回指定 <code>collection</code></td>\n</tr>\n<tr>\n<td>支持的同步（线程安全的）<code>collection</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>synchronizedList(List&lt;T&gt; list)</code></td>\n<td>返回指定列表支持的同步（线程安全的）<code>List</code></td>\n</tr>\n<tr>\n<td><code>synchronizedMap(Map&lt;K,V&gt; m)</code></td>\n<td>返回由指定映射支持的同步（线程安全的）<code>Map</code></td>\n</tr>\n<tr>\n<td><code>synchronizedSet(Set&lt;T&gt; s)</code></td>\n<td>返回指定 <code>set</code></td>\n</tr>\n<tr>\n<td>支持的同步（线程安全的）<code>set</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li><strong>设置不可变集合</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>emptyXxx()</code></td>\n<td>返回一个空的不可变的集合对象，此处的集合可以是 <code>List</code></td>\n</tr>\n<tr>\n<td>、<code>Set</code></td>\n<td></td>\n</tr>\n<tr>\n<td>、 <code>Map</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>singletonXxx()</code></td>\n<td>返回一个只包含指定对象（只有一个或一个元素）的不可变集合对象，此处的集合可以是 <code>List</code></td>\n</tr>\n<tr>\n<td>、<code>Set</code></td>\n<td></td>\n</tr>\n<tr>\n<td>、 <code>Map</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>unmodifiableXxx()</code></td>\n<td>返回指定集合对象的不可变视图，此处的集合既可以是<code>List</code></td>\n</tr>\n<tr>\n<td>、<code>Set</code></td>\n<td></td>\n</tr>\n<tr>\n<td>、 <code>Map</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3> Arrays 工具类</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sort()</code></td>\n<td>排序</td>\n</tr>\n<tr>\n<td><code>binarySearch</code></td>\n<td>二分查找</td>\n</tr>\n<tr>\n<td><code>equals()</code></td>\n<td>比较</td>\n</tr>\n<tr>\n<td><code>fill()</code></td>\n<td>填充</td>\n</tr>\n<tr>\n<td><code>asList()</code></td>\n<td>转换为列表</td>\n</tr>\n<tr>\n<td><code>toString()</code></td>\n<td>转换为字符串</td>\n</tr>\n<tr>\n<td><code>copyOf()</code></td>\n<td>复制</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><code>sort()</code></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><code>bianrySearch()</code></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li><code>equals()</code></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li><code>fill()</code></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"5\">\n<li><code>asList()</code></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"6\">\n<li><code>toString()</code></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"7\">\n<li><code>copyOf()</code></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>有关集合的更多内容，可以参看 <a href=\"4.Java%E5%AE%B9%E5%99%A8\">Java 容器知识点总结</a>。</p>\n<h2> 泛型</h2>\n<p>推荐阅读：<a href=\"https://juejin.im/post/5b614848e51d45355d51f792\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.im/post/5b614848e51d45355d51f792</a></p>\n<h3> 什么是泛型？使用泛型的好处？</h3>\n<p>泛型是 JDK 5 后引入的新特性，提供了 <strong>编译期的类型安全检测机制</strong>，确保将正确类型的对象放入集合，避免了运行时报 <code>ClassCastException</code>。其本质是 <strong>参数化类型</strong>，即所操作的数据类型被指定为一个参数。</p>\n<p><strong>注意</strong>：虽然编译期在编译过程中移除了参数的类型信息，但会保证类或方法内部参数类型的一致性；</p>\n<h3> 泛型的工作机制？</h3>\n<p>类型擦除：指 Java 编译器生成的字节码不包含泛型信息；</p>\n<p>泛型是通过 <strong>类型擦除</strong> 来实现，编译期在 <strong>编译时擦除所有类型相关信息</strong>，因此在运行时不存在任何类型相关的信息。我们无法在运行时访问到类型参数，因为编译器已经把泛型类型转换成了原始类型。</p>\n<h3> 泛型的三种使用方式</h3>\n<ul>\n<li><strong>泛型类</strong>：通过传入不同类型的数据，可以存储相应类型的数据；</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>泛型接口</strong>：泛型接口未传入泛型实参时，与泛型类的定义相同，在声明类的时候，需将泛型的声明也一起加到类中；若泛型接口传入类型参数时，实现该泛型接口的实现类，则所有使用泛型的地方都要替换成传入的实参类型；</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>泛型方法</strong>：可以存在泛型类中，也可以存在普通类中，<strong>如果用泛型方法能够解决的问题，就尽量使用泛型方法</strong>。</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 泛型通配符？</h3>\n<ul>\n<li><strong>T（type）</strong>：表示具体的一个 Java 类型；</li>\n<li><strong>K V（key value）</strong>：代表 Java 键值对；</li>\n<li><strong>E（element）</strong>：代表 Element；</li>\n<li><strong>?</strong>：表示不确定的 Java 类型；</li>\n</ul>\n<h3> 限定通配符和非限定通配符？</h3>\n<p><strong>限定通配符</strong> 对类型进行限制，分为两种（<code>&lt;? extends T&gt;</code> 和 <code>&lt;? super T&gt;</code>）.<code>&lt;? extends T&gt;</code> 通过确保类型必须为 <code>T</code> 的子类来设定类型的上界；而 <code>&lt;? super T&gt;</code> 通过确保类型必须是 <code>T</code> 的父类来设定类型的下界。泛型类型必须用限定内的类型来进行初始化，否则将导致编译错误。</p>\n<p><strong>非限定通配符</strong>，<code>&lt;?&gt;</code>，可以用任意类型来替代。</p>\n<h3> 可以把 List 传递给一个接受 List</h3>\n<p>不可以，因为 <code>List&lt;String&gt;</code> 中只能用来存储 <code>String</code>，而 &nbsp;<code>List&lt;Object&gt;</code> 中却能存储任意类型的对象（<code>String、Integer</code> 等） 。</p>\n<h3> Array 中是否可以使用泛型？</h3>\n<p>不可以，但是用 <code>List</code> 来代替 <code>Array</code>，因为 <code>List</code> 可以提供编译期的类型安全保证，但 <code>Array</code> 不能。</p>\n<h2> 多线程</h2>\n<h3> 线程、进程、程序</h3>\n<p>推荐阅读：<a href=\"https://juejin.im/post/5c932660f265da612524ad6d\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.im/post/5c932660f265da612524ad6d</a></p>\n<ol>\n<li><strong>程序</strong></li>\n</ol>\n<p>程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个<strong>静态</strong>的概念。</p>\n<ol start=\"2\">\n<li><strong>线程</strong></li>\n</ol>\n<p>有时被称为轻量进程(Lightweight Process，LWP），<strong>是程序执行流的最小单元，是被系统独立调度和分派的基本单位</strong>。线程是比进程更小的执行单位，一个进程在执行过程中可能会产生多个线程，但 <strong>不同于进程是同类的多个线程共享同一块内存空间和一组系统资源</strong>。</p>\n<ol start=\"3\">\n<li><strong>进程</strong></li>\n</ol>\n<p>进程是据有独立功能的程序在某个数据集合上的一次运行活动，<strong>也是操作系统进行资源分配和保护的基本单位</strong>，因此是动态的。</p>\n<p>从 <strong>原理</strong> 角度上看：进程是支持程序执行的一种系统机制，对 CPU 上运行程序的活动规律进行抽象。</p>\n<p>从 <strong>实现</strong> 角度看：进程是一种数据结构，用来准确的刻画运行程序的状态和系统动态变化状况。</p>\n<p>系统运行一个程序即是一个进程从创建，运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如 CPU 时间，内存空间，文件，输入输出设备的使用权等等。</p>\n<p>换句话说，当程序在执行时，将会被操作系统载入内存中。 线程是进程划分成的更小的运行单位。<strong>线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定</strong>，因为同一进程中的线程极有可能会相互影响。</p>\n<p>从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。</p>\n<h3> 线程基本状态</h3>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>NEW</code></td>\n<td>初始状态，创建线程，但还未调用 <code>start()</code></td>\n</tr>\n<tr>\n<td>方法</td>\n<td></td>\n</tr>\n<tr>\n<td><code>RUNNABLE</code></td>\n<td>运行状态，“就绪” 和 “运行” 两种状态统称 “运行中”</td>\n</tr>\n<tr>\n<td><code>BLOCKED</code></td>\n<td>阻塞状态，表示线程阻塞于锁</td>\n</tr>\n<tr>\n<td><code>WAITING</code></td>\n<td>等待状态，线程进行等待状态，进入该状态表示当前线程需要等待其他线程做出通知或中断</td>\n</tr>\n<tr>\n<td><code>TIME_WAITING</code></td>\n<td>超时等待状态，不同于 <code>WAITING</code></td>\n</tr>\n<tr>\n<td>，经过指定时间后可以自行返回</td>\n<td></td>\n</tr>\n<tr>\n<td><code>TERMINATED</code></td>\n<td>终止状态，表示线程执行完毕</td>\n</tr>\n</tbody>\n</table>\n<figure><figcaption></figcaption></figure>\n<p>上图源自《Java 并发编程艺术》，可以看出一个线程的状态变迁过程：</p>\n<p>线程创建后处于 <code>NEW</code> 状态，然后调用 <code>start()</code> 方法后开始运行，此时处于 <code>READY</code> 状态，接着一旦可运行状态的线程获得了 CPU 时间片之后，就处于 <code>RUNNING</code> 状态。如果线程执行了 <code>wait()</code> 方法，则进入 <code>WAITING</code> 状态。进入 <code>WAITING</code> 状态的线程池需要依靠其他线程的通知后才能返回 <code>RUNNING</code> 状态。而 <code>TIME_WAITING</code> 状态相当于在 <code>WAITING</code> 状态的基础上增加了超时限制，当超时后线程将自动返回 <code>RUNNABLE</code> 状态。当线程调用同步方法后，如果没有获取到锁，线程将进入 <code>BLOCKED</code> 状态。同时，如果线程执行了 <code>RUNNABLE</code> 的 <code>run()</code> 方法，线程将进入 <code>TERMINATED</code> 状态。</p>\n<h3> 使用多线程的三种方式</h3>\n<ol>\n<li><strong>继承 Thread 类</strong></li>\n</ol>\n<p>需要实现 <code>run()</code> 方法，其底层也实现了 <code>Runnable</code> 接口。当调用 <code>start()</code> 方法启动一个线程时，虚拟机会将该线程放入就绪队列中等待被调度，当一个线程被调度时会执行该线程的 <code>run()</code>方法。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>实现 Runnable 接口</strong></li>\n</ol>\n<p>使用 <code>Runnable</code> 实例再创建一个 <code>Thread</code> 实例，然后调用 <code>Thread</code> 实例中的 <code>start()</code> 方法来启动线程。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li><strong>实现 Callable 接口</strong></li>\n</ol>\n<p>相比于 <code>Runnable</code>，<code>Callable</code> 可以有返回值，结果通过 <code>FutureTask</code> 进行封装；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 线程优先级</h3>\n<p>每个线程都有各自优先级，默认情况下均为 <code>Thread.NORM_PRIORITY(5)</code>。线程优先级能在程序中表明该线程的重要性，若许多线程均处于就绪状态，系统就会根据优先级来决定哪一个线程优先进入运行状态。线程优先级均在 <code>Thread.MIN_PRIORITY(1)</code> 到 <code>Thread.MAX_PRIORITY(10)</code> 之间，数字越大，优先级越高，线程优先级有以下两个特点：</p>\n<ul>\n<li><strong>继承性</strong>：如 A 线程启动 B 线程，则 B 线程的优先级和 A 线程一样；</li>\n<li><strong>随机性</strong>：线程优先级高的不一定每次都先执行完，只能说是优先开始执行；</li>\n</ul>\n<h2> 反射</h2>\n<p>推荐阅读：<a href=\"https://zhuanlan.zhihu.com/p/80519709\" target=\"_blank\" rel=\"noopener noreferrer\">https://zhuanlan.zhihu.com/p/80519709</a></p>\n<h3> 反射的定义及作用？</h3>\n<p>反射（<code>Reflection</code>）允许运行中的 Java 程序获取自身信息，并且可以操作类或对象的内部属性。<strong>核心</strong> 是 <strong>JVM 在运行时才动态加载类或调用方法/访问属性，无需事先知道运行对象是谁</strong>，主要提供如下功能：</p>\n<ul>\n<li><strong>运行时</strong> 判断任意一个对象所属类；</li>\n<li><strong>运行时</strong> 构造任意一个类的对象；</li>\n<li><strong>运行时</strong> 判断任意一个类所具有的成员变量和方法；</li>\n<li><strong>运行时</strong> 调用任意一个对象的方法；</li>\n<li>生成动态代理</li>\n</ul>\n<p><code>Class</code> 和 <code>java.lang.reflect</code> 共同对反射提供了支持，<code>java.lang.reflect</code> 类库中主要包含了如下三个类：</p>\n<ul>\n<li><strong>Field</strong>：用 <code>get()</code> 和 <code>set()</code> 方法来读取和修改 <code>Field</code> 对象相关联的成员属性；</li>\n<li><strong>Method</strong>：利用 <code>invoke()</code> 方法调用与 <code>Method</code> 对象相关联的方法；</li>\n<li><strong>Constructor</strong>：利用 <code>Construcctor</code> 中的 <code>newInstance()</code> 创建新的对象；</li>\n</ul>\n<h3> 反射的优缺点</h3>\n<ol>\n<li><strong>静态和动态编译</strong></li>\n</ol>\n<ul>\n<li><strong>静态编译</strong>：在编译时确定类型，绑定对象</li>\n<li><strong>动态编译</strong>：在运行时确定类型，绑定对象</li>\n</ul>\n<p>两者区别在于，动态编译能最大化支持多态，降低类的耦合性。</p>\n<ol start=\"2\">\n<li><strong>优点</strong></li>\n</ol>\n<ul>\n<li>运行时判断类，动态加载类，提高了代码的灵活度；</li>\n<li>最大化支持多态，降低类的耦合性；</li>\n</ul>\n<ol start=\"3\">\n<li><strong>缺点</strong></li>\n</ol>\n<ul>\n<li><strong>性能开销</strong>：反射相当于一系列解释操作，告知 JVM 要做的事，比直接的代码要慢；</li>\n<li><strong>安全限制</strong>：反射要求程序必须在一个无安全限制的环境下运行，如果一个程序必须要在安全的环境中运行，那么就无法应用反射了；</li>\n<li><strong>内部暴露</strong>：我们虽然可以动态操作改变类的属性，但同时也暴露了类的内部；</li>\n</ul>\n<h3> 反射的基本运用</h3>\n<figure><figcaption></figcaption></figure>\n<h3> 如何利用反射创建对象</h3>\n<ol>\n<li>通过 <code>Class.forName()</code> 获取一个对象；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>使用 <code>.class</code> 属性；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>使用类对象的 <code>getClass()</code> 方法；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 反射中的一些注意事项</h3>\n<ol>\n<li>反射会额外消耗一定系统资源，因此如果不需要动态创建一个对象，那么就尽量别用反射；</li>\n<li>反射调用方法时可以忽略权限检查，因此可能会破坏封装性而导致安全问题；</li>\n</ol>\n<h2> 注解</h2>\n<p>推荐阅读：<a href=\"https://www.cnblogs.com/acm-bingzi/p/javaAnnotation.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/acm-bingzi/p/javaAnnotation.html</a></p>\n<h3> 什么是注解？</h3>\n<p>Java 注解是附加在代码中的一些元信息，从 Java 5 开始引入的特性，用于一些工具在编译、运行时进行解析和使用，起着 **说明、配置的功能。**不会也不能影响代码实际逻辑，只起辅助性作用。</p>\n<h3> 注解的用途？</h3>\n<ol>\n<li>生成文档，比如 <code>@param、@return</code> 等用于给方法生成文档；</li>\n<li>跟踪代码依赖性，实现替代配置文件功能；</li>\n<li>在编译时进行格式检查，如 <code>@Override</code> 放在方法前，表明该方法要覆盖父类方法；</li>\n</ol>\n<h3> 注解的原理？</h3>\n<p>注解实质上是继承了 <code>Annotation</code> 的特殊接口，具体实现类是 Java 运行时生成的动态代理类。当我们通过反射机制获取注解的时候，返回的是 Java 运行时所生成的动态代理对象。通过该代理对象来调用自定义注解（方法）的方法，最终会调用 <code>AnnotationInvocationHandler</code> 的 <code>invoke()</code> 方法。方法从 <code>memberValues</code> 中索引出对应值（<code>memberValues</code> 是一个 <code>Map</code>，来源于 Java 常量池）。</p>\n<h3> 元注解</h3>\n<p><code>java.lang.annotation</code> 中提供了四种元注解，用于注解其他注解（一般用于我们自定义注解时）。</p>\n<table>\n<thead>\n<tr>\n<th>元注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Retention</code></td>\n<td>定义注解声明周期：</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><code>SOURCE</code>\n：编译阶段</li>\n<li><code>CLASS</code>\n：类加载时</li>\n<li><code>RUNTIME</code>\n：始终不丢弃 |\n| <code>Documented</code> | 是否将该注解信息加入 Java 文档 |\n| <code>Target</code> | 定义注解作用域</li>\n<li><code>CONSTRUCTOR</code></li>\n<li><code>FIELD</code></li>\n<li><code>LOCAL_VARIABLE</code></li>\n<li><code>METHOD</code></li>\n<li><code>PACKAGE</code></li>\n<li><code>PARAMETER</code></li>\n<li><code>TYPE</code> |\n| <code>Inherited</code> | 定义注解和子类的关系 |</li>\n</ol>\n<h3> 自定义注解的规则</h3>\n<ol>\n<li>注解应该定义为 &nbsp;<code>@interface</code>；</li>\n<li>参数成员只能用 <code>public</code> 或 <code>default</code> 两个访问控制符；</li>\n<li>参数成员只能有 8 大基本数据类型和 <code>String、Enum、Class、annotation</code> 等数据类型及其数组；</li>\n<li>获取类方法或字段的注解信息，必须通过反射技术来获取 <code>Annotation</code> 对象；</li>\n<li>注解中可以定义成员；</li>\n</ol>\n",
      "date_published": "2024-02-03T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "求职面试"
      ]
    },
    {
      "title": "MySQL 面试知识点",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/interview/knowledge/20240203-mysql.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/interview/knowledge/20240203-mysql.html",
      "summary": "数据库基础 使用数据库的优点 最开始，我们是将数据保存在 内存 中，这能够保证我们十分 快速存取，但是一旦断电，数据就丢失了，无法永久保存。 于是我们将数据存放在 文件 中，这样一来我们就 能够将数据永久保存，但每次都要进行频繁的 IO 操作，相对于内存来讲速度就慢了许多，而且进行查询操作也不方便。 于是，我们转移到了 数据库 存储，通过这种方式不但 ...",
      "content_html": "<h1> MySQL 面试知识点</h1>\n<h2> 数据库基础</h2>\n<h3> 使用数据库的优点</h3>\n<p>最开始，我们是将数据保存在 <strong>内存</strong> 中，这能够保证我们十分 <strong>快速存取，但是一旦断电，数据就丢失了，无法永久保存。</strong> 于是我们将数据存放在 <strong>文件</strong> 中，这样一来我们就 <strong>能够将数据永久保存，但每次都要进行频繁的 IO 操作，相对于内存来讲速度就慢了许多，而且进行查询操作也不方便。</strong> 于是，我们转移到了 <strong>数据库</strong> 存储，通过这种方式不但 <strong>能将永久保存数据，而且查询管理也更加高效方便</strong>。</p>\n<h3> 什么是 MySQL</h3>\n<p>MySQL 是一个关系型数据库管理系统，开源免费，且易扩展，是当前最流行的关系型数据库管理系统之一，在 Java Web 应用方面的应用十分广泛。其默认端口为 <strong>3306</strong>。</p>\n<h3> 数据库三大范式</h3>\n<ol>\n<li><strong>第一范式：属性原子性</strong></li>\n</ol>\n<p>最基本的范式，若数据库表中 <strong>所有字段值均为不可分解的原子值</strong>，则满足第一范式；</p>\n<ol start=\"2\">\n<li><strong>第二范式：记录唯一性，确保表中每列均与主键相关</strong></li>\n</ol>\n<p>在第一范式的基础上更进一步，需要确保数据库表中的每列均与主键相关，而不能只与主键的某一部分相关（主要针对联合主键）。即 <strong>在一个数据库表中，一个表中只能保存一种数据，不能将多种数据保存在同一张数据库表中</strong>；</p>\n<ol start=\"3\">\n<li><strong>第三范式：字段冗余性，确保每列均与主键列直接相关，不存在传递依赖</strong></li>\n</ol>\n<p>在第二范式的基础上，确保数据表中的 <strong>每列数据和主键直接相关，而不依赖于其他非主键，即任何字段不能由其他字段派生</strong>；</p>\n<h3> MySQL 中自带的权限表</h3>\n<p>MySQL 通过权限表来控制用户对数据库的访问，一般是存放在 <code>mysql</code> 表中，由 <code>mysql_install_db</code> 脚本进行初始化，分别包括：</p>\n<ul>\n<li><strong>user</strong>：记录允许连接服务器的用户账号信息，权限是全局性的；</li>\n<li><strong>db</strong>：记录各个账号在不同数据库上的操作权限；</li>\n<li><strong>table_priv</strong>：记录数据表级别的操作权限；</li>\n<li><strong>columns_priv</strong>：记录数据列级别的操作权限；</li>\n<li><strong>host</strong>：配合 <strong>db</strong> 表对给定主机上数据库级别的操作权限进行更进一步的控制，权限不受 <strong>GRANT</strong> 和 <strong>REVOKE</strong> 的影响；</li>\n</ul>\n<h2> 数据类型</h2>\n<p>主要可以分为 5 大类型，而大类型下又具体划分了不同的子类型：</p>\n<figure><figcaption></figcaption></figure>\n<table>\n<thead>\n<tr>\n<th><strong>分类</strong></th>\n<th><strong>类型名称</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>整数类型</strong></td>\n<td><code>tinyInt</code></td>\n<td>很小的整数(8位二进制)</td>\n</tr>\n<tr>\n<td></td>\n<td><code>smallint</code></td>\n<td>小的整数(16位二进制)</td>\n</tr>\n<tr>\n<td></td>\n<td><code>mediumint</code></td>\n<td>中等大小的整数(24位二进制)</td>\n</tr>\n<tr>\n<td></td>\n<td><code>int(integer)</code></td>\n<td>普通大小的整数(32位二进制)</td>\n</tr>\n<tr>\n<td><strong>实数类型</strong></td>\n<td><code>float</code></td>\n<td>单精度浮点数</td>\n</tr>\n<tr>\n<td></td>\n<td><code>double</code></td>\n<td>双精度浮点数</td>\n</tr>\n<tr>\n<td></td>\n<td><code>decimal(m,d)</code></td>\n<td>压缩严格的定点数</td>\n</tr>\n<tr>\n<td><strong>枚举类型</strong></td>\n<td><code>enum</code></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>日期和时间类型</strong></td>\n<td><code>year</code></td>\n<td>YYYY 1901~2155</td>\n</tr>\n<tr>\n<td></td>\n<td><code>time</code></td>\n<td>HH:MM:SS -838:59:59~838:59:59</td>\n</tr>\n<tr>\n<td></td>\n<td><code>date</code></td>\n<td>YYYY-MM-DD 1000-01-01~9999-12-3</td>\n</tr>\n<tr>\n<td></td>\n<td><code>datetime</code></td>\n<td>YYYY-MM-DD HH:MM:SS 1000-01-01 00:00:00~ 9999-12-31 23:59:59</td>\n</tr>\n<tr>\n<td></td>\n<td><code>timestamp</code></td>\n<td>YYYY-MM-DD HH:MM:SS 19700101 00:00:01 UTC~2038-01-19 03:14:07UTC</td>\n</tr>\n<tr>\n<td><strong>字符串类型</strong></td>\n<td><code>CHAR(M)</code></td>\n<td>M为0~255之间的整数</td>\n</tr>\n<tr>\n<td></td>\n<td><code>VARCHAR(M)</code></td>\n<td>M为0~65535之间的整数</td>\n</tr>\n<tr>\n<td></td>\n<td><code>TINYBLOB</code></td>\n<td>允许长度0~255字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>BLOB</code></td>\n<td>允许长度0~65535字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>MEDIUMBLOB</code></td>\n<td>允许长度0~167772150字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>LONGBLOB</code></td>\n<td>允许长度0~4294967295字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>TINYTEXT</code></td>\n<td>允许长度0~255字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>TEXT</code></td>\n<td>允许长度0~65535字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>MEDIUMTEXT</code></td>\n<td>允许长度0~167772150字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>LONGTEXT</code></td>\n<td>允许长度0~4294967295字节</td>\n</tr>\n<tr>\n<td></td>\n<td><code>VARBINARY(M)</code></td>\n<td>允许长度0~M个字节的变长字节字符串</td>\n</tr>\n<tr>\n<td></td>\n<td><code>BINARY(M)</code></td>\n<td>允许长度0~M个字节的定长字节字符串</td>\n</tr>\n</tbody>\n</table>\n<h2> 存储引擎</h2>\n<p>要查看 MySQL 中所提供的引擎，可以通过如下命令：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 常用存储引擎</h3>\n<table>\n<thead>\n<tr>\n<th>引擎</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>InnoDB</code></td>\n<td><strong>提供对数据库 ACID 事务的支持，同时提供了行级锁和外键的约束</strong>，其设计目标是处理大数据</td>\n</tr>\n<tr>\n<td><code>MyIASM</code></td>\n<td><strong>默认引擎</strong>，<strong>不提供事务的支持，也不支持行级锁和外键</strong></td>\n</tr>\n<tr>\n<td><code>MEMORY</code></td>\n<td>所有数据均存于内存，存取速度快，但是安全性低</td>\n</tr>\n</tbody>\n</table>\n<h3> InnoDB vs MyISAM</h3>\n<ul>\n<li>InnoDB 的 4 大特性</li>\n</ul>\n<ol>\n<li><strong>插入缓冲（Insert Buffer）</strong></li>\n<li><strong>二次写（Double Write）</strong></li>\n<li><strong>自适应哈希索引（Ahi）</strong></li>\n<li><strong>预读（Read Ahead）</strong></li>\n</ol>\n<ul>\n<li>两者区别\n| 对比项   | MyISAM                   | Innodb |\n| -------- | ------------------------ | ------ |\n| 存储结构 | 每张表被存放在三个文件：<br>1. <code>.frm</code> -表格定义<br>2. <code>.MYD</code> (MYData)-数据文件 <br>3. <code>.MYI</code>(MYIndex)-索引文件 | 所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），大小只受限于操作系统文件的大小，一般为 2GB |\n| 存储空间 | 可被压缩，存储空间较小 | 需要更多的内存和存储，会在主内存中建立其专用的缓冲池用于高速缓冲数据和索引 |\n| 可移植性、备份及恢复 | 数据以文件形式存储，在跨平台的数据转移中会很方便，在备份和恢复时可单独针对某个表进行操作 | 免费的方案可以是拷贝数据文件、备份 binlog，或者用 mysqldump，在数据达到一定量（几十 G）的时候就相对痛苦了 |\n| 文件格式 | 数据和索引是分别存储的，数据<code>.MYD</code>，索引<code>.MYI</code> |数据和索引是集中存储的，<code>.ibd</code>|\n| 记录存储顺序 | 按记录插入顺序保存 | 按主键大小有序插入 |\n| <strong>外键</strong> | <strong>不支持</strong> | <strong>支持</strong> |\n| <strong>事务</strong> | <strong>不支持</strong> | <strong>支持（默认 REPEATABLE-READ）</strong> |\n| <strong>锁支持</strong> | <strong>表级锁定</strong> | <strong>行级锁定、表级锁定，锁定力度小并发能力高</strong> |\n| <strong>MVVC 支持</strong> | <strong>不支持</strong> | <strong>支持</strong> |\n| <strong>崩溃修复</strong> | <strong>不支持</strong> | <strong>支持</strong> |\n| <strong>哈希索引</strong> | <strong>不支持</strong> | <strong>支持</strong> |\n| <strong>全文索引</strong> | <strong>支持</strong> | <strong>不支持</strong> |\n| 查询性能 | 更佳 |  |\n| 增删改性能 |  | 更佳 |\n| 统计数据量 | 更快，内部维护了一个计数器，可以直接调取。 |  |\n| 索引的实现方式 | B+ 树索引，myisam 是堆表 | B+ 树索引，Innodb 是索引组织表 |</li>\n</ul>\n<p>两者主要区别如下：</p>\n<ol>\n<li>InnoDB 索引是聚簇索引，而 MyISAM 是非聚簇索引；</li>\n<li>InnoDB 的主键索引的叶子节点存储着行数据，因此主键索引效率高；MyISAM 索引的叶子节点存储的是行数据地址，需要多进行一次寻址操作才能够得到数据；</li>\n<li>InnoDB 非主键索引的叶子节点存储的是主键和其他带索引的列数据，因此查询时做到覆盖索引更加高效；</li>\n</ol>\n<h3> 如何选择存储引擎</h3>\n<ul>\n<li><strong>MyISAM</strong>：默认的 MySQL 插件式存储引擎，适合 <strong>以读写插入为主</strong>，是 Web、数据仓库和其他应用环境下最常使用的引擎之一；</li>\n<li><strong>InnoDB</strong>：用于事务处理应用程序，如果 <strong>更新删除等操作频率也高</strong>，或者要 <strong>保证数据完整性</strong>，支持 <strong>高并发、外键和事务等</strong>；</li>\n<li><strong>Memory</strong>：将所有数据保存在 <code>RAM</code> 中，在需要快速查找引用和其他类似数据情况下，能提供较快的访问；</li>\n<li><strong>Merge</strong>：允许 MySQL DBA 或开发人员将一系列等同的 MyISAM 表以逻辑方式组合在一起并作为一个对象引用，适合于数据仓库等 VLDB 环境；</li>\n</ul>\n<h2> 存储过程</h2>\n<h3> 定义</h3>\n<p>存储过程是一个可编程的函数，在数据库中创建并保存，由 SQL  语句和一些特殊的控制结构组成。优点是 <strong>允许模块化设计，即一次创建，多次调用。</strong> 是一个预编译的 SQL 语句，当需要多次执行 SQL 语句时，使用存储过程比单纯 SQL 语句效率更高。</p>\n<h3> 优缺点</h3>\n<ul>\n<li><strong>优点</strong></li>\n</ul>\n<ol>\n<li>由于是预编译，所以执行效率高；</li>\n<li>存储过程的代码直接在数据库中，通过存储过程名直接调用，能够减少网络通讯；</li>\n<li>安全性高，执行存储过程需要有一定权限的用户；</li>\n<li>能够重复使用，提高开发效率；</li>\n</ol>\n<ul>\n<li><strong>缺点</strong></li>\n</ul>\n<ol>\n<li>调试困难</li>\n<li>移植困难</li>\n<li>重新编译问题，由于存储过程是运行前编译，因此如果带有引用关系的对象发生改变时，受到影响的存储过程、包需要重新编译</li>\n<li>若在一个程序中大量使用存储过程，到交付使用时就会随着用户需求的改变而导致数据结构变化，此时系统维护成本较高</li>\n</ol>\n<h2> 事务</h2>\n<h3> 事务定义</h3>\n<p>事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行结果必须使数据库从一种一致性状态切换到另一中一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。事务能够在数据库提交工作时确保要么所有修改都保存，要么所有修改都不保存。<strong>即事务是逻辑上的一组操作，要么都执行，要么都不执行</strong>。</p>\n<h3> 事务的 4 大特性</h3>\n<p>关系型数据库都需要遵循 ACID 规则：</p>\n<ol>\n<li><strong>原子性（Atomicity）</strong></li>\n</ol>\n<p>原子性是整个数据库事务中不可分割的工作单位，只有事务中的所有的数据库操作都执行成功，才代表整个事务成功，如果其中任一环节执行失败，那么就算已经执行成功的 SQL 语句也必须撤销，回滚到事务执行前的状态。即原子性能够保证 <strong>动作要么全部完成，要么完全不起作用。</strong> <strong>即事务是最小的执行单位，不允许分割</strong>。</p>\n<ol start=\"2\">\n<li><strong>一致性（Consistency）</strong></li>\n</ol>\n<p>指事务将数据库从一种一致性状态变为另一种一致性状态。在事务开始前后，数据库的完整性约束未被破坏。<strong>在事务执行前后，数据能够保持一致，多个事务对统一数据读取的结果相同</strong>。</p>\n<ol start=\"3\">\n<li><strong>隔离性（Isolation）</strong></li>\n</ol>\n<p>并发访问数据库时，隔离性要求每个读写事务对其他事务的操作对象能够相互分离，即一个用户的事务不被其他事务所干扰，各并发事务间数据库是独立的；</p>\n<ol start=\"4\">\n<li><strong>持久性（Durability）</strong></li>\n</ol>\n<p>表示事务一旦被提交，其结果就是永久性的，它对数据库中数据的改变是持久的，即便数据库发生故障也不应该对其产生影响；</p>\n<h3> 事务隔离级别</h3>\n<h4> 脏读、幻读 &amp; 不可重复读</h4>\n<p>了解事务隔离级别之前，先来看看这几个读的概念：</p>\n<ol>\n<li><strong>脏读（Dirty Read）</strong></li>\n</ol>\n<p>表示某一事务已经更新了一份数据，另一个事务在此时读取了同一份数据。当前一个事务撤销操作后，就会导致后一个事务所读取的数据不正确。</p>\n<ol start=\"2\">\n<li><strong>幻读（Phantom Read）</strong></li>\n</ol>\n<p>在一个事务的两次查询中数据量不一致，假如有一个事务查询了几列数据，同时另一个事务中在此时查询了新的数据，则查询事务在后续查询中，就会发现数据比最开始的查询数据更丰富。</p>\n<ol start=\"3\">\n<li><strong>不可重复读（Non-repeatable Read）</strong></li>\n</ol>\n<p>一个事务中两次查询数据不一致，有可能是因为两次查询过程中插入了一个更新原有数据的事务。</p>\n<p><strong>注意：不可重复读和幻读的区别在于：</strong></p>\n<blockquote>\n<p><strong>不可重复读的重点在于修改，</strong> 比如多次读取一条记录发现其中某些列的值被修改，而 <strong>幻读的重点在于新增或删除</strong>，比如多次读取一条记录发现记录增多或减少了。</p>\n</blockquote>\n<h4> 隔离级别</h4>\n<p>SQL 标准定义了 4 个隔离级别，隔离级别从低到高分别是：</p>\n<ol>\n<li><strong>READ-UNCOMMITTED（读取未提交）</strong></li>\n</ol>\n<p>最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能导致脏读、幻读或不可重复读</strong>。</p>\n<ol start=\"2\">\n<li><strong>READ-COMMITTED（读取已提交）</strong></li>\n</ol>\n<p>允许读取并发事务已经提交的数据，<strong>能够阻止脏读，但可能导致幻读或不可重复读</strong>。</p>\n<ol start=\"3\">\n<li><strong>REPEATABLE-READ（可重复读）</strong></li>\n</ol>\n<p>对同一字段的多次读取结果时一致的，除非数据是被本身事务自己所修改，<strong>能够阻止脏读和不可重复读，但可能导致幻读</strong>。</p>\n<ol start=\"4\">\n<li><strong>SERIALIZABLE（可串行化）</strong></li>\n</ol>\n<p>最高的隔离级别，完全服从 ACID 的隔离级别，所有事务依次逐个执行，这样事务之间就完全不可能产生干扰，<strong>能够防止脏读、幻读以及不可重复读</strong>、</p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>READ-UNCOMMITTED</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>READ-COMMITTED</code></td>\n<td>❌</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>REPEATABLE-READ</code></td>\n<td>❌</td>\n<td>❌</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>SERIALIZABLE</code></td>\n<td>❌</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n</tbody>\n</table>\n<h2> 锁</h2>\n<h3> 定义</h3>\n<p>当数据库中存在并发事务时，可能会导致数据库中的数据不一致，此时为了保证访问次序，我们就需要用到锁机制。</p>\n<p>锁是为了支持对共享资源进行并发访问，提供数据的完整性和一致性，从而保证在高并发的情况下，访问数据库时不会出现问题；</p>\n<h3> 事务隔离级别与锁的关系</h3>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>锁</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>READ-UNCOMMITTED</code></td>\n<td>读取无需加共享锁</td>\n</tr>\n<tr>\n<td><code>READ-COMMITTED</code></td>\n<td>读操作需要加共享锁，语句执行完后释放</td>\n</tr>\n<tr>\n<td><code>REPEATABLE-READ</code></td>\n<td>读操作需要加共享锁，事务执行完毕后释放</td>\n</tr>\n<tr>\n<td><code>SERIALIZABLE</code></td>\n<td><strong>锁定整个范围的键</strong>，并一直持有锁，直到事务完成</td>\n</tr>\n</tbody>\n</table>\n<h3> 数据库中死锁的定义及解决方法</h3>\n<ul>\n<li><strong>定义</strong></li>\n</ul>\n<p>所谓死锁，<strong>指的是两个或多个以上进程在同一资源上相互占用，并请求锁定对方的资源，从而导致恶性循环的现象</strong>。</p>\n<ul>\n<li><strong>解决方法</strong></li>\n</ul>\n<ol>\n<li><strong>若不同程序间并发存取多个表，则尽量约定以相同的顺序来访问表，从而大大降低死锁发生的概率；</strong></li>\n<li><strong>同一事务中，尽量一次性锁定所需的所有资源，降低死锁发生的概率；</strong></li>\n<li><strong>对于易发生死锁的业务部分，尝试使用升级锁定颗粒度；</strong></li>\n</ol>\n<h3> 乐观锁 &amp; 悲观锁</h3>\n<ul>\n<li><strong>定义</strong></li>\n</ul>\n<p>并发控制能够确保多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性，以及数据库的统一性，而并发控制主要可分为乐观锁（乐观并发控制）和悲观锁（悲观并发控制）。</p>\n<ol>\n<li><strong>乐观锁</strong></li>\n</ol>\n<p>假定不会发生并发冲突，只在提交事务时检查时候违反数据完整性。修改数据时将事务加锁，通过 <code>version</code> 的方式来进行锁定，<strong>一般使用版本号机制或CAS算法来实现</strong> ；</p>\n<ol start=\"2\">\n<li><strong>悲观锁</strong></li>\n</ol>\n<p>假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。查询完数据时将事务加锁，直到提交事务，<strong>一般使用数据库中的锁机制来实现</strong>；</p>\n<ul>\n<li><strong>使用场景</strong></li>\n</ul>\n<p><strong>乐观锁</strong> 适合于 <strong>读操作频繁，但写操作较少</strong> 的情况，即冲突很少发生的场景，这样能够省去锁的开销，同时加大系统的吞吐量；</p>\n<p><strong>悲观锁</strong>  适合于 <strong>写操作频繁，但读操作较少</strong> 的情况，即冲突频发的场景；</p>\n<h2> 索引</h2>\n<h3> 定义</h3>\n<p>所谓索引，就是一种特殊的文件，<strong>包含数据表中所有记录的引用指针</strong>。它是一种数据结构，数据库索引是数据库管理系统中一个排序的数据结构，能够协助快速查询、更新数据库表中数据，同时使用 B 树及其变种 B+ 树来实现。用通俗的话来讲就是相当于我们日常字典中的目录，能够帮助我们快速找到想要的字或词。</p>\n<h3> 基本原理</h3>\n<p>使用索引的最终目录是快速查找具有特定值的记录，如果没有索引，当我们需要查找某一个值时，只能遍历整张表来查找，这样做查找效率就会大打折扣。</p>\n<p>索引的原理也很简单，即 <strong>将无序数据变为有序的查询</strong>，根据索引查询数据的步骤如下：</p>\n<ol>\n<li><strong>将创建了索引的列的内容进行排序</strong></li>\n<li><strong>对排序结果生成倒排表</strong></li>\n<li><strong>在倒排内容上拼上数据地址链</strong></li>\n<li><strong>在查询时，先拿到倒排表内容，然后取出数据地址链，从而取出具体数据</strong></li>\n</ol>\n<h3> 索引优缺点</h3>\n<ul>\n<li><strong>优点</strong></li>\n</ul>\n<ol>\n<li>第一点毫无疑问是 <strong>加快数据的检索速度</strong>；</li>\n<li>第二点则是 <strong>通过使用索引，能够在查询过程中使用优化隐藏器，提高性能</strong>。</li>\n</ol>\n<ul>\n<li><strong>缺点</strong></li>\n</ul>\n<ol>\n<li><strong>时间方面</strong>：虽然能够加快检索速度，但是创建和维护索引也需要时间，而且随着数据的增多，索引也需要动态维护，这样将会降低增/删/改的执行效率；</li>\n<li><strong>空间方面</strong>：索引也是需要占据独立空间的，所以会随着数据的增多而占用更多的物理空间；</li>\n</ol>\n<h3> 索引类型</h3>\n<h4> 逻辑角度</h4>\n<p>索引从逻辑角度主要可分为 4 种索引，分别是：</p>\n<ol>\n<li><strong>主键索引</strong></li>\n</ol>\n<p>数据列不允许重复，不允许为 <code>NULL</code>，一个表中只能有一个主键；</p>\n<ol start=\"2\">\n<li><strong>唯一索引</strong></li>\n</ol>\n<p>数据列不允许重复，允许为 <code>NULL</code> 值，一个表中允许多个列创建唯一索引，可以通过如下两种方式进行创建唯一索引：</p>\n<ul>\n<li><strong>创建唯一索引</strong>：<code>ALTER TABLE table_name ADD UNIQUE(column)</code></li>\n<li><strong>创建唯一组合索引</strong>：<code>ALTER TABLE table_name ADD UNIQUE(column1, column2)</code>；</li>\n</ul>\n<ol start=\"3\">\n<li><strong>普通索引</strong></li>\n</ol>\n<p>最基本的索引类型，没有唯一性的限制，允许为 <code>NULL</code> 值，通过如下两种方式来创建唯一索引：</p>\n<ul>\n<li><strong>创建普通索引</strong>：<code>ALTER TABLE table_name ADD INDEX index_name (column)</code>；</li>\n<li><strong>创建普通索引组合</strong>：<code>ALTER TABLE table_name ADD INDEX index_name (column1, column2)</code>；</li>\n</ul>\n<ol start=\"4\">\n<li><strong>全文索引</strong></li>\n</ol>\n<p>搜索引擎中也在使用的一种技术，通过 <code>ALTER TABLE table_name ADD FULLTEXT (column)</code> 来创建全文索引；</p>\n<ol start=\"5\">\n<li><strong>组合索引</strong></li>\n</ol>\n<p>多列值组成一个索引，专门用于组合搜索，其效率大于索引合并；</p>\n<h4> 物理存储角度</h4>\n<ol>\n<li><strong>聚集索引（clustered index）</strong></li>\n<li><strong>非聚集索引（non-clustered index）</strong></li>\n</ol>\n<h4> 数据结构角度</h4>\n<ol>\n<li><strong>BTREE</strong></li>\n<li><strong>HASH</strong></li>\n<li><strong>FULLTEXT</strong></li>\n<li><strong>R-Tree</strong></li>\n</ol>\n<h3> 索引算法</h3>\n<p>常用的索引算法有 <strong>Hash 算法 和 B 树算法</strong>，分别多两个算法进行简单介绍：</p>\n<ol>\n<li><strong>B+ 树算法</strong></li>\n</ol>\n<p>最常用的 MySQL 算法，也是 MySQL 默认算法，既能够用于比较操作符（<code>=、&gt;、&lt;、between</code> 等），也能够用于 <code>like</code> 操作符，只要其查询条件是一个 <strong>不以通配符开头的常量</strong>。底层实现的是 <strong>多路平衡查找树</strong>，每次查询都要从根节点出发，查找到叶子节点方可获得所查询的键值，然后根据查询判断是否需要回表查询数据。</p>\n<ol start=\"2\">\n<li><strong>Hash 算法</strong></li>\n</ol>\n<p>Hash 算法索引只能用于对等比较（<code>=、&gt;=、&lt;=</code>），而且不像 B 树索引需要从根节点到枝节点，最后才能范文到页节点进行多次读写操作，它只需要一次定位数据，所以检索效率远高于 B 树索引。其底层是 Hash 表，进行查找时，调用一次 <code>Hash</code> 函数就能获取相应键值，然后进行回表查询获得实际数据。</p>\n<ol start=\"3\">\n<li><strong>两者对比</strong></li>\n</ol>\n<ul>\n<li>Hash 索引进行等值查询更快，但是不能进行范围查询；</li>\n<li>Hash 索引不支持使用索引进行排序；</li>\n<li>Hash 索引不支持模糊查询以及多列索引的最左前缀匹配，因为 Hash 函数的结果不可预测；</li>\n<li>Hash 索引无法避免回表查询数据，但 B+ 树在一定条件下（聚簇索引、覆盖索引等）只需要通过索引完成查询；</li>\n<li>Hash 索引在等值查询时较快，但不稳定，性能不可预测；但 B+ 树的查询效率较稳定，对所有查询均是从根节点到叶子节点，且树的高度较低；</li>\n</ul>\n<h3> 设计和创建索引的原则</h3>\n<h4> 设计原则</h4>\n<ol>\n<li><strong>选择唯一性索引</strong></li>\n</ol>\n<p>唯一性索引的值唯一，能够更加快速地通过该索引来确定某条记录；</p>\n<ol start=\"2\">\n<li><strong>为经常需要排序、分组和联合操作的字段建立索引</strong></li>\n</ol>\n<p>对于经常需要 <code>ORDER BY、GROUP BY、DISTINCT、UNION</code> 等操作的字段，排序时会浪费许多时间，因此我们可以为其建立索引，避免排序操作；</p>\n<ol start=\"3\">\n<li><strong>为经常作为查询条件的字段建立索引</strong></li>\n</ol>\n<p>若某个字段经常作为查询条件，则该字段的查询速度将影响整个表的查询速度，此时可以给该字段建立索引，从而提高整个表的查询速度；</p>\n<ol start=\"4\">\n<li><strong>限制索引数目</strong></li>\n</ol>\n<p>索引并非越多越好，每个索引都需要占用物理空间，索引越多占用的物理空间越大，修改表时对索引的重构和更新将十分麻烦；</p>\n<ol start=\"5\">\n<li><strong>尽量使用数据量少的索引</strong></li>\n</ol>\n<p>如果索引值较长，查询速度也会受到影响；</p>\n<ol start=\"6\">\n<li><strong>使用短索引，尽量使用前缀来索引</strong></li>\n</ol>\n<p>如果某索引字段值较长，最好使用值的前缀来进行索引；</p>\n<ol start=\"7\">\n<li><strong>删除不再使用或很少使用的索引</strong></li>\n</ol>\n<p>表中数据被大量更新，或者数据使用方式被改变落后，原有的一些索引可能不再需要，此时需要对这些索引进行删除，减少索引对更新操作的影响；</p>\n<h4> 创建原则</h4>\n<p>使用索引能够在一定程度上提高检索效率，但也不能无限制的使用，创建索引时，最好能够满足如下原则：</p>\n<ol>\n<li><strong>最左前缀匹配原则</strong></li>\n<li><strong>频繁查询的字段才创建索引</strong></li>\n<li><strong>更新频繁的字段不适合创建索引</strong></li>\n<li><strong>区分度不高的字段不适合做索引</strong></li>\n<li><strong>尽量扩展索引，而不用去创建新的索引</strong></li>\n<li><strong>定义有外键的数据列一定要建立索引</strong></li>\n<li><strong>对于查询中很少涉及，而且重复值较多的字段无需建立索引</strong></li>\n<li><strong>对于 <strong><code>**text、image、bit**</code></strong> 类型的字段不要建立索引</strong></li>\n</ol>\n<h3> B+ 树索引 和 Hash 索引底层实现</h3>\n<ol>\n<li><strong>Hash 索引</strong></li>\n</ol>\n<p>Hash 索引底层其实就是 Hash 表，进行查找时，调用一次 Hash 函数就能获取到响应的键值，然后进行回表查询获取数据库中的数据；</p>\n<ol start=\"2\">\n<li><strong>B+ 树索引</strong></li>\n</ol>\n<p>B+ 树底层实现是多路平衡查找树，对每次的查询均从根节点出发，查找到叶子节点就获得所要查询的键值，然后根据查询判断是否需要回表查询数据；</p>\n<ol start=\"3\">\n<li><strong>Hash 索引与 B+ 树的不同</strong></li>\n</ol>\n<ul>\n<li>Hash 索引进行等值查询更快，但无法进行范围查询。因为 <code>Hash</code> 索引中经过 <code>hash()</code> 函数建立索引后，索引顺序与与原顺序无法保持一致，不能支持范围查询；而 B+ 树的所有节点皆遵循（左节点小于父节点，父节点小于右节点），天然支持范围查询；</li>\n<li>Hash 索引不支持使用索引进行排序；</li>\n<li>Hash 索引不支持模糊查询以及多列索引的最左前缀匹配，原理也是因为 <code>hash()</code> 函数的不可预测；</li>\n<li>Hash 索引任何时候都必须进行回表查询，但 B+ 树在符合某些条件时可以只通过索引完成查询；</li>\n<li>Hash 索引虽然等值查询较快，但是极其不稳定，性能不可预测，但某一键值存在大量重复时，会发生 Hash 碰撞，此时效率可能十分低下；而 B+ 树的查询效率比较稳定，对于所有的查询均是从根节点到叶子节点，且树的高度较低；</li>\n</ul>\n<p>鉴于以上不同点，因此在大多数情况下，直接选用 B+ 树索引能够获得稳定且较好的查询速度，而不需要使用 Hash 索引；</p>\n<h2> 视图</h2>\n<h3> 视图定义</h3>\n<p>为了提高复杂 SQL 语句的复用性和表操作的安全性，MySQL 数据库管理系统提供了视图。</p>\n<p>视图的本质是 <strong>一种虚拟表，在物理上不存在，其内容与真实的表相似，包含一系列带有名称的列和行数据。</strong>  但视图并不在数据库中以存储的数据值形式存在，行和列数据来自定义视图的查询所引用基本表，且在具体引用视图时动态生成；</p>\n<p>视图的操作一般包括如下四部分：</p>\n<ul>\n<li><strong>创建视图</strong></li>\n<li><strong>查看视图</strong></li>\n<li><strong>删除视图</strong></li>\n<li><strong>修改视图</strong></li>\n</ul>\n<h3> 视图特点</h3>\n<ol>\n<li>视图的列可以来自不同的表，是表的抽象在逻辑意义上建立的新关系；</li>\n<li>视图是有基本表（实表）产生的表（虚表）；</li>\n<li>视图的建立和删除不会对基本表造成影响；</li>\n<li>对视图内容的更新（添加、删除和修改）会直接影响到基本表；</li>\n<li>当视图来自多个基本表时，不允许添加和删除数据；</li>\n</ol>\n<h3> 视图优缺点</h3>\n<h4> 优点</h4>\n<ol>\n<li><strong>查询简单化</strong>，视图能够简化用户操作，数据所见即所得；</li>\n<li><strong>数据安全性</strong>，视图使用户能从多个角度看待同一数据，用户只能查询或修改他们所能见到得到的数据，能够对机密数据提供安全保护；</li>\n<li><strong>逻辑数据独立性</strong>，视图对重构数据库提供了一定程度的逻辑独立性，屏蔽真实表结构变化所带来的影响；</li>\n</ol>\n<h4> 缺点</h4>\n<ol>\n<li><strong>性能相对较差</strong>，简单的查询也会变得很复杂；</li>\n<li><strong>修改限制</strong>，尝试修改视图时，必须将其转化为对比本表的某些行的修改。对于复杂的聚合视图，基本无法改变；</li>\n</ol>\n<h2> 优化</h2>\n<h3> 大表优化</h3>\n<p>当 MySQL 单表记录数过大时，数据库的 CURD 性能会明显下降，此时可以采取如下的优化措施：</p>\n<ol>\n<li><strong>限定数据范围</strong></li>\n</ol>\n<p>务必禁止不带任何限制数据范围条件的查询语句，此时会查询整个数据库，效率极低；</p>\n<ol start=\"2\">\n<li><strong>读/写分离</strong></li>\n</ol>\n<p>最经典的数据库拆分方案，主库负责写，从库负责读；</p>\n<ol start=\"3\">\n<li><strong>垂直分区</strong></li>\n</ol>\n<p>即根据数据库中数据表的相关性进行拆分，简单来讲就是指数据表的拆分，将一张列较多的表分为多张表。这样操作使得 <strong>列数据变小，在查询时减少了读取的 Block 数，减少了 I/O 次数。同时，垂直分区也能够简化表的结构，易于维护</strong>。但是，垂直拆分也存在一定缺点。首先拆分将 <strong>导致主键出现冗余，此时就需要管理冗余列，同时会引起 Join 操作，可以通过在应用层进行 Join 来解决。此外，拆分还会让事务变得更加复杂。</strong></p>\n<ol start=\"4\">\n<li><strong>水平分区</strong></li>\n</ol>\n<p><strong>保持数据表结构不变，通过某一策略存储数据分片。这样一来每一片数据分散到不同表或库中，从而达到分布式的目的，而且通过水平切分能够支撑非常大的数据量。</strong></p>\n<p>水平拆分是将数据表的行进行拆分，它能够 <strong>支撑非常大的数据量存储</strong>，应用端改造也少，但是 <strong>分片事务难以解决，跨节点 Join 性能较差，逻辑复杂。</strong></p>\n<p>一般来讲数据库分片操作的两种常见方案如下：</p>\n<ul>\n<li><strong>客户端代理：分片逻辑在应用端，封装在 jar 包中，通过修改或封装 JDBC 层来实现。</strong></li>\n<li><strong>中间件代理：在应用和数据间加一个代理层，分片逻辑统一维护在中间件服务中。</strong></li>\n</ul>\n<h2> 其他</h2>\n<h3> sql 注入</h3>\n<p>用户传入的参数中符合 sql 的语法，从而破坏原有 sql 结构语义，从而达到攻击效果；</p>\n<h3> NULL 和空串</h3>\n<p><code>NULL</code> 是没有值的，不是空串，如果只指定 ‘’ （两个单引号，中间无任何字符），对于 <code>NOT NULL</code> 列是允许的，空串也是一个有效的值；</p>\n<p>要对 <code>NULL</code> 进行判断，则需要使用 <code>IS NULL</code> 或者 <code>IS NOT NULL</code>；</p>\n<h3> 如何创建用户并授权</h3>\n<ol>\n<li><strong>创建用户</strong></li>\n</ol>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>授权</strong></li>\n</ol>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 如何删除表</h3>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>delete</code></td>\n<td>仅删除表数据，支持条件过滤，支持回滚，记录日志，因此较慢</td>\n<td><code>delete from table_name</code></td>\n</tr>\n<tr>\n<td><code>truncate</code></td>\n<td>仅删除所有数据，不支持条件过滤，不支持回滚，不记录日志，效率高于 <code>delete</code></td>\n<td><code>truncate table table_name</code></td>\n</tr>\n<tr>\n<td><code>drop</code></td>\n<td>删除表数据同时删除表结构，将表所占空间均释放，删除效率最高</td>\n<td><code>drop table table_name</code></td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2024-02-03T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "求职面试"
      ]
    },
    {
      "title": "知识点",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/interview/knowledge/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/interview/knowledge/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "开发环境搭建",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/front-end/20230829-environment.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/front-end/20230829-environment.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 一、前言 正所谓欲善其事，必先利器。那在正式学习 Web 前端之前，不妨来看看，我们都要先做好那些事前准备。 首先，既然要开始写代码了，一个趁手的编辑器/IDE 肯定是必不可少了，不可能还去使用记事本吧。当然也不是看不起记事本，只是技术虽然很重要，但效率也不能落下，要两手抓，才能有更好的产出。 目前...",
      "content_html": "<h1> 开发环境搭建</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n</div>\n<h2> 一、前言</h2>\n<p>正所谓欲善其事，必先利器。那在正式学习 <code>Web</code> 前端之前，不妨来看看，我们都要先做好那些事前准备。</p>\n<p>首先，既然要开始写代码了，一个趁手的编辑器/<code>IDE</code> 肯定是必不可少了，不可能还去使用记事本吧。当然也不是看不起记事本，只是技术虽然很重要，但效率也不能落下，要两手抓，才能有更好的产出。</p>\n<p>目前主流市场中，前端开发无非主要有以下几个常用的编辑器/<code>IDE</code>，它们分别是：</p>\n<ul>\n<li><strong>Visual Studio Code</strong></li>\n<li><strong>Webstorm</strong></li>\n<li><strong>HBuider</strong></li>\n<li><strong>Sublime Text</strong></li>\n</ul>\n<p>软件各有千秋，都有着各自的特色功能。不过环顾左右的前端开发者，大多都选择的是 <code>VS Code</code>（<code>Visual Studio Code</code>）。于是，我们也选择它作为我们 <code>Web</code> 前端教程中的代码编辑器。</p>\n<p>有了写代码的家伙事儿还不够，所谓前端，最终的目的无非是实现各种图形化的效果，供用户交互，让用户能一目了然的看到效果。既然如此，写了代码之外，我们就还需要一个载体，将我们代码实现的效果渲染。而这个载体也很常见，也就是我们日常都会用到的浏览器。</p>\n<p>截止目前，根据 <code>W3Counter</code> 的统计，<code>Chrome</code> 浏览器占据了绝大部分市场，处于绝对领先地位。</p>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/front-end/assets/1693786691442.webp\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<p>同时，<code>Chrome</code> 也深受前端开发者的欢迎。出于两方面的考虑，因此选用 <code>Chrome</code> 作为系列教程中用于看效果的载体。</p>\n<p>接下来，我们就先来看看，如何在我们的电脑中安装 <code>VS Code</code> 和 <code>Chrome</code>。</p>\n<h2> 二、VS Code 安装</h2>\n<h3> 1. 下载</h3>\n<p>说起来好笑，之前在网上看到有人仿了一个 <code>VS Code</code> 的官网，并且下载安装需要收费。当时没忍住，直接笑出了声。不过也从侧面说明，肯定也有不少小白上过当的，不然也就不会有人闲的去仿官网了。</p>\n<p>在此，提醒下大家，<code>VS Code</code> 是微软完全免费开源的一款编辑器，完全没有收费一说。下载时，请认准唯一指定官网。</p>\n<blockquote>\n<p>https://code.visualstudio.com/</p>\n</blockquote>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/front-end/assets/1693786800554.webp\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<p>虽说官网是英文界面，不过都很简单。选择对应操作的安装包，点击 <code>Download</code> 就能得到想要的安装包了。</p>\n<h3> 2. 安装</h3>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/front-end/assets/1693787359078.webp\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/front-end/assets/1693787400353.webp\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/front-end/assets/1693787430775.webp\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/front-end/assets/1693787469522.webp\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/front-end/assets/1693787504599.webp\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h3> 3. 插件</h3>\n<p><strong>（1）插件安装</strong></p>\n<p>点击左侧扩展（插件）-&gt; 搜索插件 -&gt; install -&gt; 重启 <code>VS Code</code>。</p>\n<p><strong>（2）推荐插件</strong></p>\n<ul>\n<li><strong>Chinese</strong></li>\n</ul>\n<p>安装该插件后，<code>VS Code</code> 就能支持中文了，再也不用害怕是英语操作界面而苦恼。</p>\n<ul>\n<li><strong>Open in Browser</strong></li>\n</ul>\n<p>顾名思义，就是能够在写好的代码文件中鼠标右键打开对应选项，它就会自动打开浏览器帮助我们渲染了。</p>\n<h2> 三、Chrome 安装</h2>\n<h3> 1. 下载</h3>\n<p>当然了，最靠谱的方式就是从 <code>Chrome</code> 官网下载安装包。不过不出意外的话，大概率是打不开官网的。</p>\n<blockquote>\n<p>https://www.google.com/chrome/</p>\n</blockquote>\n<p>这个时候，我们就必须退而求其次，去找找我们能正常下载 <code>Chrome</code> 的地址了。这里推荐去异次元软件世界进行下载，网站提供 <code>Windows</code> 7/8/10/11、<code>macOS</code> 等平台稳定版、测试版、金丝雀版的离线包的下载，还区分 32/64 位安装包，可以说是非常良心了。</p>\n<blockquote>\n<p>https://www.iplaysoft.com/tools/chrome/</p>\n</blockquote>\n<h3> 2. 安装</h3>\n<p>相对与下载而言，<code>Chrome</code> 的安装就十分简单了，只需要双击打开安装包，它就会自动开始安装。</p>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "image": "https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/front-end/assets/1693786691442.webp",
      "date_published": "2023-08-29T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Web 前端教程"
      ]
    },
    {
      "title": "HTML 大揭秘",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/front-end/20230829-html.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/front-end/20230829-html.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 什么是 HTML HTML（`Hyper Text Markup Language`），中文译为超文本标记语言。其中，我们需要注意两个关键词。一个是 超文本，一个是 标记。所谓超文本，就是将不同空间的文字信息通过超链接的方式组织在一起的网状文本，往简单了将就是我们说的链接。而标记的另一个名字也叫标签...",
      "content_html": "<h1> HTML 大揭秘</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n</div>\n<h2> 什么是 HTML</h2>\n<p><code>HTML</code>（<code>Hyper Text Markup Language</code>），中文译为超文本标记语言。其中，我们需要注意两个关键词。一个是 <strong>超文本</strong>，一个是 <strong>标记</strong>。所谓超文本，就是将不同空间的文字信息通过超链接的方式组织在一起的网状文本，往简单了将就是我们说的链接。而标记的另一个名字也叫标签，就是网页源码中带尖括号（<code>&lt;&gt;</code>）的文本。</p>\n<h2> 常用语法</h2>\n<h3> 1. 标签</h3>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以上就是一个标签示例，其中 <code>&lt;h1&gt;</code> 叫做 <strong>开始标签</strong>，而 <code>&lt;/h1&gt;</code> 叫做 <strong>结束标签</strong>。</p>\n<p>通过观察，可以发现标签的主要特点，分别是：</p>\n<ul>\n<li>标签成对出现，标签中间包裹内容。</li>\n<li>标签由尖括号（<code>&lt;&gt;</code>）中加英文单词共同组成，而这个英文单词，就叫做标签名。</li>\n<li>相比于开始标签，结束标签多了 <code>/</code></li>\n</ul>\n<p>此外，标签还有不同的分类，一类是单标签，而另一类则是双标签。</p>\n<p>单标签指的是那些只有开始标签，没有结束标签的标签，而双标签则是那些成对出现的标签。</p>\n<h3> 2. HTML 基本骨架</h3>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以上就是 <code>HTML</code> 的基本骨架，网页所有内容都包含在 <code>html</code> 标签中。网页中，主要由头部 <code>head</code> 和主体 <code>body</code> 共同组成。其中头部用于存放给浏览器使用的信息，比如 <code>CSS</code> 样式、<code>JS</code> 脚本。而网页主体则存放展示给用户的信息，如图片、文字、视频等。</p>\n<h3> 3. 标签之间的关系</h3>\n<p>各标签之间，最主要的有两种关系，一种是 <strong>嵌套关系</strong>，一种是 <strong>并列关系</strong>，而它们存在的意义就是让我们明确标签的书写位置，让代码格式更加整齐，提高代码可读性。</p>\n<p>以基本骨架中的代码来说，<code>html</code> 和 <code>head</code> 是嵌套关系，而 <code>head</code> 和 <code>body</code> 之间的关系则是并列关系。</p>\n<ul>\n<li><strong>嵌套关系</strong></li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>并列关系</strong></li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 4. 注释</h3>\n<p>注释就是对代码的解释说明，存在的意义是让开发者能更加轻松地了解代码。一般是开发者在编码时为某些语句、程序段、函数等添加的提示，从而提高代码的可读性，方便其他开发者快速掌握，也方便后续代码修改。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 5. 标题</h3>\n<p>一般用在文章标题、网页区域名称、产品名称等，共分为 6 级标题，对应的标签分别是：</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在日常使用时需要注意，一个网页中 <code>h1</code> 一般只能使用一次，而 <code>h2~h6</code> 则没有使用次数的限制。</p>\n<h3> 6. 段落</h3>\n<p>一般用于文章段落、产品描述信息等。该标签会自动在其前后创建一些空白，浏览器将自动添加这些空间。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 7. 换行 &amp; 水平线</h3>\n<ul>\n<li><strong>换行</strong></li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li><strong>水平线</strong></li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>不同于其他双标签，这两个标签都属于单标签，用于实现文本换行和在文本中间添加水平线。</p>\n<h3> 8. 文本格式化</h3>\n<p>可以给文本添加特殊格式，比如加粗、斜体、下划线、删除线等效果。</p>\n<ul>\n<li><strong>加粗</strong></li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>斜体</strong></li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>下划线</strong></li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>删除线</strong></li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 9. 图片</h3>\n<p>为了在网页中插入图片，可以使用图像标签，其使用语法如下：</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>其中，<code>src</code> 属性用于指定图片位置和名称，是 <code>img</code> 标签不可缺少的属性。</p>\n<p>除开 <code>src</code> 属性之外， <code>img</code> 最常用的标签还有下表中的几个。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>alt</code></td>\n<td>替换文本</td>\n<td>图片无法显示时展示的文字</td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>提示文本</td>\n<td>鼠标悬停时显示的文字</td>\n</tr>\n<tr>\n<td><code>width</code></td>\n<td>设置图片宽度</td>\n<td>值一般是数字</td>\n</tr>\n<tr>\n<td><code>height</code></td>\n<td>设置图片高度</td>\n<td>值一般是数字</td>\n</tr>\n</tbody>\n</table>\n<p>注意，标签中存在多个属性时，属性之间用空格隔开，且没有先后顺序之分。</p>\n<h3> 10. 超链接</h3>\n<p>通过使用超链接，能够实现鼠标点击后跳转到其他页面的效果。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>其中，<code>href</code> 是必需属性，用于指定跳转的页面地址，当 <code>href</code> 属性的值为 <code>#</code>，则表示该链接为空链接，点击后不会进行跳转。除此之外，<code>a</code> 标签还有 <code>target</code> 属性，用于指定是否在新窗口中打开跳转页面。当属性值为 <code>_blank</code> 时，表示在新窗口打开。默认情况下，表示在当前窗口打开。</p>\n<h3> 11. 音频</h3>\n<p>使用该标签往网页中添加音频，使用语法如下。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>常见属性如下表：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>src</code></td>\n<td>音频地址</td>\n<td>必需属性，支持 <code>MP3</code>、<code>Wav</code></td>\n</tr>\n<tr>\n<td><code>controls</code></td>\n<td>是否显示音频控制面板</td>\n<td></td>\n</tr>\n<tr>\n<td><code>loop</code></td>\n<td>是否循环播放</td>\n<td></td>\n</tr>\n<tr>\n<td><code>autoplay</code></td>\n<td>是否自动播放</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3> 12. 视频</h3>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>src</code></td>\n<td>视频地址</td>\n<td>必需属性，支持 <code>MP4</code>、<code>WebM</code></td>\n</tr>\n<tr>\n<td><code>controls</code></td>\n<td>是否显示视频控制面板</td>\n<td></td>\n</tr>\n<tr>\n<td><code>loop</code></td>\n<td>是否循环播放</td>\n<td></td>\n</tr>\n<tr>\n<td><code>muted</code></td>\n<td>是否静音播放</td>\n<td></td>\n</tr>\n<tr>\n<td><code>autoplay</code></td>\n<td>是否自动播放</td>\n<td>必须在开启静音播放的前提下才能生效</td>\n</tr>\n</tbody>\n</table>\n<h3> 13. 列表</h3>\n<p>用于布局内容排列整齐的区域，主要分为：<strong>无序列表</strong>、<strong>有序列表</strong>、<strong>定义列表</strong>。</p>\n<p><strong>（1）无序列表</strong></p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>用于布局排列整齐的无序规定顺序的区域，语法为 <code>&lt;ul&gt;</code> 标签嵌套 <code>&lt;li&gt;</code> 标签，其中 <code>&lt;ul&gt;</code> 标签表示无序列表，而 <code>&lt;li&gt;</code> 则代表无序列表中的条目。需要注意， <code>&lt;ul&gt;</code> 标签中只能包裹 <code>&lt;li&gt;</code> 标签。</p>\n<p><strong>（2）有序列表</strong></p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>用于布局排列整齐的规定顺序的区域，语法为 <code>&lt;ol&gt;</code> 标签嵌套 <code>&lt;li&gt;</code> 标签，其中 <code>&lt;ol&gt;</code> 标签表示无序列表，而 <code>&lt;li&gt;</code> 则代表无序列表中的条目。而且需要注意， <code>&lt;ol&gt;</code> 标签中只能包裹 <code>&lt;li&gt;</code> 标签。</p>\n<p><strong>（3）定义列表</strong></p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>语法为 <code>&lt;dl&gt;</code> 嵌套 <code>&lt;dt&gt;</code> 和 <code>&lt;dd&gt;</code> 标签，其中 <code>&lt;dl&gt;</code> 用于定义列表，<code>&lt;dt&gt;</code> 用于定义列表标题，<code>&lt;dd&gt;</code> 则用于定义列表的描述/详情。注意， <code>&lt;dl&gt;</code> 标签中只能包裹 <code>dt&gt;</code> 和 <code>&lt;dd&gt;</code> 标签。</p>\n<h3> 14. 表格</h3>\n<p>类似于日常使用中的 <code>Excel</code>，主要用于展示数据。注意，默认情况下，网页中的表格是没有边框线的，需要使用<code>border</code> 属性添加。</p>\n<table>\n<thead>\n<tr>\n<th>标签</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>table</code></td>\n<td>表格</td>\n</tr>\n<tr>\n<td><code>tr</code></td>\n<td>行</td>\n</tr>\n<tr>\n<td><code>th</code></td>\n<td>表头单元格</td>\n</tr>\n<tr>\n<td><code>td</code></td>\n<td>内容单元格</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>为了让表格结构和语义更加清晰，通常还是用表格结构标签用来划分区域。下表是表格结构标签的说明。</p>\n<table>\n<thead>\n<tr>\n<th>标签</th>\n<th>含义</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>thead</code></td>\n<td>表格头部</td>\n<td>表格头部内容</td>\n</tr>\n<tr>\n<td><code>tbody</code></td>\n<td>表格主体</td>\n<td>主要内容区域</td>\n</tr>\n<tr>\n<td><code>tfoot</code></td>\n<td>表格底部</td>\n<td>汇总信息区域</td>\n</tr>\n</tbody>\n</table>\n<p><strong>合并单元格</strong>：将多个单元格合并为一个单元格，用于合并同类信息。又可以分为跨行合并和跨列合并，合并步骤如下：</p>\n<ul>\n<li>保留最左最上的单元格，添加属性（值为数字，表示需要合并的单元格数量）\n<ul>\n<li>跨行合并：保留最上的单元格，添加属性 <code>rowspan</code></li>\n<li>跨列合并：保留最左的单元格，添加属性 <code>colspan</code></li>\n</ul>\n</li>\n</ul>\n<h3> 15. 表单</h3>\n<p><strong>（1）input</strong></p>\n<p>用于在网页中收集信息。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>根据标签中 <code>type</code> 属性的值不同，从而具备不同的功能。</p>\n<table>\n<thead>\n<tr>\n<th>type 属性值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>text</code></td>\n<td>文本框，用于输入单行文本</td>\n</tr>\n<tr>\n<td><code>password</code></td>\n<td>密码框</td>\n</tr>\n<tr>\n<td><code>radio</code></td>\n<td>单元框</td>\n</tr>\n<tr>\n<td><code>checkbox</code></td>\n<td>多选框</td>\n</tr>\n<tr>\n<td><code>file</code></td>\n<td>上传文件</td>\n</tr>\n</tbody>\n</table>\n<p>为了在输入时更加友好，可以在文本框和密码框中使用 <code>placeholder</code> 来进行提示。</p>\n<p>针对单选框，常用属性如下表。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>name</code></td>\n<td>控件名</td>\n<td>控件分组，一组只能选一个</td>\n</tr>\n<tr>\n<td><code>checked</code></td>\n<td>默认选中</td>\n<td>属性名和属性值相同，简写为一个单词</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>文件上传时，默认上传表单控件只能上传一个文件，如果要实现文件多选功能，需要添加 <code>multiple</code> 属性。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><strong>（2）下拉菜单</strong></p>\n<p><code>&lt;select&gt;</code> 嵌套 <code>&lt;option&gt;</code>，其中 <code>&lt;select&gt;</code> 表示下拉菜单整体，而 <code>&lt;option&gt;</code> 则是下来菜单中的每一项，<code>selected</code> 属性表示默认选中项目。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>（3）文本域</strong></p>\n<p>用于输入多行文本的表单控件，默认可拖拽。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><strong>（4）label</strong></p>\n<p>网页中对于某个标签的说明文本。一般可以用 <code>&lt;label&gt;</code> 标签绑定文字和表单控件的关系，从而增大表单控件的点击范围。实现以上功能有两种方式：</p>\n<ul>\n<li>方式一：<code>&lt;label&gt;</code> 只包裹内容，不包裹表单控件。设置 <code>&lt;label&gt;</code> 的 <code>for</code> 属性值和表单控件的 <code>id</code> 属性值一致。</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>方式二：用 <code>&lt;label&gt;</code> 直接包裹文字和表单控件，此时无需设置额外属性。</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><strong>（5）按钮</strong></p>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>submit</code></td>\n<td>提交，点击后将数据提交到后台，默认功能</td>\n</tr>\n<tr>\n<td><code>reset</code></td>\n<td>重置，点击后将表单控件恢复默认值</td>\n</tr>\n<tr>\n<td><code>button</code></td>\n<td>普通按钮，默认无功能，需要配合 <code>JavaScript</code> 使用</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 16. 布局</h3>\n<p>用于划分网页区域摆放内容，实现网页布局。</p>\n<p><strong>（1）div</strong></p>\n<p>独占一行，又叫大盒子。</p>\n<p><strong>（2）span</strong></p>\n<p>不单独另起一行，又叫小盒子。</p>\n<h3> 17. 字符</h3>\n<p>用于在网页中显示预留字符。</p>\n<table>\n<thead>\n<tr>\n<th>显示</th>\n<th>描述</th>\n<th>实体名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code> </code></td>\n<td>空格</td>\n<td><code>&amp;nbsp;</code></td>\n</tr>\n<tr>\n<td><code>&gt;</code></td>\n<td>大于</td>\n<td><code>&amp;gt;</code></td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td>小于</td>\n<td><code>&amp;lt;</code></td>\n</tr>\n</tbody>\n</table>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "image": "https://zzdxy.github.io/zzdxy/zzdxy/contact/wechatpublic.svg =150x",
      "date_published": "2023-08-29T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Web 前端教程"
      ]
    },
    {
      "title": "CSS 教程",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/front-end/20230903-css.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/front-end/20230903-css.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 一、前言 二、概念 1. 什么是 CSS CSS（`Cascading Style Sheets），中文译为 层叠样式表。它是一种样式表语言，用于美化 HTML` 文档的呈现。一般位于 头部， 标签下添加 标签，CSS 代码就放在 中。 2. CSS 引入方式 CSS 引入方式有三种，分别是： 内部...",
      "content_html": "<h1> CSS 教程</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n</div>\n<h2> 一、前言</h2>\n<h2> 二、概念</h2>\n<h3> 1. 什么是 CSS</h3>\n<p><code>CSS</code>（<code>Cascading Style Sheets</code>），中文译为 <strong>层叠样式表</strong>。它是一种样式表语言，用于美化 <code>HTML</code> 文档的呈现。一般位于 <code>&lt;head&gt;</code> 头部，<code>&lt;title&gt;</code> 标签下添加 <code>&lt;style&gt;</code> 标签，<code>CSS</code> 代码就放在 <code>&lt;style&gt;</code> 中。</p>\n<h3> 2. CSS 引入方式</h3>\n<p><code>CSS</code> 引入方式有三种，分别是：</p>\n<ul>\n<li><strong>内部样式表</strong></li>\n<li><strong>外部样式表</strong></li>\n<li><strong>行内样式</strong></li>\n</ul>\n<p><strong>（1）内部样式表</strong></p>\n<p>将样式代码写在 <code>style</code> 标签中。</p>\n<blockquote>\n<p><strong>效果预览</strong>：https://code.juejin.cn/pen/7274512428615303226</p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>（2）外部样式表</strong></p>\n<p>将样式代码写在单独的 <code>CSS</code> 文件中（后缀为 <code>.css</code>），接着在 <code>HTML</code> 中通过 <code>&lt;link&gt;</code> 标签引入即可。</p>\n<blockquote>\n<p><strong>效果预览</strong>：https://code.juejin.cn/pen/7274578705379229759</p>\n</blockquote>\n<div class=\"language-css-demo.css line-numbers-mode\" data-ext=\"css-demo.css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>（3）行内样式</strong></p>\n<p>在 <code>HTML</code> 基础标签中添加 <code>style</code> 属性，<code>style</code> 属性的值为 <code>CSS</code> 代码。</p>\n<blockquote>\n<p><strong>效果预览</strong>：https://code.juejin.cn/pen/7274579350450602045</p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 三、选择器</h2>\n<h3> 1. 基础选择器</h3>\n<p>使用标签名作为选择器，然后为其设置相同的样式。比如选择器如果为 <code>a</code>，则代表所有链接标签都将具有 <code>a</code> 选择器所设置的样式。</p>\n<h3> 2. 类选择器</h3>\n<p>查找标签，差异化设置标签的显示效果。</p>\n<p>使用类选择器的步骤如下。</p>\n<ul>\n<li>定义类选择器，一般是 <code>.类名</code></li>\n<li>使用类选择器，在标签中添加 <code>class=\"类名\"</code></li>\n</ul>\n<blockquote>\n<p><strong>效果预览</strong>：https://code.juejin.cn/pen/7274579791225815095</p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意，一个标签中可以使用多个类选择器，只需要将各个选择器用空格隔开就好。类选择器名自定义，注意不要用纯数字或者中文，尽量用英文。</p>\n<h3> 3. id 选择器</h3>\n<p>类似于类选择器，用于查找标签，差异化设置标签的显示效果。一般是配合 <code>JavaScript</code> 使用，很少用来设置 <code>CSS</code> 样式。</p>\n<p>使用 <code>id</code> 选择器的步骤如下：</p>\n<ul>\n<li>定义 <code>id</code> 选择器，一般是 <code>#id名</code></li>\n<li>使用 <code>id</code> 选择器，在表其中添加 <code>id=\"id名\"</code></li>\n</ul>\n<blockquote>\n<p><strong>效果预览</strong>：https://code.juejin.cn/pen/7274586257244553273</p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意，同一个 <code>id</code> 选择器，在一个页面中通常只能使用一次。</p>\n<h3> 4. 通配符选择器</h3>\n<p>用于查找页面中所有的标签，然后给它们设置相同的样式。通配符选择器为 <code>*</code>，无需调用浏览器就会自动查找页面中的所有标签，设置统一样式。</p>\n<blockquote>\n<p><strong>效果预览</strong>：https://code.juejin.cn/pen/7274588738708537403</p>\n</blockquote>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 5. 复合选择器</h3>\n<p>由两个或多个基础选择器通过不同的方式组合而成的选择器，能够更加准确高效地选择目标元素。</p>\n<p>可以分为后代选择器、子代选择器、并集选择器。</p>\n<p>（1）<strong>后代选择器</strong></p>\n<p>用于选中某元素的后代元素，书写语法如下，其中，父选择器和子选择器之间用空格分隔。</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><blockquote>\n<p><strong>效果预览</strong>：https://code.juejin.cn/pen/7278316108086509583</p>\n</blockquote>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>（2）<strong>子代选择器</strong></p>\n<p>用于选中某元素的子代元素，书写语法如下，其中，父选择器和子选择器之间用 <code>&gt;</code> 分隔。</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><blockquote>\n<p><strong>效果预览</strong>：https://code.juejin.cn/pen/7278317640706162748</p>\n</blockquote>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>（3）<strong>并集选择器</strong></p>\n<p>用于选中多组标签，设置相同的样式。书写语法如下，选择器之间用 <code>,</code> 分隔。</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><blockquote>\n<p><strong>效果预览</strong>：https://code.juejin.cn/pen/7278319757644005376</p>\n</blockquote>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 四、画盒子</h2>\n<p>利用合适的选择器画盒子，常用属性如下表。</p>\n<blockquote>\n<p><strong>效果预览</strong>：https://code.juejin.cn/pen/7274599388759916603</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>width</code></td>\n<td>设置盒子宽度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>height</code></td>\n<td>设置盒子高度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>background-color</code></td>\n<td>设置背景色</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 五、文字控制属性</h2>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>font-size</code></td>\n<td>字体大小</td>\n</tr>\n<tr>\n<td><code>font-weight</code></td>\n<td>字体粗细</td>\n</tr>\n<tr>\n<td><code>font-style</code></td>\n<td>字体倾斜</td>\n</tr>\n<tr>\n<td><code>line-height</code></td>\n<td>行高</td>\n</tr>\n<tr>\n<td><code>font-family</code></td>\n<td>字体族</td>\n</tr>\n<tr>\n<td><code>font</code></td>\n<td>字体复合属性</td>\n</tr>\n<tr>\n<td><code>text-indent</code></td>\n<td>文本缩进方式</td>\n</tr>\n<tr>\n<td><code>text-align</code></td>\n<td>文本对齐方式</td>\n</tr>\n<tr>\n<td><code>text-decoration</code></td>\n<td>文本修饰线</td>\n</tr>\n<tr>\n<td><code>color</code></td>\n<td>字体颜色</td>\n</tr>\n</tbody>\n</table>\n<h3> 1. 字体大小</h3>\n<p>用于指定文字尺寸大小，必须带有单位，否则不会生效，常用单位为 <code>px</code>。</p>\n<blockquote>\n<p><strong>效果预览</strong>：https://code.juejin.cn/pen/7275347343271002167</p>\n</blockquote>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2. 字体粗细</h3>\n<p>用于设置字体粗细，单位既可以使用数字，也可以使用关键字。不过在正式开发时，一般都推荐使用数字的形式。</p>\n<blockquote>\n<p><strong>效果预览</strong>：https://code.juejin.cn/pen/7275351160939577405</p>\n</blockquote>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 3. 字体倾斜</h3>\n<p>设置文字倾斜效果。</p>\n<blockquote>\n<p><strong>效果预览</strong>：https://code.juejin.cn/pen/7275713613934329914</p>\n</blockquote>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 4. 行高</h3>\n<p>设置多行文本的间距，属性值有两种写法，一种是 数字 + <code>px</code> 的方式，而另一种则是直接数字的方式，表示为标签 <code>font-size</code> 属性值的倍数。</p>\n<blockquote>\n<p><strong>预览效果</strong>：https://code.juejin.cn/pen/7275715629028802616</p>\n</blockquote>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 5. 字体族</h3>\n<p>设置文本字体，属性值为字体名。注意，属性值可以有多个字体名，只需要用逗号隔开即可，执行顺序是从左往右依次查找。</p>\n<blockquote>\n<p><strong>效果预览</strong>：https://code.juejin.cn/pen/7275720518836158523</p>\n</blockquote>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 6. 复合属性</h3>\n<p>用于设置网页文字的公共样式，使用语法如下：</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>使用时，属性一定要按照顺序写，而且字号和字体必须要有，否则 <code>font</code> 属性将无效。</p>\n<blockquote>\n<p><strong>效果预览</strong>：https://code.juejin.cn/pen/7275723268651548709</p>\n</blockquote>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 7. 文本缩进</h3>\n<p>设置文本首行缩进效果，属性值可以是两种形式，一种是 <strong>数字 + <code>px</code></strong>，而另一种则是 <strong>数字 + <code>em</code></strong> 的形式，其中 <code>1em</code> = 当前标签的字号大小。</p>\n<blockquote>\n<p><strong>效果预览</strong>：https://code.juejin.cn/pen/7276092884367966269</p>\n</blockquote>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 8. 文本对齐</h3>\n<p>控制文本水平对齐方式，主要有左对齐、居中对齐、右对齐等形式，其中默认效果是左对齐。各属性值说明如下：</p>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>left</code></td>\n<td>左对齐</td>\n</tr>\n<tr>\n<td><code>center</code></td>\n<td>居中对齐</td>\n</tr>\n<tr>\n<td><code>right</code></td>\n<td>右对齐</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>效果预览</strong>：https://code.juejin.cn/pen/7276094993277091852</p>\n</blockquote>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 9. 修饰线</h3>\n<p>用于给文本添加修饰线，常用的有以下几个属性值：</p>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>none</code></td>\n<td>无效果</td>\n</tr>\n<tr>\n<td><code>underline</code></td>\n<td>下划线</td>\n</tr>\n<tr>\n<td><code>line-through</code></td>\n<td>删除线</td>\n</tr>\n<tr>\n<td><code>overline</code></td>\n<td>上划线</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>预览地址</strong>：https://code.juejin.cn/pen/7276097261292945408</p>\n</blockquote>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 10. 颜色</h3>\n<p>设置文本颜色，属性值主要有 4 种表示方式：</p>\n<table>\n<thead>\n<tr>\n<th>表示方式</th>\n<th>属性值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>颜色关键字</td>\n<td>英文单词</td>\n<td><code>green</code>、<code>blue</code>、<code>red</code></td>\n</tr>\n<tr>\n<td><code>rgb</code></td>\n<td><code>rgb(r, g, b)</code></td>\n<td><code>r</code>、<code>g</code>、<code>b</code> 表示红绿蓝三原色，取值范围是：<code>0 -255</code></td>\n</tr>\n<tr>\n<td><code>rgba</code></td>\n<td><code>rgba(r, g, b, a)</code></td>\n<td>相比于 <code>rgb</code> 表示法多了一个 <code>a</code>，用于表示透明度，取值范围是：<code>0 - 1</code></td>\n</tr>\n<tr>\n<td>十六进制</td>\n<td><code>#RRGGBB</code></td>\n<td>如 <code>#000000</code> 表示黑色，<code>#FFFFFF</code> 表示白色</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>效果预览</strong>：https://code.juejin.cn/pen/7276102359267639331</p>\n</blockquote>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "image": "https://zzdxy.github.io/zzdxy/zzdxy/contact/wechatpublic.svg =150x",
      "date_published": "2023-09-03T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Web 前端教程"
      ]
    },
    {
      "title": "Axios 简单使用指南",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/front-end/20230926-axios.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/front-end/20230926-axios.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 一、概述 1. 什么是 Axios ？ Axios 是一个开源的基于 promise 的 HTTP 请求库，一般常用于浏览器和 node.js 中。它能够在具有相同代码库的浏览器和 nodejs 中同时运行，在服务器侧，它利用服务器端原生的 node.js http 模块，而在客户端侧（一般是浏览器），则...",
      "content_html": "<h1> Axios 简单使用指南</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<h2> 一、概述</h2>\n<h3> 1. 什么是 Axios ？</h3>\n<p><code>Axios</code> 是一个开源的基于 <code>promise</code> 的 <code>HTTP</code> 请求库，一般常用于浏览器和 <code>node.js</code> 中。它能够在具有相同代码库的浏览器和 <code>nodejs</code> 中同时运行，在服务器侧，它利用服务器端原生的 <code>node.js</code>  <code>http</code> 模块，而在客户端侧（一般是浏览器），则使用的是 <code>XMLHttpRequest</code>。</p>\n<p>从 <code>Vue 2.0</code> 版本开始，就极力推荐使用 <code>Axios</code> 来进行 <code>ajax</code> 请求，其源码仓库为：</p>\n<blockquote>\n<p><code>https://github.com/axios/axios</code></p>\n</blockquote>\n<h3> 2. 特性</h3>\n<ul>\n<li>从浏览器中创建 <code>XMLHttpRequests</code></li>\n<li>从 <code>node.js</code> 创建 <code>http</code> 请求</li>\n<li>支持 <code>Promise API</code></li>\n<li>拦截请求和响应</li>\n<li>转换请求数据和响应数据</li>\n<li>取消请求</li>\n<li>支持自动转换 <code>JSON</code> 数据</li>\n<li>客户端侧支持防御 <code>XSRF</code></li>\n</ul>\n<h3> 3. Axios 的安装</h3>\n<p><code>Axios</code> 安装主要有两种方式，一种是通过引入 <code>CDN</code>，另一种则是通过 <code>npm</code> 进行安装，两中安装的方式介绍如下。</p>\n<ol>\n<li>使用 CDN</li>\n</ol>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>使用 npm</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 4. 支持的浏览器</h3>\n<figure><img src=\"https://github.com/alrra/browser-logos/raw/main/src/main-desktop-browser-logos.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h2> 二、Axios 的使用</h2>\n<p><code>Axios</code> 提供了两种不同的方式来发送 <code>HTTP</code> 请求，其中一种是直接通过 <code>axios()</code> 方法，而另一种则是通过 <code>axios</code> 对象提供的跟 <code>HTTP</code> 方法对应起来的方法来发起请求，例如：</p>\n<ul>\n<li><code>axios.get()</code></li>\n<li><code>axios.post()</code></li>\n<li><code>axios.update()</code></li>\n<li><code>axios.put()</code></li>\n<li>……</li>\n</ul>\n<h3> 1. get 请求</h3>\n<ul>\n<li>语法</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li>实例</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2. post 请求</h3>\n<ul>\n<li>语法：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li>实例</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 3. put 请求</h3>\n<ul>\n<li>语法</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li>实例</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 4. delete 请求</h3>\n<ul>\n<li>语法</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li>实例</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 三、总结</h2>\n<p>以上就是本文的所有内容了，主要介绍了 <code>Axios</code> 的定义、特性、如何安装以及所支持的浏览器，然后介绍了如何使用 <code>Axios</code> 来模拟发起最常用的 <code>GET</code>、<code>POST</code>、<code>PUT</code> 以及 <code>DELETE</code> 请求。</p>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "image": "https://github.com/alrra/browser-logos/raw/main/src/main-desktop-browser-logos.png",
      "date_published": "2023-09-26T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Web 前端教程"
      ]
    },
    {
      "title": "Web 前端",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/front-end/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/front-end/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "一、Web 简介",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/front-end/javaweb-tutorial.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/front-end/javaweb-tutorial.html",
      "summary": "什么是 Web 什么是 Web 呢？所谓 Web，就是全球广域网，也叫做万维网（www, World Wide Web），通过浏览器就能够访问的网站。 Web 网站工作流程 混合开发 前后端分离 Web 前端 网页组成：文字、图片、音频、视频、超链接 而看到的网页，本质都是前端代码。通过浏览器对前端代码的的解析和渲染，形成用户看的网页。而在浏览器中对代...",
      "content_html": "<h1> 一、Web 简介</h1>\n<h2> 什么是 Web</h2>\n<p>什么是 <code>Web</code> 呢？所谓 <code>Web</code>，就是全球广域网，也叫做万维网（<code>www, World Wide Web</code>），通过浏览器就能够访问的网站。</p>\n<h2> Web 网站工作流程</h2>\n<figure><figcaption>混合开发</figcaption></figure>\n<figure><figcaption>前后端分离</figcaption></figure>\n<h2> Web 前端</h2>\n<p>网页组成：文字、图片、音频、视频、超链接</p>\n<p>而看到的网页，本质都是前端代码。通过浏览器对前端代码的的解析和渲染，形成用户看的网页。而在浏览器中对代码解析渲染的工具就叫做浏览器内核。需要注意，不同的浏览器内核是不一样的，所以对于相同的代码解析后的效果也有所有差异。</p>\n<p>为了让浏览器将一套代码都能渲染出相同的效果，所以制定了一系列的标准，而这些标准大部分都由 <code>W3C(World Wide Web Consortium，万维网联盟)</code> 负责制定。</p>\n<p>一个网页由三个部分共同组成：</p>\n<ul>\n<li><strong>HTML</strong>：网页的结构（页面元素 + 内容）</li>\n<li><strong>CSS</strong>：网页的表现（页面元素的外观、位置等页面样式）</li>\n<li><strong>JavaScript</strong>：网页的行为（交互效果）</li>\n</ul>\n<h1> 二、HTML</h1>\n<h2> 什么是 HTML</h2>\n<p><code>HTML(HyperText Markup Language)</code>，中文译为超文本标记语言。</p>\n<p>所谓超文本，就是超越了文本的限制，较普通文本更为强大。除开文字信息外，还能定义图片、音频、视频等诸多内容。</p>\n<p>而标记语言也很简单，就是由标签所构成的语言。在 <code>HTML</code> 中，所有标签都是预先定义好的。写好的 <code>HTML</code> 代码能直接在浏览器中运行，然后由浏览器解析。</p>\n<h2> HTML 快速入门</h2>\n<ol>\n<li>先建一个文本，保存后缀名为 <code>.html</code> 的文件中。</li>\n<li>接着编写 <code>HTML</code> 结构标签</li>\n</ol>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>在 <code>&lt;body&gt;</code> 中填写内容即可</li>\n</ol>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li>效果预览</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<p><code>HTML</code> 特点：</p>\n<ul>\n<li>标签不区分大小写</li>\n<li>标签属性值单双引号均可</li>\n<li>语法松散</li>\n</ul>\n<h2> 基础标签</h2>\n<p>既然说了 HTML 是由一系列的元素组成，那我们就来看看元素相关的内容。</p>\n<p>元素又是由一对标签加上内容所共同构成，以下是一个简单的文本标签示例。</p>\n<figure><figcaption></figcaption></figure>\n<p>该元素中，主要组成部分如下：</p>\n<ul>\n<li><strong>开始标签</strong>：由标签名称，大于号、小于号所组成，表示元素从此处开始生效。</li>\n<li><strong>结束标签</strong>：类似于开始标签，只是在标签名之前多了一个斜杠 <code>/</code>，表示元素的结尾。</li>\n<li><strong>内容</strong>：元素的内容。</li>\n</ul>\n<p>以下就来看看，<code>HTML</code> 中的各种常用标签。</p>\n<h3> <code>&lt;!DOCTYPE html&gt;</code></h3>\n<p>放在 HTML 文件中的首行，主要用于标识文档类型。</p>\n<h3> <code>&lt;html&gt;</code></h3>\n<p>HTML 文档中的根标签，包含了整个页面的所有内容，其他所有标签都包含在 <code>html</code> 标签中。</p>\n<h3> <code>&lt;head&gt;</code></h3>\n<p>这个元素中的内容对用户是不可兼得，主要用于设置网页字符编码、CSS 样式、页面描述、搜索关键字等信息。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> <code>&lt;body&gt;</code></h3>\n<p>网站主体内容，如果想让我们的内容显示在网页中让其他用户在访问该界面时看见，则内容需要写在该标签中，主要包括文本、图形、视频或其他内容。</p>\n<p>以下是一个在网页中显示内容的实例。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> <code>&lt;title&gt;</code></h3>\n<p>网页标题，在 <code>head</code> 标签中设置后，打开网页时将显示为网页标题。</p>\n<p>以下是一个实例。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> <code>&lt;p&gt;</code></h3>\n<p>文本标签，用于定义段落。该标签会自动在其前后创建一些空白，浏览器将自动添加这些空间。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 标题</h3>\n<p>此处的标题不同与上边的 <code>title</code> 标签，<code>title</code> 设置的主要是网页标题，二次数的标题主要是是针对 <code>body</code> 标签中的标题。</p>\n<p>这里的标题又可以分为 6 级，其对应标签分别是：<code>&lt;h1&gt;</code>、<code>&lt;h2&gt;</code>、<code>&lt;h3&gt;</code>、<code>&lt;h4&gt;</code>、<code>&lt;h5&gt;</code>、<code>&lt;h6&gt;</code>。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> <code>&lt;/br&gt;</code></h3>\n<p>表示换行，不同于 <code>title</code> 等标签，它是一个单标签，即开始标签和结束标签都是同一个，单词放在标签名之前。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> <code>&lt;img&gt;</code></h3>\n<p>表示图片标签，通过该属性我们可以在网页中添加一张图片。</p>\n<p>此外，<code>img</code> 标签提供 <code>src</code> 属性用于设置图片路径，<code>height</code> 属性设置图片高度，<code>width</code> 属性设置图宽度。为了防止图片失效造成误解，我们还可以给图片添加一个提示，此时使用 <code>alt</code> 属性即可。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> <code>&lt;a&gt;</code></h3>\n<p>在某一个网页中，我们要通过超链接来跳转到另一个页面，则此时需要用到 <code>&lt;a&gt;</code> 标签，当然该标签中最重要的 <code>href</code> 属性也不能少，它用于指示跳转的目标网页。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 列表</h3>\n<p>列表可以分为有序列表和无序列表，其中有序列表是由 <code>ol</code> 标签标识。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>有序列表中，可以在 <code>ol</code> 标签中添加 <code>start</code> 属性，用于表示从第几位开始，<code>type</code> 属性用于标识所要显示的类型。</p>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>1</code></td>\n<td>显示类型为数字类型</td>\n</tr>\n<tr>\n<td><code>A</code></td>\n<td>显示类型为大写字母类型</td>\n</tr>\n<tr>\n<td><code>a</code></td>\n<td>显示类型为小写字母类型</td>\n</tr>\n<tr>\n<td><code>I</code></td>\n<td>显示类型为大写罗马数字类型</td>\n</tr>\n<tr>\n<td><code>i</code></td>\n<td>显示类型为小写罗马数字类型</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>除开有序列表之外，还有无序列表，无序列表以 <code>ul</code> 标识。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>无序列表虽然没有顺序之分，但是同样提供了 <code>type</code> 属性。</p>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>disc</code></td>\n<td>小圆黑点，默认显示方式</td>\n</tr>\n<tr>\n<td><code>circle</code></td>\n<td>空心圆圈</td>\n</tr>\n<tr>\n<td><code>square</code></td>\n<td>小黑方形</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> <code>&lt;b&gt;</code></h3>\n<p>要实现对内容加粗，可以使用 <code>&lt;b&gt;</code> 标签。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> <code>&lt;u&gt;</code></h3>\n<p>有时需要对内容做下划线处理，则可以使用 <code>&lt;u&gt;</code> 标签。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> <code>&lt;i&gt;</code></h3>\n<p>为了将文本以斜体的方式显示给浏览器，可以使用 <code>&lt;i&gt;</code> 标签。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 上下标</h3>\n<p>有时候我们需要在网页中显示数学或者化学公式，那么此时需要用到上下标，其中上标用标签 <code>&lt;sup&gt;</code> 表示，下标用标签 <code>&lt;sub&gt;</code> 表示。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> <code>&lt;table&gt;</code></h3>\n<p>表格标签 <code>&lt;table&gt;</code> 中又含有多个子标签，常用的子标签有如下。</p>\n<ul>\n<li><code>th</code>：表头列</li>\n<li><code>tr</code>：行</li>\n<li><code>td</code>：列</li>\n</ul>\n<p>同样的，表格标签还提供了以下这些常用的属性，用于给表格增加样式。但现在大多都是用 CSS 来对表格进行修饰，所以这些属性简单了解即可，不用太过深入。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>border</code></td>\n<td>表格边框的粗细</td>\n</tr>\n<tr>\n<td><code>width</code></td>\n<td>表格的宽度</td>\n</tr>\n<tr>\n<td><code>cellspacing</code></td>\n<td>单元格间距</td>\n</tr>\n<tr>\n<td><code>cellpadding</code></td>\n<td>单元格填充</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> <code>&lt;form&gt;</code></h3>\n<p><code>&lt;form&gt;</code> 表示文档中的一个区域，主要包含交互空间，用来向服务器提交信息。<code>&lt;form&gt;</code> 标签通常包含一个或者多个表单标签，常用的表单标签如下：</p>\n<table>\n<thead>\n<tr>\n<th>表单标签</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;input&gt;</code></td>\n<td>输入框</td>\n</tr>\n<tr>\n<td><code>&lt;textarea&gt;</code></td>\n<td>文本域</td>\n</tr>\n<tr>\n<td><code>&lt;button&gt;</code></td>\n<td>按钮</td>\n</tr>\n<tr>\n<td><code>&lt;select&gt;</code></td>\n<td>单选框</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>其中 <code>action</code> 属性用来处理表单提交的 URL，<code>method</code> 属性表示使用何种 HTTP 方式来提交表单，常用的值有 <code>post</code> 和 <code>get</code>。</p>\n<h1> 三、CSS</h1>\n<h2> 什么是 CSS</h2>\n<p><code>CSS(Cascading Style Sheet)</code>，中文译为层叠样式表，用于控制页面的样式。</p>\n<h1> 四、JavaScript 简介</h1>\n<h2> 什么是 JavaScript</h2>\n<p>作为世界上最流行的语言之一，是一种运行在客户端的脚本语言。而所谓脚本语言，就是不需要编译就能运行的编程语言，<code>JavaScript</code> 在运行过程中通过 <code>JS</code> 解释器来逐行解释然后执行。</p>\n<h2> JavaScript 能做什么？</h2>\n<p>最初的时候，<code>JavaScript</code> 被设计出来的初衷是为了实现表单的动态校验，比如密码长度校验、邮箱格式校验等。但渐渐随着 <code>JavaScript</code> 的发展，<code>JavaScript</code> 变得越来越强大，也发展出了许多产物，如 <code>Node.js</code>、<code>Electron</code>、<code>Cordova</code>、<code>Ruff</code>、<code>cocos2d-js</code>。利用这些产物，我们可以用来进行服务器的开发、桌面程序的搭建、<code>APP</code> 的开发、硬件-物联网的控制、游戏开发等等工作。</p>\n<h2> HTML、CSS、JavaScript 之间的关系</h2>\n<p><code>HTML</code> 和 <code>CSS</code> 不同于 <code>JavaScript</code>，它们都是描述类语言，其中 <code>HTML</code> 主要用于决定网页结构和内容（决定网页上能看到什么），而 <code>CSS</code> 则主要用于定义网页所呈现给用户的模样（决定网页是否美观）。<code>JavaScript</code> 则是专注于实现业务逻辑和页面控制（决定网页提供的功能）。</p>\n<p>如果把这三者比作一个王者荣耀中的英雄的话，那 <code>HTML</code> 就相当于原皮的英雄，而 <code>CSS</code> 则是相当于英雄的皮肤，让我们的英雄更帅气，而 <code>JavaScript</code> 则相当于英雄的技能，我们可以通过控制英雄通过技能来实现杀敌清兵的效果。</p>\n<h2> 浏览器如何执行 JavaScript</h2>\n<p><code>JavaScript</code> 一般运行在网页中的，所以一般是在浏览器中运行。而浏览器一般分为两部分，一个是<strong>渲染引擎</strong>，另一个则是 <strong>JS 引擎</strong>，两者的功能如下：</p>\n<ul>\n<li><strong>渲染引擎</strong>：用于解析 <code>HTML</code> 和 <code>CSS</code> 代码，大家一般把它叫做内核，比如 <code>Chrome</code> 浏览器的 <code>Blink</code>，<code>Firefox</code> 浏览器的 <code>Gecko</code>。</li>\n<li><strong>JavaScript 引擎</strong>：也叫做 <code>JavaScript</code> 解释器，主要用于读取网页中的 <code>JavaScript</code> 代码，然后对其处理用执行，如 <code>Chrome</code> 浏览器的 <code>V8</code>，<code>Firefox</code> 的 <code>TraceMonkey</code>。</li>\n</ul>\n<p>所以名义上虽然说是浏览器执行了 <code>JavaScript</code> 代码，但如果看底层的话，却会发现其实 <code>JavaScript</code> 代码是通过浏览器中的 <code>JavaScript</code> 引擎来执行的。<code>JavaScript</code> 引擎在执行代码时会逐行解释源代码，将其转换为机器语言，然后交由计算机执行。也正因为如此，所以将 <code>JavaScript</code> 划分为脚本语言，它会逐行去解释执行，而不是像 <code>HTML</code>、<code>CSS</code> 类似的标记语言。</p>\n<h2> JavaScript 的组成</h2>\n<figure><figcaption></figcaption></figure>\n<ol>\n<li><strong>ECMAScript</strong></li>\n</ol>\n<p><code>ECMAScript</code> 是由 <code>ECMA</code> 国际进行标准化的一门编程语言，往往被大家称为 JavaScript 或者 <code>JScript</code>，但实际上并不是一个东西，后两者其实是基于 <code>ECMAScript</code> 的实现和扩展。其中，<code>JavaScript</code> 是由网景公司所提出，而 <code>JScript</code> 则是由微软公司所提出。 所以 <code>ECMAScript</code> 更像是一种规范，它规定了 <code>JavaScript</code> 的编程语法和基础核心知识，然后所有的浏览器厂商都需要共同遵守这一套 <code>JavaScript</code> 语法工业标准。</p>\n<ol start=\"2\">\n<li><strong>DOM</strong></li>\n</ol>\n<p><code>DOM</code>（<code>Document Object Model</code>）即文档对象模型，是由 <code>W3C</code> 组织推荐的用于处理可扩展标记语言的<strong>标准编程接口</strong>。通过 <code>DOM</code> 所提供的各种接口，我们就能够轻易地对网页上的各种元素进行操作，如调整位置、大小、颜色等。</p>\n<ol start=\"3\">\n<li><strong>BOM</strong></li>\n</ol>\n<p><code>BOM</code>（<code>Browser Object Model</code>）即浏览器对象模型，它提供了独立于内容，能够与浏览器进行交互的对象结构。通过使用 <code>BOM</code>，我们就能够十分方便的操作浏览器窗口，如弹出提示框、控制跳转、获取分辨率等操作。</p>\n<h2> JavaScript 引入方式</h2>\n<p><code>JavaScript</code> 的引入方式主要有 3 种，分别是 <strong>行内式</strong>、<strong>内嵌式</strong> 和 <strong>外部式</strong>，以下就分别来看看各种引入方式的写法。</p>\n<ol>\n<li><strong>行内式</strong></li>\n</ol>\n<p>首先是行内式，顾名思义，所谓行内式，就是将少量的 <code>JavaScript</code> 代码直接写在 <code>HTML</code> 标签的相关属性中，比如下面的代码。通过点击页面中的按钮，页面就会弹窗。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>行内式的特点就是比较简单，但是也存在很多问题。比如可读性较差，如果需要在 <code>HTML</code> 编写大量 <code>JavaScript</code> 代码时，此时阅读就很不方便。除此之外，<code>JavaScript</code> 和 <code>HTML</code> 中都会使用到引号，如果出现多层引号相互嵌套时，会非常容易混淆，导致代码实现结果出错。所以除非特殊情况，否则一般不推荐使用行内式。</p>\n<ol start=\"2\">\n<li><strong>内嵌式</strong></li>\n</ol>\n<p>相比于单行式，内嵌式就更加清晰明了。我们通过将 <code>JavaScript</code> 代码封装到 <code>&lt;script&gt;</code> 标签中，然后就可以实现简单的弹窗功能了。内嵌式的代码可读性更高，也更方便纠错。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li><strong>外部式</strong></li>\n</ol>\n<p>最后一种就是外部式，通过在外部新建一个后缀名为 <code>.js</code> 的文件，然后将 <code>JavaScript</code> 直接写到该文件中，最后在 <code>HTML</code> 页面中通过 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性引入即可。</p>\n<p>外部式的优点是很明显的：</p>\n<ul>\n<li>首先，可读性提高。<code>JavaScript</code> 代码量较大时，通过放在独立的文件中，排除了 <code>HTML</code> 和 <code>CSS</code> 元素的干扰。</li>\n<li>其次，代码复用率提高。假设我们其他业务需要同样的功能，我们只需要将封装好的 <code>.js</code> 文件引用过去即可使用。</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h1> 五、JavaScript 基础语法</h1>\n<h2> 注释</h2>\n<p>为了提高代码的可读性，我们往往需要在代码中添加一些额外的信息，但是我们又不想让这些信息影响到代码的执行。这时候，我们就需要使用到注释。<code>JavaScript</code> 中，主要有两种注释，一种是单行注释，另一种则是多行注释，和 <code>Java</code> 中的注释很相似。</p>\n<ol>\n<li><strong>单行注释</strong></li>\n</ol>\n<p>单行注释以 <code>//</code> 开头，后边接上需要注释的信息即可。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>多行注释</strong></li>\n</ol>\n<p>多行注释则是以 <code>/*</code> 开头，以 <code>*/</code> 结尾，两者中间所包含的内容则是我们的注释。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 输入输出</h2>\n<p>为了方便信息的输入输出，<code>JavaScript</code> 中也像其他编程语言一样，提供了常用的输入输出语句。而其中最常用的，莫过于以下 3 个方法了。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>功能</th>\n<th>归属</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>alert(msg)</code></td>\n<td>弹出警示框</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td><code>console.log(msg)</code></td>\n<td>控制台打印输出信息</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td><code>prompt(info)</code></td>\n<td>弹出输入框，用户可以输入信息</td>\n<td>浏览器</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><strong>prompt(info)</strong></li>\n</ol>\n<p>通过使用该方法，我们可以让用户在打开页面时让浏览器自动弹出输入框，然后用户就能够根据提示来进行信息输入。以下是一个简单的示例，通过弹窗让用户输入想要观看的动漫。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>alert(msg)</strong></li>\n</ol>\n<p>该方法可以在网页中弹出警示框，将信息展示给用户。紧接着上一个方法，假设用户输入后我们要让用户再次看到他刚才的输入，那我们就可以通过弹窗将刚才输入的信息进行展示。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li><strong>console(msg)</strong></li>\n</ol>\n<p>这个方法主要是用于在浏览器的控制台打开，而一般用户也用不到这个，更多的是开发人员用于调试开发时使用。</p>\n<figure><figcaption></figcaption></figure>\n<h2> 变量</h2>\n<h3> 什么是变量</h3>\n<p>其实在上面的例子中我已经试用过变量了，也就是在使用 <code>alert(msg)</code> 方法举例时，其中用的 <code>name</code> 其实就是一个变量。</p>\n<p>所谓变量，可以把它看做是用来存放数据的容器。我们通过<strong>变量名</strong>来获取容器中的数据，也可以进行数据修改等操作。其本质其实是程序在内存中所申请的用来存放数据的一块空间。</p>\n<h3> 如何使用变量</h3>\n<p>要使用一个变量也很简单，同样以下面的例子来说。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>主要可以把变量的使用拆解为两个步骤，第一步就是对变量进行声明，第二步则是对变量进行赋值。上面的例子是将两个步骤合二为一，而这个过程我们也叫做<strong>变量的初始化</strong>，在声明变量的同时也给对象赋了值。如果要对其进行拆分，则可以拆分为以下步骤：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中 <code>var</code> 是 <code>JavaScript</code> 中的一个关键字，用于声明变量。 通过使用该关键字对变量进行声明后，计算机就会自动为变量分配内存空间，而无需我们程序员去操作。<code>name</code> 则是我们所定义的变量名，通过变量名，我们就可以访问计算机在内存中所分配的空间了。</p>\n<h3> 变量命名规范</h3>\n<p>学习了变量的定义以及如何使用变量，接下来就要看看如何规范地进行变量命名。变量命名时，我们常常需要遵守以下的相关规则。</p>\n<ol>\n<li>只能由字母（<code>a-zA-Z</code>）、数字（<code>0-9</code>）、美元符号（<code>$</code>）、下划线（<code>_</code>） 组成。</li>\n<li>严格区分大小写。</li>\n<li>不能以数字开头。</li>\n<li>不能是 <code>JavaScript</code> 中的关键字、保留字。</li>\n<li>变量名应该有意义，而且应当遵守驼峰命名法。</li>\n</ol>\n<h2> 数据类型</h2>\n<p>学习了注释、输入输出以及变量的相关知识后，继续来学习 <code>JavaScript</code> 中的数据类型知识。</p>\n<h3> 什么是数据类型</h3>\n<p>在计算机中，不同数据所需要的存储空间是不一样的，为了尽可能的提高内存利用率，方便把数据划分为所需内存大小不同的数据，于是需要将不同数据定义为对应的数据类型。</p>\n<p>最常见的就是字符串和数字，就像“公众号：村雨遥”这个字符串和 1943 这个数字所对应的类型是不一样。</p>\n<p>不同于 <code>Java</code> 这样的编程语言，<code>JavaScript</code> 是一种弱类型的语言。这意味在 <code>JavaScript</code> 中，不用提前声明变量的类型，在程序运行过程中，<code>JavaScript</code> 引擎会自动确定变量类型。在 <code>Java</code> 中，如果我们要定义一个变量，通常需要像如下形式：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>但是在 <code>JavaScript</code> 中，我们只需要按照下面的方式定义即可。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>也正是由于 <code>JavaScript</code> 的动态特性，所以在 <code>JavaScript</code> 中，变量的数据类型是可以变化的。</p>\n<p>以下是一个变量数据类型动态变化的实例，一开始变量是一个字符串，然后我们又把它变成了数字类型。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 数据类型分类</h3>\n<p>在 <code>JavaScript</code> 中，数据类型可以分为两大类：</p>\n<ul>\n<li>\n<p><strong>基本数据类型</strong>：<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Undefined</code>、<code>Null</code></p>\n</li>\n<li>\n<p><strong>复杂数据类型</strong>：<code>object</code></p>\n</li>\n</ul>\n<p>基本数据类型详情如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Number</code></td>\n<td>数字类型，包括整形和浮点型</td>\n<td>0</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td>字符串类型</td>\n<td><code>\"\"</code></td>\n</tr>\n<tr>\n<td><code>Boolean</code></td>\n<td>布尔值类型</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>Undefined</code></td>\n<td>如果一个变量声明了但是未赋值，则此时该变量为 <code>undefined</code></td>\n<td><code>undefined</code></td>\n</tr>\n<tr>\n<td><code>Null</code></td>\n<td><code>var num = null</code>，声明变量 <code>num</code> 为空值</td>\n<td><code>null</code></td>\n</tr>\n</tbody>\n</table>\n<h4> 数字类型（<code>Number</code>）</h4>\n<p>JavaScript 中，不分整型和浮点型，它们统一称之为数字类型。也就是说，JavaScript 中数字类型的既可以保存整数值，也可以保存小数值。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>数字型中，有以下几个特殊值需要值得注意：</p>\n<ul>\n<li><strong>最大值</strong>：<code>Number.MAX_VALUE</code></li>\n<li><strong>最小值</strong>：<code>Number.MIN_VALUE</code></li>\n<li><strong>无穷大</strong>：<code>Infinity</code>，表示大于任何数值。</li>\n<li><strong>无穷小</strong>：<code>-Infinity</code>，表示小于任何数值。</li>\n<li><strong>非数字</strong>：<code>NaN</code>，<code>Not a number</code>，表示一个非数字。</li>\n</ul>\n<p>如果要确认一个变量是否是非数字，<code>JavaScript</code> 提供了一个方法 <code>isNaN(x)</code>。如果 <code>x</code> 是一个数字，则返回 <code>false</code>，如果 <code>x</code> 不是数字，则返回 <code>true</code>。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h4> 字符串类型（<code>String</code>）</h4>\n<p><code>JavaScript</code> 中，把用引号括起来的任意文本叫做字符串类型，其中引号既可以使用双引号 <code>\"\"</code>，也可以使用单引号 <code>''</code>。</p>\n<p>以下的 <code>name</code> 就是一个字符串类型，可以使用单引号或双引号将其包括，两者的功能是一样的。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>除此之外，和其他编程语言一样，JavaScript 也提供了许多转义符，常见的转义符如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>转义符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\n</code></td>\n<td>换行</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td><code>\\</code> 右斜杠</td>\n</tr>\n<tr>\n<td><code>\\'</code></td>\n<td><code>'</code> 单引号</td>\n</tr>\n<tr>\n<td><code>\\\"</code></td>\n<td><code>\"</code> 双引号</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td><code>tab</code> 缩进</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>空格</td>\n</tr>\n</tbody>\n</table>\n<p><code>JavaScript</code> 中对于字符串的常用操作主要有以下几种。</p>\n<ol>\n<li><strong>获取字符串长度</strong></li>\n</ol>\n<p>字符串是由如果字符所组成，而字符串的长度就是这些字符的数量。在 <code>JavaScript</code> 中，可以通过字符串的 <code>length</code> 属性获取整个个字符串的长度。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>字符串拼接</strong></li>\n</ol>\n<p>如果存在多个字符串，可以使用 <code>+</code> 来进行拼接，其具体方式为：</p>\n<blockquote>\n<p>字符串 + 任何类型 = 拼接后的新字符串</p>\n</blockquote>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h4> 布尔类型（<code>Boolean</code>）</h4>\n<p>只有 <code>true</code> 和 <code>false</code> 两个值，<code>true</code> 代表真，而 <code>false</code> 表示假。但是当它们和数字类型相加时，此时 <code>true</code> 的值就变成了 1，而 <code>false</code> 的值变成了 0。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h4> <code>Undefined</code> 和 <code>Null</code></h4>\n<p>在 <code>JavaScript</code> 中，如果一个变量被声明后但却没有赋值，那么此时该变量的默认值就是 <code>undefined</code>。</p>\n<p>如果一个对象的值未设置，那么则该对象此时为 <code>null</code>。</p>\n<h3> 获取变量数据类型</h3>\n<p>假设我们有一个变量，但是没有找到他的定义所在位置，那么此时也不用慌，<code>JavaScript</code> 提供了 <code>typeof</code> 关键字来帮助我们确定变量的数据类型。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 数据类型转换</h3>\n<p>日常开发中，在浏览器中通过表单或者 <code>prompt</code> 等获取来的变量默认都是字符串类型，但实际上我们所需要的类型往往都不是字符串，此时就需要对变量的数据类型进行转换。而这一过程就叫做数据类型转换，即将一种数据类型的变量转换为另一种数据类型。</p>\n<p>最常用的主要有以下三种：</p>\n<ul>\n<li><strong>转换为字符串类型</strong></li>\n<li><strong>转换为数字类型</strong></li>\n<li><strong>转换为布尔类型</strong></li>\n</ul>\n<h4> 转换为字符串类型</h4>\n<p>转换为字符串类型的方法总结如下表，以下就分别来看看这三种方法的使用。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>toString()</code></td>\n<td>转换为字符串</td>\n</tr>\n<tr>\n<td><code>String()</code> 强制转换</td>\n<td>转换为字符串</td>\n</tr>\n<tr>\n<td><code>+</code> 拼接</td>\n<td>和字符串拼接的结果都是字符串</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><strong>toString()</strong></li>\n</ol>\n<p>通过调用 <code>toString()</code> ，可以实现由其他类型向字符串类型的转变。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>String()</strong></li>\n</ol>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li><strong><code>+</code> 拼接</strong></li>\n</ol>\n<p>字符串和其他任意类型的变量相拼接，最后得到的一定是字符串。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h4> 转换为数字类型</h4>\n<p>最常用的一般是字符串类型转换为数字类型，这里既可以将字符串类型转换为具体的整数数值类型或者浮点数数值类型，也可以将直接将其转换为数值型而不用区分整数数值还是浮点数数值。除此之外，还经常利用运算符来进行隐式转换。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>parseInt(string)</code></td>\n<td>字符串类型转换为整数数值类型</td>\n</tr>\n<tr>\n<td><code>parseFloat(string)</code></td>\n<td>字符串类型转换为浮点数数值类型</td>\n</tr>\n<tr>\n<td><code>Number()</code></td>\n<td>字符串转换为数值型</td>\n</tr>\n<tr>\n<td><code>-</code>、<code>*</code>、<code>/</code> 隐式转换</td>\n<td>利用算数运算隐式转换为数值型</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><strong>parseInt(string)</strong></li>\n</ol>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>parseFloat(string)</strong></li>\n</ol>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li><strong>Number()</strong></li>\n</ol>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"4\">\n<li><strong>运算符隐式转换</strong></li>\n</ol>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h4> 转换为布尔类型</h4>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Boolean()</code></td>\n<td>将其他类型转换为布尔类型</td>\n</tr>\n</tbody>\n</table>\n<p>在 <code>JavaScript</code> 中，代表<strong>空、否定</strong>的值都会转变为 <code>false</code>，比如 <code>''</code>、 <code>0</code>、<code>NaN</code>、<code>undefined</code>、<code>null</code> 等。而其他值则会转换为 <code>true</code>。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 运算符</h2>\n<p>运算符（<code>operator</code>），也叫做操作符，主要是用于实现赋值、比较以及执行算数运算等功能的符号。在 <code>JavaScript</code> 中，主要有以下几类常见的运算符：</p>\n<ul>\n<li>算数运算符</li>\n<li>递增递减运算符</li>\n<li>比较运算符</li>\n<li>逻辑运算符</li>\n<li>赋值运算符</li>\n</ul>\n<p>以下就分别来看看，这些运算符都是怎么用的。</p>\n<h3> 算数运算符</h3>\n<p>这个我们应该都不陌生，从小学开始，我们就学习加、减、乘、除、取余等算数运算。而算数运算符也就是供我们算术运算所使用的的符号，主要用来执行两个变量或值的算数运算。</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo></mrow><annotation encoding=\"application/x-tex\">+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">+</span></span></span></span></td>\n<td>加</td>\n</tr>\n<tr>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">-</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span></span></span></span></td>\n<td>减</td>\n</tr>\n<tr>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∗</mo></mrow><annotation encoding=\"application/x-tex\">*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord\">∗</span></span></span></span></td>\n<td>乘</td>\n</tr>\n<tr>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">/</mi></mrow><annotation encoding=\"application/x-tex\">/</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">/</span></span></span></span></td>\n<td>除</td>\n</tr>\n<tr>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">%</span></span></span></span></td>\n<td>取余</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>但是在进行算数运算时，特别需要注意的是浮点数的计算，浮点数值的最高精度是 17 位小数，但算数运算时却远不如整数。同时，我们也需要注意，不要用浮点数来直接进行比较。</p>\n<h3> 表达式与返回值</h3>\n<p>所谓表达式，就由数字、运算符、变量等组成的式子。而且表达式最终能够求得一个结果，而这个返回给我们的值就叫做返回值。</p>\n<h3> 递增递减运算符</h3>\n<p>如果要实现让一个变量自己加 1，以前的做法是按照如下方式：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>但现在可以利用递增计算符（<code>++</code>）来给实现给变量加 1，同样，递增计算符的位置也会对最终的结果造成影响。</p>\n<p>如果递增计算符放在变量前面，则该递增计算符又称为前置递增运算符。若递增计算符放在变量后面，则称为后置递增运算符。</p>\n<p>同样类比，有递增那就有递减。而且和递增一样，也可以根据递减运算符所放置的位置将其分为前置递减运算符和后置递减运算符。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>前置和后置如果是单独使用，那么它们实现的效果是一样的。而两者的区别在于：</p>\n<ul>\n<li>使用前置时：先自加/减 1，然后再返回结果。</li>\n<li>使用后置式：先返回原值，然后再自加/减 1。</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 比较运算符</h3>\n<p>比较运算符又叫做关系运算符，是两个数据之间进行比较时所使用的运算符，通过比较，返回一个布尔值作为比较运算的结果，常见的比较运算符总结见下表。</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;</code></td>\n<td>小于</td>\n</tr>\n<tr>\n<td><code>&gt;</code></td>\n<td>大于</td>\n</tr>\n<tr>\n<td><code>&gt;=</code></td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td><code>&lt;=</code></td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td><code>==</code></td>\n<td>判等，值相等即可</td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td>不等于</td>\n</tr>\n<tr>\n<td><code>===</code></td>\n<td>全等，值和数据类型都一致</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>可以注意到 <code>==</code> 和 <code>===</code> 是不一样的，我们在比较时，一定要注意它们之间的区别。</p>\n<h3> 逻辑运算符</h3>\n<p>逻辑运算符是用来进行布尔值运算的运算符，其最终返回结果也是一个布尔值，常用于条件判断。常见的逻辑运算符见下表。</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&amp;</code></td>\n<td>与</td>\n</tr>\n<tr>\n<td><code>&amp;&amp;</code></td>\n<td>逻辑与</td>\n</tr>\n<tr>\n<td>`</td>\n<td>`</td>\n</tr>\n<tr>\n<td>`</td>\n<td></td>\n</tr>\n<tr>\n<td><code>!</code></td>\n<td>逻辑非</td>\n</tr>\n</tbody>\n</table>\n<p>其中 <code>&amp;</code> 和 <code>&amp;&amp;</code> 的区别在于：<code>&amp;</code> 中一旦符号前布尔值为 <code>false</code> 时，还会继续符号后布尔值的运算，然后判定两个布尔值的运算结果为 <code>false</code>。而 <code>&amp;&amp;</code> 一旦符号前布尔值为 <code>false</code>，就不再进行符号后布尔值的运算，直接判定两个布尔值最终结果为 <code>false</code>，这个过程就叫做短路运算。</p>\n<p>而 <code>||</code> 表示只要符号前后任一布尔值为 <code>true</code>，则最终结果为 <code>true</code>。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 赋值运算符</h3>\n<p>顾名思义，所谓赋值运算符就是用来将数据赋值给变量的运算符，常用的赋值运算符总结如下。</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>=</code></td>\n<td>直接赋值</td>\n</tr>\n<tr>\n<td><code>+=、-=</code></td>\n<td>加、减一个数后赋值</td>\n</tr>\n<tr>\n<td><code>*=、/=、%=</code></td>\n<td>乘、除、取余后赋值</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 运算符优先级</h3>\n<p>运算符的优先级决定了我们表达式中运算执行的先后顺序，优先级越高，则执行顺序越靠前。常见的运算符的优先级分级如下表。总的来说，在开发过程中要尽量避免复杂的表达式，如果实在是要用，也可以多利用小括号来提高代码的可读性，防止因疏忽代码运算执行先后顺序而导致程序结果错误。</p>\n<table>\n<thead>\n<tr>\n<th>优先级</th>\n<th>运算符</th>\n<th>顺序</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>小括号</td>\n<td><code>()</code></td>\n</tr>\n<tr>\n<td>2</td>\n<td>一元运算符</td>\n<td><code>++</code>、<code>--</code>、<code>!</code></td>\n</tr>\n<tr>\n<td>3</td>\n<td>算数运算符</td>\n<td><code>*</code>、<code>/</code>、<code>%</code>、 <code>+</code>、<code>-</code></td>\n</tr>\n<tr>\n<td>4</td>\n<td>关系运算符</td>\n<td><code>&gt;</code>、<code>&gt;=</code> 、<code>&lt;</code>、<code>&lt;=</code></td>\n</tr>\n<tr>\n<td>5</td>\n<td>相等运算符</td>\n<td><code>==</code>、<code>!=</code>、<code>===</code>、<code>!==</code></td>\n</tr>\n<tr>\n<td>6</td>\n<td>逻辑运算法</td>\n<td>先 <code>&amp;&amp;</code> 后 `</td>\n</tr>\n<tr>\n<td>7</td>\n<td>赋值运算符</td>\n<td><code>=</code></td>\n</tr>\n<tr>\n<td>8</td>\n<td>逗号运算符</td>\n<td><code>,</code></td>\n</tr>\n</tbody>\n</table>\n<h2> 流程控制</h2>\n<p>一个程序中，各个代码之间的执行顺序对于程序结果是会造成影响的。就拿下面简单的例子来说，假如我们拿先使用 <code>num</code> 这个变量然后再定义和先定义变量再使用相比。先使用再定义会报错 <code>undefined</code>，而定义再使用就没有问题。也就是说，代码的先后顺序会对我们的程序结果造成直接影响。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>而今天要说的流程控制，就是为了解决这个问题。通俗来讲，流程控制就是控制我们的代码按照既定的结构顺序来执行。</p>\n<p>而流程控制主要分为三种结构，分别是：</p>\n<ul>\n<li><strong>顺序结构</strong></li>\n<li><strong>分支结构</strong></li>\n<li><strong>循环结构</strong></li>\n</ul>\n<p>这三种结构分别代表了三种代码执行的顺序，用流程图示意如下。</p>\n<table>\n<thead>\n<tr>\n<th>顺序结构</th>\n<th>分支结构</th>\n<th>循环结构</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3> 顺序结构流程控制</h3>\n<p>顺序结构是代码中最基本、最简单的流程控制，它没有特定的语法结构，代码会按照<strong>代码位置的先后顺序，依次执行</strong>。基本上程序中的代码都会存在顺序结构。</p>\n<h3> 分支结构流程控制</h3>\n<p>由上而下执行代码时，根据不同的条件，从而流向不同的代码路径，最终得到不同的结果。<code>JavaScript</code> 中，提供了两种分支结构语句，分别是：</p>\n<ul>\n<li><code>if</code> 语句</li>\n<li><code>swtich</code> 语句</li>\n</ul>\n<h4> if</h4>\n<p><code>if</code> 的语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果 <code>if</code> 语法结构中的条件表达式为 <code>true</code>，则执行大括号中的语句，若条件表达式结果为 <code>false</code>，则跳过大括号中的代码，执行大括号之后的代码。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>除开单分支语句 <code>if</code> 之外，<code>JavaScript</code> 也提供了双分支语句 <code>if…else…</code>，其语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果条件表达式为 <code>true</code>，则执行条件语句 1，若条件表达式为 <code>false</code>，则执行语句 2。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<p>当然，除开单分支和双分支之外，还有多分支语句 <code>if…else…if…</code>，其语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>通过多个条件来选择不同的语句执行，从而得到不同的结果。</p>\n<h4> 三元表达式</h4>\n<p>除了使用 <code>if</code> 来进行条件选择之外我们也可以利用三元表达式来做一些简单的条件选择，其语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>三元表达式也可以转换为 <code>if</code> 条件分支判断，两者的效果是等价的。比如上面的三元表达式就可以转换为以下 <code>if</code> 条件表达式。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> switch</h4>\n<p><code>switch</code> 语句对应于 <code>if</code> 语句中的多分支语句，主要用于基于不同条件来执行不同的代码。如果要针对变量设置一系列的<strong>特定值</strong>的选项时，就可以使用 <code>switch</code>。</p>\n<p><code>switch</code> 语法结构如下，通过表达式的值和 <code>case</code> 中的选项值相匹配，如果有对应匹配项，则执行该 <code>case</code> 中的语句，如果没有对应匹配项，则执行 <code>default</code> 中的代码。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> switch 和 <code>if else if</code> 的区别</h4>\n<p>一般情况下，两者是可以相互替换的。其中 <code>switch…case</code> 语句通常用于处理 <code>case</code> 是确定值的情况，而 <code>if…else…</code> 语句则更加的灵活，通常用语范围判断。</p>\n<p>此外，<code>switch</code> 语句进行条件判断后会直接执行到程序的条件语句，效率更高。而 <code>if…else</code> 语句有多少种情况，就需要判断多少次，较为耗费时间。</p>\n<h3> 循环结构流程控制</h3>\n<p>实际处理问题时，经常要做许多具有规律性的重复操作，为了更高效的完成这类操作，所以需要重复执行这些语句，而这就是我们程序中所说的循环结构。</p>\n<p>在 <code>JavaScript</code> 中，主要有三种类型的循环语句：</p>\n<ul>\n<li><code>for</code> 循环</li>\n<li><code>while</code> 循环</li>\n<li><code>do…while</code> 循环</li>\n</ul>\n<h4> for 循环</h4>\n<p>程序中，一组被重复执行的语句被叫做<strong>循环体</strong>，而是否需要继续重复执行，取决于<strong>循环的终止条件</strong>，由循环体和循环终止条件共同组成语句就叫做<strong>循环语句。</strong></p>\n<p><code>for</code> 循环主要用于将某些代码循环若干次，通常跟计数有关系，其语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p><code>for</code> 循环语句的执行顺序可以总结为如下：</p>\n<ul>\n<li>首先去执行初始化变量语句，该语句在整个 <code>for</code> 循环中只执行一次。</li>\n<li>接着去执行条件表达式，若满足条件则执行循环体，如果不满足则退出循环。</li>\n<li>执行完循环体之后，最后去执行操作表达式，至此第一轮循环结束。</li>\n<li>然后开始第二轮循环，继续执行条件表达式，重复上面的两个步骤直到退出循环。</li>\n</ul>\n<h4> while 循环</h4>\n<p><code>while</code> 语句可以在表达式为真的情况下，循环执行某一段指定的代码，直到不满足表达式时才结束循环，其语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>执行时，先判断条件表达式，若结果为 <code>true</code>，则进入循环体执行循环体代码，如果结果为 <code>false</code>，则退出循环，执行 <code>while</code> 循环后边的代码。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以上代码同样可以用于求 <code>1 + 2 + …… + 100</code> 的值，能够达到与 <code>for</code> 循环同样的效果。</p>\n<h4> do…while 循环</h4>\n<p><code>do…while</code> 其实是 <code>while</code> 循环的一个变体，其语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>执行时，无论如何都会先进入循环体执行一次循环体代码，然后再对条件表达式进行判断，如果条件为 <code>true</code>，则继续执行循环体代码，若条件为 <code>false</code>，则退出循环。</p>\n<h4> continue 和 break</h4>\n<p><code>continue</code> 用于立即<strong>跳出当次循环，继续进入下一次循环</strong>。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>以上实例中，设置了当 <code>i</code> 为 2 时，跳出当次循环，所以程序打印出了 <code>0-5</code> 中除 2 之外的其他元素。</p>\n<p><code>break</code> 主要用于立即<strong>跳出整个循环</strong>。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>以上实例设置了当 <code>i</code> 为 2 时跳出整个循环，所以程序只打印出了 0、1，2 及以后的数不再打印。</p>\n<h2> 数组</h2>\n<h3> 什么是数组</h3>\n<p>之前的学习中，如果我们要存储一个值，一般都是通过变量来存储。但如果我们现在想要存储一系列的值，又该如何存储呢，你可能会说可以用多个变量来进行存储。这种方法也可以，但如果你想，一旦值过多，那岂不是就要多个变量，到时候管理就很混乱了。这时候就想，有没有一个可以存储多个值的数据结构，方便我们进行多个值的存储管理呢？</p>\n<p>针对上面这一需求，提出了数组这一数据结构。</p>\n<p>数组是指一组数据的集合，数组中的每个数据被称为元素，而且数组中可以存放任意类型的元素。通过使用数组，当我们需要存储多个值时，就可以不用再去多个创建变量，而只需要创建一个数组就好了。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 如何创建数组</h3>\n<p>既然知道了数组这种数据结构，那怎么才能创建一个数组呢。这里主要用两种方式：</p>\n<ul>\n<li>利用关键字 <code>new</code> 创建数组。</li>\n<li>利用数组字面量创建数组。</li>\n</ul>\n<h4> 利用 <code>new</code> 创建数组</h4>\n<p>这里其实跟 <code>JavaScript</code> 中的面向对象相关，和 <code>Java</code> 中也类似，其语法结构为：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>除了数组名，其他都是固定的，通过这种方式，我们就创建了一个新的空数组，此时中没有任何元素，数组长度为 0。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 利用数组字面量创建数组</h4>\n<p>除开利用关键字 <code>new</code> 来创建数组之外，也可以利用字面量来创建数组，其语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>通过这种方式所创建的数组也是一个空数组，效果和利用 <code>new</code> 创建空数组一样，此时数组长度为 0，里边没有任何元素。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>此外，还可以创建带有初始值的数组，其中的各个元素用逗号 <code>,</code> 分隔，其语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>通过字面量的方式，我们就创建了一个含有三个初始值的数组。</p>\n<h3> 获取数组中元素</h3>\n<p>创建好了数组，接下来就是如何拿到数组里边的元素了。<code>JavaScript</code> 中，是通过索引（下标）来访问数组中的元素的。需要注意的是，数组索引是从 0 开始的，而不是从 1 开始。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>以上的实例中，我们通过索引获取到了数组中的第一个元素 <code>村雨遥</code>。</p>\n<p>通过索引不仅能访问数组元素，还能设置和修改数组元素，通过 <code>数组名[索引]</code> 的形式即可实现。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 遍历数组</h3>\n<p>如果要拿到数组中的所有元素，那是不是得一个一个以 <code>数组名[索引]</code> 的形式来获取呢？答案是，不用！</p>\n<p>还记得我们之前学习的循环么，通过循环，我们就能十分简单地实现获取数组所有元素。</p>\n<p>不过在那之前，我们还可以学习下如何获取数组的长度，数组提供了一个属性 <code>length</code>，通过该属性，我们就能获取到数组的长度（即数组中元素个数）。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>接着，我们就可以通过循环来获取到数组中的所有元素了。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 数组新增元素</h3>\n<p>学习了创建数组、如何获取数组元素以及遍历数组，接下来就来看看，如何往初始化后的数组中新增元素。</p>\n<p>先来看看第一种，我们修改数组的长度，然后再往数组里边新增元素。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>通过实例结果可以看到，通过修改数组长度奏效了，数组长度从一开始的 3 变成了 4，而且数组中增加元素也成功了。</p>\n<p>再来看看第二种，我们通过修改索引号的方式来增加数组元素。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>同样达到了往数组中新增元素的效果，区别在于没有事先修改数组长度，而是直接修改数组索引的方式来增加元素。</p>\n<p>需要注意的时，在向数组中增加元素时，不能利用数组原有的索引来增加元素，否则会修改掉数组原有元素。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 数组常用 API</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>concat()</code></td>\n<td>连接两个或更多的数组并返回结果</td>\n</tr>\n<tr>\n<td><code>copyWithin()</code></td>\n<td>从数组指定位置拷贝元素到数组的另一个指定位置</td>\n</tr>\n<tr>\n<td><code>entries()</code></td>\n<td>返回数组的可迭代对象</td>\n</tr>\n<tr>\n<td><code>every()</code></td>\n<td>检测数值元素的每个元素是否都符合条件</td>\n</tr>\n<tr>\n<td><code>fill()</code></td>\n<td>使用一个固定值来填充数组</td>\n</tr>\n<tr>\n<td><code>filter()</code></td>\n<td>检测数值元素，并返回复合条件所有元素的数组</td>\n</tr>\n<tr>\n<td><code>find()</code></td>\n<td>返回复合传入条件的数组元素</td>\n</tr>\n<tr>\n<td><code>findIndex()</code></td>\n<td>返回复合传入条件的数组元素索引</td>\n</tr>\n</tbody>\n</table>\n<h1> 六、JavaScript 函数</h1>\n<p>编程时，可能会定义许多相同或者功能相似的代码，此时我们每需要使用一次，就需要重写编写一次。虽然利用循环结构也能够实现一些简单的重复操作，但是功能较为局限。此时，我们就需要使用到 <code>JavaScript</code> 中的函数。</p>\n<p>所谓函数，就是通过将一段可以重复调用的代码块进行封装，从而实现代码的重复利用。</p>\n<h2> 函数使用</h2>\n<p>了解函数的相关概念后，接下来就来看看如何使用函数。</p>\n<p>函数使用，主要可以分为两步：<strong>声明函数</strong>和<strong>调用函数</strong>。</p>\n<ul>\n<li><strong>函数声明</strong></li>\n</ul>\n<p>函数声明，也就是说明函数用来干啥的，其语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中 <code>function</code> 是声明函数的关键字，而函数一般是对应某一个功能，所以函数名一般是动词。</p>\n<ul>\n<li><strong>函数调用</strong></li>\n</ul>\n<p>既然声明了函数，那就要去调用！调用函数时，通过调用其函数名来执行函数体代码，其语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>以下我们在 <code>JavaScript</code> 中定义一个函数，用于求 <code>1 + 2 + … + num</code> 的值。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 函数的参数</h2>\n<p>为了让函数能够准确地实现我们的功能，有时候我们需要用到参数。而参数又分为形参和实参，其中，形参位于声明函数的小括号中，而实参位于函数调用的小括号中。</p>\n<p>声明带有参数的函数时，其语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当需要调用函数时，则可以通过以下形式调用。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>函数声明时，在函数名后的小括号中紧跟一些参数，这些参数被叫做<strong>形参</strong>，而在函数调用时，同样需要传递对应的参数，而这些参数就叫做<strong>实参</strong>。两者的区别总结如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>形参</strong></td>\n<td>形式上的参数，函数定义时传递的参数</td>\n</tr>\n<tr>\n<td><strong>实参</strong></td>\n<td>实际上的参数，函数调用时传递的参数，实参是传递给形参的</td>\n</tr>\n</tbody>\n</table>\n<p>所以参数的作用在于，在函数内部某些不能固定的值，可以通过参数在调用函数时传递不同的值进行。</p>\n<p>假设我们定义一个函数时，传递了不同数量的参数，就可能出现以下情况。</p>\n<ul>\n<li>实参个数与形参个数相匹配</li>\n<li>实参个数多于形参个数</li>\n<li>实参个数少于形参个数</li>\n</ul>\n<p>以下以实例来分别看着三种情况会出现怎样的结果。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>可以看到实参和形参个数匹配时，程序输出了正确的结果，而当实参个数大于形参个数时，程序同样输出了正确的结果。而当实参个数小于形参个数时，程序结果出错。因此，在定义和调用参数时，一定要注意形参和实参的匹配问题，否则可能会导致程序出错。</p>\n<h2> 函数返回值</h2>\n<p>在调用函数时，我们会希望将函数调用的结果返回到调用者，此时就可以通过关键字 <code>return</code> 语句来实现，其语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其实上面的实例中我已经给出了函数的返回值了，其中 <code>result</code> 就是函数的返回值。实例中将函数的结果进行了返回，所以在调用时直接能够直接进行输出。</p>\n<p>当然，不是所有函数都需要返回值，具体是否需要要根据自己的实际需求来编写。</p>\n<h2> 作用域</h2>\n<p>通常来讲，程序中用到的代码并不是一直有效的，而用于限定这个代码可用范围的就是这段代码的<strong>作用域</strong>。因为作用域的存在，改高了程序逻辑的局部性，增强了可靠性，最大程度上减少了代码中的冲突。</p>\n<p><code>JavaScript</code> 中，主要有三种作用域：</p>\n<ul>\n<li>全局作用域</li>\n<li>局部作用域</li>\n<li>块级作用域</li>\n</ul>\n<ol>\n<li><strong>全局作用域</strong></li>\n</ol>\n<p>顾名思义，全局作用域也就是在整个代码中都有效。作用于所有代码执行的环境。</p>\n<ol start=\"2\">\n<li><strong>局部作用域</strong></li>\n</ol>\n<p>局部有效，作用于函数内的代码环境，因为和函数息息相关，所以也叫做函数作用域。</p>\n<ol start=\"3\">\n<li><strong>块级作用域</strong></li>\n</ol>\n<p>块级作用域由 <code>{}</code> 所包含，比如 <code>if</code> 和 <code>for</code> 语句中的 <code>{}</code>。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以上实例中 <code>num</code> 的作用域是全局作用域，<code>num1</code> 和 <code>num2</code> 的作用域为局部作用域，而 <code>tmp</code> 的作用域则是块级作用域。</p>\n<h2> 匿名函数</h2>\n<p>所谓匿名函数，其实指的就是没有函数名的函数。其语法结构如下，主要有两种定义的方式。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以上就是一个简单的匿名函数，要注意匿名函数是不能单独使用的，它通常作为立即执行函数的基础。</p>\n<p>为了避免全局变量之间的污染，因此我们有时候需要在定义函数时立即执行函数，这时候我们就可以使用到立即执行函数。立即执行函数是基于匿名函数来实现的，也没有函数名，但是他会在定义后立即执行，其语法结构如下。</p>\n<p>立即执行函数也有两种形式，第一种是将匿名函数包裹在一个括号运算符中，然后再跟一个括号。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>另一种则是在匿名函数后面跟上一个括号，然后再将整个包裹在一个括号运算符中。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>但是需要注意的是，如果存在多个匿名函数，那它们之间要用 <code>;</code> 分隔开，否则将会导致报错。</p>\n<h2> 高阶函数</h2>\n<p>高阶函数，简单的说可以被理解为函数的高级应用，<code>JavaScript</code> 中函数能够当成值来对待，然后基于这个值来实现函数的高级应用。</p>\n<h3> 函数表达式</h3>\n<p>函数表达式其实和普通的函数没有本质上的区别，以下是一个函数表达式和一个普通函数。</p>\n<ul>\n<li>函数表达式</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>普通函数</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在调用时，可以发现调用方式其实都一样，两者最终得到的结果也一致。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 回调函数</h3>\n<p>如果有两个函数 A 和 B，假设我们将函数 A 作为参数传递给函数 B，那么我们此时将函数 A 叫做 <strong>回调函数</strong>。总结来说就是如果一个函数被当做参数来传递给另一个函数时，则这个被当做参数的函数就叫做回调函数。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1> 七、JavaScript 对象</h1>\n<h2> 什么是对象</h2>\n<p>之前学习的数据类型在存储一些复杂的信息时，十分不方便，而且也难以区分。为此，为了更加详细方便的描述某一个事物，因而提出面向对象的概念。</p>\n<p>那什么是对象呢？</p>\n<p>所谓对象，也是 <code>JavaScript</code> 中的一种数据类型，可以看做是一系列无序数据的集合。</p>\n<p>有了对象，就可以用来描述某一个事物，比如用对象来描述一个人。其中人的一些静态特征比如姓名、年龄、性别、身高、体重我们就可以用数字类型、字符串类型、数组、布尔类型等数据结构来表示，而人的一些动作比如吃喝拉撒啥的，就可以用函数来进行表示。</p>\n<h2> 如何使用对象</h2>\n<p>要使用对象之前，我们需要先进行声明，其语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>比如要创建一个王者荣耀中的英雄对象，则可以按照如下方式：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>那既然创建了一个对象，那对象里边还有各种属性和方法呀。比如英雄的性别、职业、初始血条值、初始魔法值等等，此外，各个英雄还有各自的技能，用于杀敌清兵。</p>\n<p>我们将上面的英雄对象添加上属性和方法，其语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>声明对象并添加若干属性之后，我们既可以利用 <code>.</code> 或者 <code>[]</code> 来获取对象中属性所对应的值。紧接着上述实例，我们定义了一个英雄对象，并含有姓名、性别、职业、技能等属性，假设我们要获取其中的姓名属性，这可以通过以下两种方式来获得。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>除开属性之外我们的英雄还拥有其他行为，比如放各种技能。以下我们就来看看，如何在对象中添加一个方法。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>对象中的方式是由方法名和函数两部分共同组成，并且中间使用 <code>:</code> 分隔。</p>\n<p>当要使用该方法是，就可以通过以下方式来调用。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 操作对象</h2>\n<p>对象作为一种无序的数据集合，要对对象进行操作，无非是给对象增加、修改、查询、删除各个属性或方法。</p>\n<p>假设我们现在有以下的对象：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol>\n<li><strong>增加</strong></li>\n</ol>\n<p>现在我们要给 <code>hero</code> 属性添加一个新的属性，就可以通过以下的语法形式形式：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>修改</strong></li>\n</ol>\n<p>如果要修改其中的一个属性或者方法，则可以通过以下的方式：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以下为修改属性和方法的实例：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li><strong>查询</strong></li>\n</ol>\n<p>而如果要查询对象的属性或者方法，则可以使用的方式：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"4\">\n<li><strong>删除</strong></li>\n</ol>\n<p>删除对象中的属性，可以通过以下方式：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 遍历对象</h2>\n<p>类似于数组，如果我们想要输出数组中的所有元素，我们可以对数组进行遍历。而同样的，对象也可以进行遍历，从而输出对象中所有属性和方法。</p>\n<p>但是由于对象是无序的，而且也不像数组一样可以通过 <code>length</code> 属性来确定数组长度，因此要遍历对象，需要用到一个增强型的 <code>for</code> 循环，其语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>例如针对以下对象，要输出对象的属性及其属性值，则可以通过 <code>for…in</code> 的方式。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 内置对象</h2>\n<p>所谓内置对象，就是 <code>JavaScript</code> 中内部已经提供的对象，里边包含了各种属性和方法，当我们开发者需要时，就可以直接进行调用而不必去重新创建。</p>\n<p>我们常用的有 <code>Math</code> 对象，它提供了一些用于数学运算符的方法，常见方法总结如下：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>random()</code></td>\n<td>生成 0 - 1 之间的随机数，左闭右开，即包括 0 但不包括 1</td>\n</tr>\n<tr>\n<td><code>ceil()</code></td>\n<td>向上取整</td>\n</tr>\n<tr>\n<td><code>floor()</code></td>\n<td>向下取整</td>\n</tr>\n<tr>\n<td><code>max()</code></td>\n<td>求最大值</td>\n</tr>\n<tr>\n<td><code>min()</code></td>\n<td>求最小值</td>\n</tr>\n<tr>\n<td><code>pow()</code></td>\n<td>幂运算</td>\n</tr>\n<tr>\n<td><code>abs()</code></td>\n<td>求绝对值</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 环境对象</h2>\n<p>环境对象是指函数内部特殊的变量 <code>this</code>，它代表着当前函数运行时所处的环境。</p>\n<p>JavaScript 中，<code>this</code> 不是固定不变的，它会随着执行环境的变化而变化。<code>this</code> 在不同位置，也有着不同的含义。</p>\n<table>\n<thead>\n<tr>\n<th>位置</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>方法中</td>\n<td><code>this</code> 表示该方法所属的对象</td>\n</tr>\n<tr>\n<td>单独使用</td>\n<td><code>this</code> 表示全局对象</td>\n</tr>\n<tr>\n<td>函数中</td>\n<td><code>this</code> 表示全局对象</td>\n</tr>\n<tr>\n<td>事件中</td>\n<td><code>this</code> 表示接收事件的元素</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><strong>方法中</strong></li>\n</ol>\n<p>假设有一个对象，则此时对象方法 <code>info</code> 中的 <code>this</code> 就代表 <code>hero</code> 这个对象。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>单独使用</strong></li>\n</ol>\n<p>单独使用时，<code>this</code> 指向了全局对象。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li><strong>函数中</strong></li>\n</ol>\n<p>函数中使用 <code>this</code> 时，同样指向全局对象。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h1> 八、JavaScript 事件监听</h1>\n<h2> 什么是 Web API</h2>\n<p><code>Web API</code> 是指网页服务器或者网页浏览器的应用程序接口。简单来讲，就是我们在编写 <code>JavaScript</code> 代码时，可以通过 <code>Web API</code> 来操作 <code>HTML</code> 网页和浏览器。</p>\n<p><code>Web API</code> 又可以分为两类：</p>\n<ul>\n<li><code>DOM</code>（文档对象模型）</li>\n<li><code>BOM</code>（浏览器对象模型）</li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<p><code>DOM</code>（<code>Document Object Model</code>），即文档对象模型，主要用来呈现以及与 <code>HTML</code> 或 <code>XML</code> 文档交互的 <code>API</code>。说白了就是用来操作网页内容，实现各种特效，让用户用起来更顺手。</p>\n<p>再来看看 <code>DOM</code> 树的概念，<code>DOM</code> 树又叫文档树，指的是将 <code>HTML</code> 文档以树状结构直观呈现出来，从而将 <code>HTML</code> 中标签与标签之间的关系直观体现出来。</p>\n<p>我们都知道 <code>HTML</code> 页面中包含了许多标签，而 <code>DOM</code> 对象就是浏览器根据这些标签所生成的 <code>JavaScript</code> 对象。通过这个对象，我们就可以找到标签的各种属性，而通过修改这个对象的属性的结果也会映射到 <code>HTML</code> 页面中标签中。也就是说，通过修改 <code>JavaScript</code> 中的对象属性，我们就能够改变对象对应 <code>HTML</code> 中的标签属性。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>\n可以看到原本 <code>button</code> 标签的属性 <code>innerText</code> 从原先的点击变成了 村雨遥，说明通过修改 <code>JavaScript</code> 对象属性从而改变 <code>HTML</code> 中标签属性的目的达到了。</p>\n<h2> DOM 对象获取</h2>\n<ol>\n<li><strong>匹配的首个元素</strong></li>\n</ol>\n<p>上一小节实例中我们其实已经获取过相关 <code>DOM</code> 对象了，也就是以下这一句：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>这其实是通过 <code>CSS</code> 选择器来获取的我们网页中的标签，通过以下语法，我们将会从网页中选择到匹配的第一个元素。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>其中的参数包含了一个或多个有效的 <code>CSS</code> 选择器字符串，然后返回的结果就是匹配到的 <code>CSS</code> 选择器中的<strong>第一个元素</strong>，是一个 <code>HTMLElement</code> 元素。当然，如果没有匹配到任何元素，则返回 <code>null</code>。</p>\n<p>以下是一个获取 <code>DOM</code> 对象的实例。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>匹配的多个元素</strong></li>\n</ol>\n<p>之前我们已经学习了如何获取匹配的首个元素，但是在日常开发中，我们常常需要获取匹配到的多个元素，此时我们就可以使用如下语法来获取匹配的多个元素。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>除开上述两种获取 <code>DOM</code> 对象之外，还提供了一些用于获取 <code>DOM</code> 元素的方法。最常见的几种总结如下：</p>\n<ul>\n<li>根据 <code>id</code> 获取一个元素</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li>根据标签获取页面中的一类元素</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li>根据类名获取页面中的元素</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>以下是一个分别利用上述方法来获取页面中 <code>DOM</code> 元素的实例。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> DOM 元素内容</h2>\n<p>既然已经学会了如何获取 <code>DOM</code> 元素，接下来就是看看如何修改元素中的内容。</p>\n<p>这里 <code>Web API</code> 主要提供了三种方式，分别是：</p>\n<ul>\n<li><code>document.write()</code></li>\n<li><code>innerText</code> 属性</li>\n<li><code>innerHTML</code> 属性</li>\n</ul>\n<h3> doucument.write()</h3>\n<p>该方法只能将文本内容追加到 <code>&lt;/body&gt;</code> 标签前面的位置，而且文本内容中所包含的标签也同样会被解析。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> innerText 属性</h3>\n<p>通过该属性，可以将文本内容添加或者更新到任意标签的位置，而且文本中的标签也不会被解析。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<h3> innerHTML 属性</h3>\n<p>除了 <code>innerText</code> 属性之外，也可以是使用 <code>innerHTML</code> 属性来对文本内容进行添加或者更新，但不同于 <code>innerText</code> 的是，<code>innerHTML</code> 会将文本内容中中的标签也进行解析。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>文本</th>\n<th>链接</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3> 修改元素样式属性</h3>\n<p>出了修改文本内容，我们还可以实现对元素样式的控制，主要可以通过以下三种方式：</p>\n<ul>\n<li>通过 <code>style</code> 属性操作 <code>CSS</code></li>\n<li>通过类名 <code>className</code> 操作 <code>CSS</code></li>\n<li>通过 <code>classList</code> 操作类控制 <code>CSS</code></li>\n</ul>\n<ol>\n<li><strong>通过 <code>style</code> 属性操作 <code>CSS</code></strong></li>\n</ol>\n<p>语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>通过类名 <code>className</code> 操作 <code>CSS</code></strong></li>\n</ol>\n<p>当设计修改的样式较多时，如果直接通过 <code>style</code> 属性修改比较麻烦，此时就可以通过操作 <code>CSS</code> 类名的方式来进行批量修改，其语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>使用类名来操作 <code>CSS</code> 时，需要注意一下，如果原先的元素中已经有了 <code>CSS</code> 类，那么此时新增的 <code>CSS</code> 类将覆盖之前 <code>CSS</code> 类。</p>\n<ol start=\"3\">\n<li><strong>通过 <code>classList</code> 来操作 <code>CSS</code></strong></li>\n</ol>\n<p>针对通过类名 <code>className</code> 操作 <code>CSS</code> 会覆盖以前类名的问题，<code>JavaScript</code> 中又提供了 <code>classList</code> 的方式来追加和删除类名。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>add('类名')</code></td>\n<td>追加一个类</td>\n</tr>\n<tr>\n<td><code>remove('类名')</code></td>\n<td>删除一个类</td>\n</tr>\n<tr>\n<td><code>toggle('类名')</code></td>\n<td>切换一个类</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">greenyellow</th>\n<th style=\"text-align:center\">aquamarine</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h2> 什么是事件</h2>\n<p>在之前 <code>DOM</code> 的学习中，我们主要学习了如何获取 <code>DOM</code> 元素，并且学会了如何给获取的元素进行属性修改等操作。但这些基本都是静态的修改，并没有接触到一些动作。而今天要学习的事件，其实就是这些动作的总称。</p>\n<p>所谓事件，就是在编程时系统内所发生的动作或者发生的事情，比如在网页中点击一个按钮之后，我们就能实现登录或者注册之类的功能。</p>\n<h2> 事件监听</h2>\n<p>事件监听，就是让程序检测是否有事件产生，一旦有事件触发，就立即调用一个函数做出响应，这个过程就叫做注册事件。其语法结构如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>要实现事件监听，要同时包含以下三要素：</p>\n<ul>\n<li><strong>事件源</strong>：也就是上面语法中所对应的元素，指的是谁发出的事件，也就是网页中哪个 <code>DOM</code> 元素被事件所触发。</li>\n<li><strong>事件</strong>：以何种方式触发，比如鼠标单击 <code>click</code>。</li>\n<li><strong>事件调用函数</strong>：也就是语法结构中要执行的函数，我们触发事件后，需要去做什么。</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以上就是一个事件监听的实例，通过在网页中点击按钮，就会执行事件调用函数，弹窗显示内容。</p>\n<h2> 常见事件类型</h2>\n<p>学习了事件的定义以及如何实现一个最简单的事件监听，接下来就来看看，<code>Web API</code> 中为 <code>DOM</code> 提供的常用事件类型有哪些。</p>\n<p>主要有 4 种类型的事件，分为：</p>\n<ul>\n<li><strong>鼠标事件</strong></li>\n<li><strong>键盘事件</strong></li>\n<li><strong>表单事件</strong></li>\n<li><strong>页面加载事件</strong></li>\n</ul>\n<p>以下就分别来看看这些类型的事件又可以细分为哪些小类。</p>\n<ol>\n<li><strong>鼠标事件</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>onclick</code></td>\n<td>当用户点击某个对象时调用的事件句柄</td>\n</tr>\n<tr>\n<td><code>oncontextmenu</code></td>\n<td>在用户点击鼠标右键打开上下文菜单时触发</td>\n</tr>\n<tr>\n<td><code>ondblclick</code></td>\n<td>当用户双击某个对象时调用的事件句柄</td>\n</tr>\n<tr>\n<td><code>onmousedown</code></td>\n<td>鼠标按钮被按下</td>\n</tr>\n<tr>\n<td><code>onmouseenter</code></td>\n<td>当鼠标指针移动到元素上触发</td>\n</tr>\n<tr>\n<td><code>onmouseleave</code></td>\n<td>当鼠标指针移出元素时触发</td>\n</tr>\n<tr>\n<td><code>onmousemove</code></td>\n<td>鼠标被移动</td>\n</tr>\n<tr>\n<td><code>onmouseover</code></td>\n<td>鼠标移到某元素之上</td>\n</tr>\n<tr>\n<td><code>onmouseout</code></td>\n<td>鼠标从某元素移开</td>\n</tr>\n<tr>\n<td><code>onmouseup</code></td>\n<td>鼠标按键被松开</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li><strong>键盘触发</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>onkeydown</code></td>\n<td>键盘按下触发</td>\n</tr>\n<tr>\n<td><code>onkeyup</code></td>\n<td>键盘抬起触发</td>\n</tr>\n<tr>\n<td><code>onkeypress</code></td>\n<td>键盘按下并松开</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li><strong>表单事件</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>oninput</code></td>\n<td>表单获取用户输入时触发</td>\n</tr>\n<tr>\n<td><code>onblur</code></td>\n<td>元素失去焦点时触发</td>\n</tr>\n<tr>\n<td><code>onchange</code></td>\n<td>事件在表单元素内容改变时触发</td>\n</tr>\n<tr>\n<td><code>onfocus</code></td>\n<td>元素获取焦点时触发</td>\n</tr>\n<tr>\n<td><code>onfocusout</code></td>\n<td>元素即将失去焦点时触发</td>\n</tr>\n<tr>\n<td><code>onreset</code></td>\n<td>表单重置时触发</td>\n</tr>\n<tr>\n<td><code>onsearch</code></td>\n<td>用户向搜索与输入文本时触发</td>\n</tr>\n<tr>\n<td><code>onselect</code></td>\n<td>用户选取文本时触发</td>\n</tr>\n<tr>\n<td><code>onsubmit</code></td>\n<td>表单提交时触发</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li><strong>页面加载事件</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>onload</code></td>\n<td>页面加载完成时触发</td>\n</tr>\n</tbody>\n</table>\n<h1> Vue 概述</h1>\n<h2> 什么是 Vue</h2>\n<ul>\n<li>官网：https://v2.cn.vuejs.org/</li>\n<li><code>Vue</code> 是一套前端框架，免除了原生 <code>JavaScript</code> 中的 <code>DOM</code> 操作，从而简化了 <code>DOM</code> 时的书写。</li>\n<li><code>Vue</code> 基于 <code>MVVM(Model-View-ViewModel)</code> 思想，从而实现数据的双向绑定，让开发者能将关注点更多的聚焦到数据上。</li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<p>而所谓框架，说明 <code>Vue</code> 是一个半成品的软件，是一套可重用、通用的、软件基础代码模型。当我们基于框架进行开发时，能够更加快捷与高效。</p>\n<h2> Vue 快速入门</h2>\n<ol>\n<li>首先新建 <code>HTML</code> 页面，同时引入 <code>Vue.js</code> 文件。</li>\n</ol>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>接着在 <code>&lt;head&gt;</code>  或者 <code>&lt;body&gt;</code> 区域创建 <code>JavaScript</code> 代码区，创建 <code>Vue</code> 核心对象，定义数据模型。</li>\n</ol>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>最后，在 <code>&lt;body&gt;</code> 中编写视图即可。</li>\n</ol>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li>用浏览器打开，得到最终的效果预览如下。</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<h1> Vue 常用指令</h1>\n<p>所谓指令，就是指 <code>HTML</code> 标签上带有 <code>v-</code> 前缀的特殊属性，而不同的含义则代表不同含义，常用的指令有：</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>v-bind</code></td>\n<td>为 <code>HTML</code> 标签绑定属性值，比如设置 <code>href</code>、<code>css</code> 样式等</td>\n</tr>\n<tr>\n<td><code>v-model</code></td>\n<td>为表单元素创建双向数据绑定</td>\n</tr>\n<tr>\n<td><code>v-on</code></td>\n<td>为 <code>HTML</code> 标签绑定事件</td>\n</tr>\n<tr>\n<td><code>v-if</code></td>\n<td>条件性渲染某元素，判定为 <code>true</code> 时渲染，否则不渲染</td>\n</tr>\n<tr>\n<td><code>v-else-if</code></td>\n<td>条件性渲染某元素，判定为 <code>true</code> 时渲染，否则不渲染</td>\n</tr>\n<tr>\n<td><code>v-else</code></td>\n<td>条件性渲染某元素，判定为 <code>true</code> 时渲染，否则不渲染</td>\n</tr>\n<tr>\n<td><code>v-show</code></td>\n<td>根据条件展示某元素，区别在于切换的是 <code>display</code> 属性的值</td>\n</tr>\n<tr>\n<td><code>v-for</code></td>\n<td>列表渲染，遍历容器元素或对象属性</td>\n</tr>\n</tbody>\n</table>\n<h2> 插值表达</h2>\n<h3> 语法</h3>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>表达式内容</strong></li>\n</ol>\n<p>表达式中的内容可以是以下内容中的任意一种：</p>\n<ul>\n<li>变量</li>\n<li>三元运算符</li>\n<li>函数调用</li>\n<li>算术运算</li>\n</ul>\n<h3> 实例</h3>\n<h2> 属性绑定</h2>\n<h3> 语法</h3>\n<p>为了实现属性绑定的效果，需要用到 <code>Vue</code> 中的 <code>v-bind</code> 指令。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>以上是 <code>v-bind</code> 指令的一个使用示例，书写时为了简化，也通常写成以下的形式。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>其中，指令冒号后的部分（<code>:class</code>）时指令的参数。</p>\n<h3> 实例</h3>\n<p>引入 <code>Vue</code> 的相关依赖后，按照之前快速入门时的示例。</p>\n<ol>\n<li>在 <code>&lt;head&gt;</code>  或者 <code>&lt;body&gt;</code> 区域创建 <code>JavaScript</code> 代码区，创建 <code>Vue</code> 核心对象，定义数据模型。</li>\n</ol>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>接着在 <code>&lt;body&gt;</code> 中编写视图。</li>\n</ol>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li>最后用浏览器打开，得到最终的效果预览如下。</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<p>其实，上面语句实现的效果和下边语句的效果相同，只是在 <code>Vue</code> 中，将链接绑定到了数据域中，从而能够实现一次修改，多处变化。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>同时，为了简化书写，<code>v-bind</code> 语法也经常写成如下形式：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 事件监听</h2>\n<h2> 表单绑定</h2>\n<h3> 语法</h3>\n<p>在表单元素上创建双向数据绑定。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 实例</h3>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 条件渲染</h2>\n<h2> 列表渲染</h2>\n<h2> 计算属性</h2>\n<h1> Vue 生命周期</h1>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "实战训练",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/in-action/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/in-action/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Servlet 详细教程",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20200521-servlet.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20200521-servlet.html",
      "summary": "1. Servlet 程序 1.1 什么是 Servlet 1. Servlet 是 JavaEE 规范（接口）之一 2. Servlet 是 JavaWeb 三大组件之一，三大组件分别是：Servlet 程序、Filter 过滤器、Listener 监听器 3. Servlet 是运行在服务器上的 Java 小程序，用于 接收客户端发送的数据，同时响...",
      "content_html": "<h1> Servlet 详细教程</h1>\n<h2> 1. Servlet 程序</h2>\n<h3> 1.1 什么是 Servlet</h3>\n<ol>\n<li>Servlet 是 JavaEE 规范（接口）之一</li>\n<li>Servlet 是 JavaWeb 三大组件之一，三大组件分别是：<strong>Servlet 程序、Filter 过滤器、Listener 监听器</strong></li>\n<li>Servlet 是运行在服务器上的 Java 小程序，用于 <strong>接收客户端发送的数据，同时响应给客户端</strong></li>\n</ol>\n<h3> 1.2 如何手动创建实现 Servlet 接口</h3>\n<ol>\n<li>\n<p>首先编写一个类，用于实现 Servlet 接口</p>\n</li>\n<li>\n<p>重写 service 方法，用于处理客户端请求，同时响应数据</p>\n</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>完成上述步骤后，去 <code>web.xml</code> 中配置 Servlet 接口的访问地址</li>\n</ol>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li>启动 Tomcat 在浏览器中访问 <code>http://localhost:8080/servletTest/hello</code>，然后后台就会执行 <code>service()</code> 方法</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<h3> 1.3 Servlet 的生命周期</h3>\n<ol>\n<li>执行 Servlet 构造器方法，只在第一次访问时创建 Servlet 程序会调用</li>\n<li>执行 <code>init</code> 初始化方法，只在第一次访问时创建 Servlet 程序会调用</li>\n<li>执行 <code>service()</code> 方法，每次访问均调用</li>\n<li>执行 <code>destory()</code> 销毁方法，Web 工程停止时调用</li>\n</ol>\n<h3> 1.4 如何通过 IDEA 快速创建 Servlet 程序</h3>\n<p>选中 <code>src</code> 目录或者要生成 Servlet 的包，然后单击鼠标右键，<code>New -&gt; Create New Servlet</code>，接着填写 Servlet 程序名，所属包以及 Servlet 全类名，同时 <strong>取消勾选</strong> Java EE 6 即可，勾选则会生成注解式配置，后续学习过程中才会接触到。</p>\n<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<p>点击生成之后，就会生成 Servlet 程序以及在 <code>web.xml</code> 中的配置。</p>\n<figure><figcaption></figcaption></figure>\n<h3> 1.5 整个 Servlet 类的继承体系</h3>\n<figure><figcaption></figcaption></figure>\n<h2> 2. ServletConfig 类</h2>\n<p>从类名上就可以看出，ServletConfig 是一个配置信息类。Servlet 程序和 ServletConfig 对象均由 Tomcat 创建，而我们只要使用就可以了。此外，Servlet 程序默认是在第一次访问时就创建了，而 <strong>ServletConfig 对象则是每个 Servlet 程序创建时所对应创建</strong>。</p>\n<h3> 2.1 ServletConfig 类的三大作用</h3>\n<ol>\n<li>获取 Servlet 程序的别名，即 <code>web.xml</code> 中配置的 <code>servlet-name</code></li>\n<li>获取初始化参数，即 <code>web.xml</code> 中配置的 <code>init-param</code></li>\n<li>获取 ServletContext 对象</li>\n</ol>\n<p>加入我们的 <code>web.xml</code> 配置如下，然后就可以利用 初始化方法来获取上述三个值：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 3. ServletContext 类</h2>\n<h3> 3.1 ServletContext 是啥</h3>\n<ol>\n<li>\n<p>ServletContext 是一个接口，用于表示 Servlet 上下文对象</p>\n</li>\n<li>\n<p>ServletContext 对象是一个 <strong>域对象</strong></p>\n</li>\n<li>\n<p>每个 Web 工程只对应 <strong>一个</strong> ServletContext 对象实例</p>\n</li>\n<li>\n<p>每个 ServletContext 在 Web 工程部署启动时创建，然后在 Web 工程停止时销毁</p>\n</li>\n</ol>\n<h3> 3.2 ServletContext 的作用</h3>\n<ol>\n<li>获取 <code>web.xml</code> 配置中的上下文参数 <code>context-param</code></li>\n<li>获取当前 Web 工程路径，如 <code>/ServletTest</code></li>\n<li>获取工程部署后在服务器的中的绝对路径，包括各种静态资源等路径</li>\n<li>ServletContext 是通过 <strong>键值对（Map）</strong> 一样存取数据</li>\n</ol>\n<p>以下对上述 4 个作用进行实例介绍，首先在 <code>web.xml</code> 加入如下配置，然后通过程序来获取各种参数：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 4. HTTP 协议</h2>\n<h3> 4.1 什么是 HTTP 协议</h3>\n<p><strong>协议</strong> 即指两方或多方通过一定协商约定后，大家都要遵守的规则，叫做协议。</p>\n<p>而 <strong>HTTP 协议</strong> ，即指 <strong>客户端和服务器之间互相通信时，发送数据时所需要遵守的规则</strong>，HTTP 协议中的数据又叫做 <strong>报文</strong>。</p>\n<h3> 4.2 请求的 HTTP 协议格式</h3>\n<p>客户端向服务器发送数据的行为叫做 <strong>请求</strong>，而服务器向客户端回传数据的行为叫做 <strong>响应</strong>。</p>\n<h4> GET 请求</h4>\n<p>由 <strong>请求行 + 请求头</strong> 组成，其中 <strong>请求行</strong> 包括 <strong>请求的方式、请求的资源路径以及请求的协议版本号</strong>，而 <strong>请求头</strong> 则是由 <code>key-value</code> 对组成，不同键值对对应不同含义，具体请看如下图实例。GET 请求最常用的地方：</p>\n<ol>\n<li><code>form</code> 标签 <code>method=get</code></li>\n<li><code>a</code> 标签</li>\n<li><code>link</code> 标签引入 <code>css</code></li>\n<li><code>Script</code> 标签引入 <code>js</code></li>\n<li><code>img</code> 标签引入图片</li>\n<li><code>iframe</code> 引入 HTML 页面</li>\n<li>浏览器中地址栏输入地址后回车</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<h4> POST 请求</h4>\n<p>POST 请求和 GET 的最大区别在于 <strong>请求头（即发送给服务器的数据）</strong>，POST 由 <strong>请求行 + 请求头 + 请求体</strong> 组成，其中请求行与请求头的含义和 GET 请求的含义相同，而 <strong>请求头则是 POST 方式独有</strong>，具体含义如下，最常用的地方：</p>\n<ol>\n<li><code>form</code> 标签 <code>method=post</code></li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<h3> 4.3 响应的 HTTP 协议格式</h3>\n<p>响应主要由 <strong>响应行 + 响应头 + 响应体</strong> 共同组成，响应行中又包括 <strong>响应的协议和版本号、响应状态码以及响应状态描述符</strong>，而 <strong>响应头则是同样由不同的键值对组成</strong>，<strong>响应体中则是回传给客户端的数据</strong>，具体看下边的示例：</p>\n<figure><figcaption></figcaption></figure>\n<h3> 4.4 常用响应码</h3>\n<table>\n<thead>\n<tr>\n<th>响应码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td>请求成功</td>\n</tr>\n<tr>\n<td>302</td>\n<td>请求重定向</td>\n</tr>\n<tr>\n<td>404</td>\n<td>请求服务器已经收到，但需要的数据不存在（请求地址错误）</td>\n</tr>\n<tr>\n<td>500</td>\n<td>服务器已经收到请求，但服务器内部错误（代码错误）</td>\n</tr>\n</tbody>\n</table>\n<h3> 4.5 MIME 类型说明</h3>\n<p>MIME 全称 <strong>多功能 Internet 邮件扩充服务</strong> <code>（Multipurpose Internet Mail Extension）</code> ，是 HTTP 协议中的数据类型，格式是 <strong>大类型/小类型</strong>，并与某种文件扩展名相对应，最常见的 MIME 类型如下：</p>\n<table>\n<thead>\n<tr>\n<th>文件类型</th>\n<th>文件扩展名</th>\n<th>MIME 类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>超文本标记语言文本</td>\n<td><code>.html、.htm</code></td>\n<td><code>text/html</code></td>\n</tr>\n<tr>\n<td>普通文本</td>\n<td><code>.txt</code></td>\n<td><code>text/plain</code></td>\n</tr>\n<tr>\n<td>RTF 文本</td>\n<td><code>.rtf</code></td>\n<td><code>application/rtg</code></td>\n</tr>\n<tr>\n<td>GIF 图形</td>\n<td><code>.gif</code></td>\n<td><code>image/gif</code></td>\n</tr>\n<tr>\n<td>JPEG 图形</td>\n<td><code>.jpeg、.jpg</code></td>\n<td><code>image/jpeg</code></td>\n</tr>\n<tr>\n<td>au 声音文件</td>\n<td><code>.au</code></td>\n<td><code>audio/basic</code></td>\n</tr>\n<tr>\n<td>MIDI 音乐文件</td>\n<td><code>.mid、.midi</code></td>\n<td><code>audio/midi、audio/x-midi</code></td>\n</tr>\n<tr>\n<td>RealAudio 音乐文件</td>\n<td><code>.ra、.ram</code></td>\n<td><code>audio/x-pn-realaudio</code></td>\n</tr>\n<tr>\n<td>MPEG 文件</td>\n<td><code>.mpg、.mpeg</code></td>\n<td><code>video/mpeg</code></td>\n</tr>\n<tr>\n<td>AVI 文件</td>\n<td><code>.avi</code></td>\n<td><code>video/x-msvideo</code></td>\n</tr>\n<tr>\n<td>GZIP 文件</td>\n<td><code>.gz</code></td>\n<td><code>application/x-gzip</code></td>\n</tr>\n<tr>\n<td>TAR 文件</td>\n<td><code>.tar</code></td>\n<td><code>application/x-tar</code></td>\n</tr>\n</tbody>\n</table>\n<h2> 5 HttpServletRequest 类</h2>\n<h3> 5.1 HttpServletRequest 类的作用</h3>\n<p>当每次 Tomcat 服务器接收到来自浏览器的请求时，Tomcat 服务器都会把请求过来的 HTTP 协议信息解析好封装到 <code>Request</code> 对象中，然后传递到 <code>service</code> 方法（<code>doGet</code> 和 <code>doPost</code>）供浏览器使用。而我们则可以通过 <code>HttpServletRequest</code> 对象获取到 <strong>所有请求的信息</strong>。</p>\n<h3> 5.2 HttpServletRequest 类常用方法</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>getRequestURI()</code></td>\n<td>获取请求的资源路径</td>\n</tr>\n<tr>\n<td><code>getRequestURL()</code></td>\n<td>获取请求的统一资源定位符（绝对路径）</td>\n</tr>\n<tr>\n<td><code>getRemoteHost()</code></td>\n<td>获取客户端的 ip</td>\n</tr>\n<tr>\n<td><code>getHeader()</code></td>\n<td>获取请求头</td>\n</tr>\n<tr>\n<td><code>getParameter()</code></td>\n<td>获取请求的参数</td>\n</tr>\n<tr>\n<td><code>getParameterValues()</code></td>\n<td>获取请求的参数（多个值）</td>\n</tr>\n<tr>\n<td><code>getMethod()</code></td>\n<td>获取请求的方式 GET 或 POST</td>\n</tr>\n<tr>\n<td><code>setAttribute(key, value)</code></td>\n<td>设置域数据</td>\n</tr>\n<tr>\n<td><code>getAttribute(key)</code></td>\n<td>获取域数据</td>\n</tr>\n<tr>\n<td><code>getRequestDispatcher()</code></td>\n<td>获取请求转发对象</td>\n</tr>\n</tbody>\n</table>\n<h3> 5.3 POST 和 GET 请求方式的中文乱码问题</h3>\n<p>当以 POST 或 GET 方式请求时，遇到中文可能会出现乱码，对应解决方法如下：</p>\n<ul>\n<li><strong>POST 方式</strong>：直接将请求体的字符集设置为 UTF-8 即可</li>\n<li><strong>GET 方式</strong>：先以 iso8859-1 进行编码，然后再以 UTF-8 进行解码</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 5.4 请求的转发</h3>\n<h4> 定义</h4>\n<p>请求的转发即 <strong>当服务器收到来自客户端的请求时，从一个资源跳转到另一个资源的操作</strong>。</p>\n<figure><figcaption></figcaption></figure>\n<h4> 特点</h4>\n<ul>\n<li>地址栏未变</li>\n<li>属于一次请求</li>\n<li>共享 Request 域中的参数</li>\n<li>可以转发到 WEB-INF 目录下</li>\n<li>不能访问工程之外的资源</li>\n</ul>\n<h3> 5.5 base 标签的作用</h3>\n<p>用于设置页面相对路径工作时参照的路径，参照某一地址进行跳转。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 5.6 Web 中 / 的不同意义</h3>\n<p>在 Web 中 /  是一种绝对路径，若 <strong>被浏览器解析</strong>，则得到的地址是 ：<code>http:/ip:port/</code>；若 <strong>被服务器解析</strong>，则得到的地址是：<code>http://ip:port/工程路径</code>。</p>\n<p><strong>注意： <code>response.sendRedirect(\"/\");</code></strong>，表示将 / 发送给浏览器解析，得到 <code>http://ip:port/</code></p>\n<h2> 6. HttpServletResponse 类</h2>\n<h3> 6.1 HttpServletResponse 的作用</h3>\n<p>同 <code>HttpServletRequest</code> 类一样，当每次来自客户端的请求进来时，服务器都会创建一个 <code>Response</code> 对象，然后传递给 Servlet 程序使用。<strong><code>HttpServletRequest</code> 表示请求过来的信息，<code>HttpServletResponse</code> 则表示所有响应的信息。</strong> 当设置服务器返回给客户端信息时，通过 <code>HttpServletResponse</code> 对象进行。</p>\n<h3> 6.2 两个输出流</h3>\n<p>输出流分为 <strong>字节流和字符流</strong>，两者对应的方法和功能如下表所示，当我们使用时，<strong>只能同时使用其中之一</strong> 。</p>\n<table>\n<thead>\n<tr>\n<th>输出流类型</th>\n<th>方法</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>字节流</td>\n<td><code>getOutputStream()</code></td>\n<td>常用于下载（传递二进制数据）</td>\n</tr>\n<tr>\n<td>字符流</td>\n<td><code>getWriter()</code></td>\n<td>常用于回传字符串</td>\n</tr>\n</tbody>\n</table>\n<h3> 6.3 如何向客户端回传数据及中文乱码</h3>\n<p>通常我们需要向客户端回传数据，如果是回传字符串等数据，我们可以使用 <strong>字符流方法 <code>getWriter()</code></strong>。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>但当我们回传中文时，可能会出现乱码问题，为了解决这一问题，通常有两种解决方案：</p>\n<ol>\n<li>设置服务器字符集为 UTF-8，同时通过响应头设置浏览器也使用 UTF-8 字符集</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>同时设置服务器和客户端均使用 UTF-8 字符集，但是必须在获取流对象之前调用，<strong>更为推荐</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 6.4 请求重定向</h3>\n<h4> 定义</h4>\n<p>请求重定向是 <strong>指客户端给服务器发送请求，然后服务器回传给客户端一些地址，然客户端去访问。之所以叫做重定向，是因为之前的地址可能已经被废弃</strong>。</p>\n<figure><figcaption></figcaption></figure>\n<h4> 特点</h4>\n<ol>\n<li>地址栏变化</li>\n<li>两次请求</li>\n<li>不共享 Request 域中数据</li>\n<li>不能重定向到 WEB-INF 目录下资源</li>\n<li>能访问工程外的资源</li>\n</ol>\n<h4> 实现重定向的两种方式</h4>\n<ol>\n<li>设置响应状态码 302 表示重定向，然后通过设置响应头说明新地址</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>直接使用 <code>sendRedirect()</code> 方法设置新地址即可，<strong>更为推荐</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "Java 入门简介",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220701-intro-to-java.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220701-intro-to-java.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 https://mp.weixin.qq.com/s/aGz8CBOK5mW8xjAlstlMQw 一、前言 既然要学习一门技术，那么就先来了解下它的历史，我们为什么要使用它，以及我们能用它来干啥。 二、历史背景 1990 年代初，Sun 公司的詹姆斯·高斯林等人为了实现电视机、电话、闹钟等家用电器...",
      "content_html": "<h1> Java 入门简介</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n<p>https://mp.weixin.qq.com/s/aGz8CBOK5mW8xjAlstlMQw</p>\n</div>\n<h2> 一、前言</h2>\n<p>既然要学习一门技术，那么就先来了解下它的历史，我们为什么要使用它，以及我们能用它来干啥。</p>\n<h2> 二、历史背景</h2>\n<p>1990 年代初，<code>Sun</code> 公司的詹姆斯·高斯林等人为了实现电视机、电话、闹钟等家用电器的控制和通信，开发了一套用于设置在家用电器等小型系统中的编程语言。在当时，这门语言被命名为 <code>Oka</code>。但由于市场需求不高，所以该计划被逐渐放弃。</p>\n<p>随着 1990 年代互联网的发展，<code>Sun</code> 公司发现 <code>Oka</code> 语言在互联网中的应用前景广泛。于是决定对 <code>Oka</code> 进行改造，并在 1995 年 5 月以 <code>Java</code> 的名义正式发布。</p>\n<p>随着互联网的迅猛发展，Java 也得以逐渐成为重要的网络编程语言，詹姆斯·高斯林也被大家公认为 <code>Java</code> 之父。</p>\n<p>到了 2009 年， <code>Sun</code> 公司被 <code>Oracle</code> 公司所收购，自此 <code>Java</code> 成为 <code>Oracle</code> 公司的一大产品直至今日。</p>\n<p>以下是截止到本文写作时间（2022 年 7 月 23 日）<code>Java</code> 的历史年表，累计经过了 18 次主要版本更新，目前来到了 <code>Java SE</code> 18。而 <code>Java SE</code> 19 早期预览版也已经流出，根据官方给出的发布时间表，大概会在 9 月份发布 <code>Java SE</code> 19 的 <code>GA</code> 版本。不过虽然 <code>Java</code> 已经经历了这么多版本的更新，但国内目前用的最多的应该还是 Java 1.8 版本。而出于对稳定性的考虑，企业开发更喜欢 <code>LTS</code> 版本，这也是为什么至今 <code>Java</code> 1.8 还占有如此高的市场比例。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">版本</th>\n<th style=\"text-align:center\">发布日期</th>\n<th style=\"text-align:center\">主要事件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">JDK Beta</td>\n<td style=\"text-align:center\">1995</td>\n<td style=\"text-align:center\"><code>Java</code> 语言发布，用 <code>Java</code> 实现的浏览器和 <code>Java Applet</code> 被大量应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK 1.0</td>\n<td style=\"text-align:center\">1996 年 1 月</td>\n<td style=\"text-align:center\">奠定了 <code>JDK</code>、<code>JRE</code>、<code>JVM</code> 的体系结构</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK 1.1</td>\n<td style=\"text-align:center\">1997 年 2 月</td>\n<td style=\"text-align:center\">加入 <code>JIT</code>，提升 <code>JDK</code> 效率</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">J2SE 1.2</td>\n<td style=\"text-align:center\">1998 年 12 月</td>\n<td style=\"text-align:center\">确立 <code>J2SE</code>、<code>J2EE</code>、<code>J2ME</code> 产品结构</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">J2SE 1.3</td>\n<td style=\"text-align:center\">2000 年 5 月</td>\n<td style=\"text-align:center\">内置 HotSpot JVM</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">J2SE 1.4</td>\n<td style=\"text-align:center\">2002 年 2 月</td>\n<td style=\"text-align:center\">XML 处理、断言、支持正则表达式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">J2SE 5.0</td>\n<td style=\"text-align:center\">2004 年 9 月</td>\n<td style=\"text-align:center\">静态导入、泛型、for-each 循环、自动拆，装箱、枚举、可变参数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Java SE 6</td>\n<td style=\"text-align:center\">2006 年 12 月</td>\n<td style=\"text-align:center\">提供动态语言支持、同步垃圾回收</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Java SE 7</td>\n<td style=\"text-align:center\">2011 年 7 月</td>\n<td style=\"text-align:center\">字符串的 switch 语句、多异常捕抓</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Java SE 8 (LTS)</td>\n<td style=\"text-align:center\">2014 年 3 月</td>\n<td style=\"text-align:center\">Lambda 表达式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Java SE 9</td>\n<td style=\"text-align:center\">2017 年 9 月</td>\n<td style=\"text-align:center\">轻量级 json API、垃圾收集机制更新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Java SE 10</td>\n<td style=\"text-align:center\">2018 年 3 月</td>\n<td style=\"text-align:center\">局部变量类型推断，Java 后续版本快速迭代更新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Java SE 11 (LTS)</td>\n<td style=\"text-align:center\">2018 年 9 月</td>\n<td style=\"text-align:center\">常用类增强，Java 11 是继 Java 8 之后的首个长期支持本版</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Java SE 12</td>\n<td style=\"text-align:center\">2019 年 3 月</td>\n<td style=\"text-align:center\">switch 表达式增强</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Java SE 13</td>\n<td style=\"text-align:center\">2019 年 9 月</td>\n<td style=\"text-align:center\">文本块支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Java SE 14</td>\n<td style=\"text-align:center\">2020 年 3 月</td>\n<td style=\"text-align:center\"><code>instanceof</code> 支持模式匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Java SE 15</td>\n<td style=\"text-align:center\">2020 年 9 月</td>\n<td style=\"text-align:center\"><code>EdDSA</code> 数字签名算法、 密封类、隐藏类</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Java SE 16</td>\n<td style=\"text-align:center\">2021 年 3 月</td>\n<td style=\"text-align:center\">启用 C++ 14 语言特性、Vector API</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Java SE 17 (LTS)</strong></td>\n<td style=\"text-align:center\">2021 年 9 月</td>\n<td style=\"text-align:center\">恢复总是严格的浮点语义、增强型伪随机数生成器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Java SE 18</td>\n<td style=\"text-align:center\">2022 年 3 月</td>\n<td style=\"text-align:center\">默认 UTF-8 编码、代码片段、简单的网络服务器</td>\n</tr>\n</tbody>\n</table>\n<h2> 三、为什么使用 Java</h2>\n<p>既然编程语言有那么多，那我们为什么要使用 Java 语言呢？以下就来看看 Java 被广泛使用的几个原因。</p>\n<ol>\n<li><strong>世界范围内流行，国内使用最为广泛的编程语言之一。</strong></li>\n</ol>\n<p>以下是截止 2022 年 7 月 TIOBE 统计的编程语言排行榜，可以看到 Java 处于前三的位置。而从历年编程语言所占市场份额趋势图也可以看出，Java 虽然没有一直独占鳌头，但绝大数时间都是占据领先地位。</p>\n<p>\n</p>\n<ol start=\"2\">\n<li><strong>移植性高</strong></li>\n</ol>\n<p>由于 Java 中 JVM 的特性，所以能够做到一次编译，随处运行，其移植性也就更高。</p>\n<ol start=\"3\">\n<li><strong>开发社区完善</strong></li>\n</ol>\n<p>社区完善也是 Java 为什么使用多的原因，各种封装 API，比起 C、C++ 语言使用起来更加方便。虽然 <code>Python</code> 的封装程度更高，但是其效率比起 <code>Java</code> 却打了折扣。毕竟封装程度和效率是成反比的，<code>Java</code> 兼具了效率高和使用方便的特点，所以更受人们青睐。</p>\n<h2> 四、Java 能做什么</h2>\n<p>Java 应用广泛，在我们日常中就能经常见到由 Java 所开发的程序。常见的的应用应用领域如下：</p>\n<ol>\n<li><strong>桌面 GUI 应用开发</strong></li>\n<li><strong>服务器系统</strong></li>\n<li><strong>企业级应用开发</strong></li>\n<li><strong>大数据开发</strong></li>\n<li><strong>移动应用开发</strong></li>\n<li><strong>游戏开发</strong></li>\n<li>……</li>\n</ol>\n<h2> 五、Java 技术体系</h2>\n<p>根据传统意义上 Sun 官方定义， Java 技术体系的组成主要就是我们常说的 JDK，即以下三部分：</p>\n<ol>\n<li><strong>Java 程序设计语言</strong></li>\n<li><strong>Java 虚拟机</strong></li>\n<li><strong>Java API 类库</strong></li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<p>同时，Java 技术体系又可以主要分为以下 3 个平台。</p>\n<ol>\n<li><strong>Java SE</strong></li>\n</ol>\n<p>Java Standard Edition，即 Java 标准版。主要是 Java 技术的核心和基础，要想学好 Java，那么首先你得掌握好这部分。主要运行在桌面级应用，如 Windows 应用程序。</p>\n<ol start=\"2\">\n<li><strong>Java EE</strong></li>\n</ol>\n<p>Java Enterprise Editon，即 Java 企业版。从它的名字就不难看出，这是 Java 针对企业级应用开发所提供的一套解决方案，主要用于架设高性能企业网站。</p>\n<ol start=\"3\">\n<li><strong>Java ME</strong></li>\n</ol>\n<p>Java Micro Edition，即 Java 小型版。主要是 Java 针对移动设备应用所提供的一套解决方案，主要运行在手机、pad 等移动端。</p>\n<figure><figcaption></figcaption></figure>\n<h2> 六、总结</h2>\n<p>本文主要从 Java 历史背景、选择 Java 的理由、Java 能做什么、Java 技术体系等 4 方面对 Java 语言做了一个简单介绍。接下来的文章我们就来看看，如何搭建 Java 的开发环境以及实现一个简单的入门程序。</p>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "JDK 安装及入门实例",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220702-jdk-install-and-hello-world.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220702-jdk-install-and-hello-world.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ 一、前言 作为一个入门的学习者，要进行 Java 开发，那怎么能少得了 JDK 呢，本文就先来看看如何安装并配置 JDK，为后续的学习做好铺垫。 二、下载并安装 JDK 什么是 JDK 呢？JDK（J...",
      "content_html": "<h1> JDK 安装及入门实例</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n<p>https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ</p>\n</div>\n<h2> 一、前言</h2>\n<p>作为一个入门的学习者，要进行 Java 开发，那怎么能少得了 JDK 呢，本文就先来看看如何安装并配置 JDK，为后续的学习做好铺垫。</p>\n<h2> 二、下载并安装 JDK</h2>\n<p>什么是 JDK 呢？JDK（Java Development Kit）即 Java 开发者工具包，使我们学习 Java 语言必须安装的一个工具。</p>\n<p>这里主要以 Windows 和 macOS 系统中 JDK 的安装为例，一来因为考虑到大家用的最多的还是 Windows 和 macOS 系统，二来则是因为手边没有安装 Linux 图形化系统。如果恰好你使用的是 Linux 系统，那么推荐你参考一下其他的资料，同样你也可以参考我的另一篇文章：<a href=\"https://cunyu1943.blog.csdn.net/article/details/105648148\" target=\"_blank\" rel=\"noopener noreferrer\">手把手带你玩转 Ubuntu</a>。</p>\n<h3> 1. Windows</h3>\n<h4> 1.1 安装</h4>\n<ol>\n<li>首先进入 <a href=\"https://www.oracle.com/java/technologies/javase-downloads.html\" target=\"_blank\" rel=\"noopener noreferrer\">Oracle 官网</a>，然后找到自己想要的 JDK 版本，这边以 JDK 11 为例；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li>点击 JDK Download 后，它会跳转到具体下载页面，然后根据自己的系统来进行选择，此处以 Windows 10 64 位为例；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li>点击最后的连接后，它会让你同意协议，勾选同意，然后登陆你的 Oracle 账户即可开始下载，若是没有 Oracle 账户，点击下面的创建一个即可；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<ol start=\"4\">\n<li>下载完成后，进行安装即可，安装流程和我们平常安装软件的一样，就再赘述，需要注意的是要记住如下的安装路径，因为一般我们都不会安装到默认路径，所以一定要记住你所安装到的路径，这关系到后续的配置步骤；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<h4> 1.2 配置 JDK</h4>\n<p>好了，经过上面的配置，我们的 JDK 就已经安装好了，但是这个使用你是用不了的，我们还需要进一步的配置；</p>\n<p>打开系统属性来进行环境变量配置，打开系统属性并进行配置的方式如下：</p>\n<ol>\n<li><strong>Windows + R</strong> 快捷键组合唤醒 Windows 运行窗口，然后输入 <code>sysdm.cpl</code>，紧接着回车即可，一般会打开如下界面，然后点击最上方的 <strong>高级</strong>；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li>点击高级后，就会打开如下界面，然后打开环境变量；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li>新建环境变量 <strong>JAVA_HOME</strong>，然后变量值填入刚才安装 JDK 的路径（刚才提醒过要记住！）；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"4\">\n<li>编辑 <strong>Path</strong> 环境变量，然后新建一个变量值，填入如下内容：<code>%JAVA_HOME%\\bin</code>；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"5\">\n<li>各种确定，然后突出系统属性即可，到这一步，理论上我们的 JDK 就安装并配置成功了，接下来我们就去确认一下到底安装好了没；</li>\n</ol>\n<h4> 1.3 验证 JDK</h4>\n<p>按照上述步骤操作完成之后，接下来就是验证了，一般我们可以通过如下三个命令来进行验证；</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>打开命令控制台（<strong>Windows + R，然后输入 cmd 回车</strong>），然后输入如上三个命令，如果安装成功，一般是会出现如下内容的；</p>\n<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<h3> 2. macOS</h3>\n<h4> 2.1 安装</h4>\n<ol>\n<li>首先去 <a href=\"https://www.oracle.com/java/technologies/javase-jdk11-downloads.html\" target=\"_blank\" rel=\"noopener noreferrer\">官网下载</a> 对应安装包；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li>\n<p>接受相关协议并登录下载；</p>\n</li>\n<li>\n<p>双击下载好的 <code>.dmg</code> 安装包，然后开始安装；</p>\n</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"4\">\n<li>安装过程中会让你输入密码，也就是你本机的密码。</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"5\">\n<li>安装成功；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<h4> 2.2 验证</h4>\n<p>不同于 Windows，macOS 下不用再去配置了，它会给你自动配置好，我们只需要去验证即可；</p>\n<ol>\n<li>查看 JDK 版本；</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li>编译命令；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li>运行命令；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<h3> 3. 安装目录详解</h3>\n<p>安装好 <code>JDK</code> 之后，打开安装路径，通常情况下会有如下的目录结构：</p>\n<table>\n<thead>\n<tr>\n<th>目录</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>bin</code></td>\n<td>用于存放各种工具命令，比如我们最常用额 <code>javac</code>、<code>java</code> 等</td>\n</tr>\n<tr>\n<td><code>lib</code></td>\n<td>存放工具的一些补充 <code>jar</code> 包</td>\n</tr>\n<tr>\n<td><code>conf</code></td>\n<td>存放相关配置文件</td>\n</tr>\n<tr>\n<td><code>include</code></td>\n<td>存放一些平台特定的头文件，比如 <code>Windows</code>、<code>macOS</code>、<code>Linux</code> 平台下这里的头文件是有所不同的</td>\n</tr>\n<tr>\n<td><code>legal</code></td>\n<td>存放各模块的授权文件</td>\n</tr>\n<tr>\n<td><code>jmods</code></td>\n<td>存放各种模块</td>\n</tr>\n</tbody>\n</table>\n<h2> 三、你的第一个 Java 程序：HelloWorld</h2>\n<p>好了，经过上面的安装配置，我们就可以开始我们的第一个 Java 程序编写了。</p>\n<p>要开发一个 Java 程序，主要分成 3 个步骤：</p>\n<ol>\n<li><strong>编写代码</strong></li>\n<li><strong>编译代码</strong></li>\n<li><strong>运行代码</strong></li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<p>我们不需要任何的基础，只需要按照上面的步骤配置好 JDK 之后，然后以上三个步骤逐一来进行就可以了。下面就来进行具体实践：</p>\n<ol>\n<li>打开编辑器（推荐 <code>VS Code</code>），如果没有，记事本也成，然后写入如下内容，然后保存为 <code>Main.java</code>，这里文件名一定要是 <code>Main</code>，文件后缀名为 <code>.java</code>。</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>打开控制命令台，然后进入上述文件存放的路径，使用如下命令进行编译，然后会生成一个 <code>Main.class</code> 文件；</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li>运行，使用如下命令进行运行，然后就可以看到打印出的最终结果了！</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 四、知识点说明</h2>\n<p>我们的 Hello World 是打印出来了，但是你肯定对里边的代码很感兴趣，这一节就主要针对我们的 Hello World 程序进行说明；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>完整的程序代码如上：</p>\n<ul>\n<li><code>public</code>：权限修饰符，表示这一个可以公开访问的类，类似的还有 <code>protected、default、private</code>，后续学习过程中再一一介绍；</li>\n<li><code>class</code>：Java 关键字，表示这是一个类；</li>\n<li><code>Main</code>： 表示我们的类名，在保存时文件一定要和它同名，否则你的程序是编译不了的。你可以试试，如果把我们上面的 <code>Main.java</code> 改成其他名字，你看看是不是还能编译成功呢？</li>\n<li><code>public static void main(String[] args){}</code>：主方法，这是我们以后最常接触到的一个方法，每个主类当中都必须有一个 <code>main</code> 方法；</li>\n<li><code>System.out.println(\"Hello World!\")</code>：控制台输出语句，执行该语句会在控制台中输出字符串，字符串要用双引号 <code>\"\"</code> 括起来，你可以把其中的 <code>Hello Wolrd!</code> 换成你想要打印的内容试试看。</li>\n</ul>\n<h2> 五、总结</h2>\n<p>好了，今天的内容到此就结束了，主要介绍了如何在 Windows 和 macOS 中安装 JDK，具体过程可以总结如下：</p>\n<ul>\n<li>安装</li>\n<li>配置</li>\n<li>验证</li>\n</ul>\n<p>然后编写了我们的第一个 <code>Hello World</code> 程序，并利用安装好的的 JDK 对其进行编译和运行。最后，则是对我们的 <code>Hello World</code> 程序中的相关知识进行了介绍。</p>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "利用 IDEA 进行 Java 开发",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220703-learn-java-with-idea.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220703-learn-java-with-idea.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 https://mp.weixin.qq.com/s/Pkf1WTj-x6JH4Jo8mOr8SQ 一、前言 上一篇中，我们讲了 如何搭建 Java 开发环境 (https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ)。不过既然确定了要从事 Java 开发...",
      "content_html": "<h1> 利用 IDEA 进行 Java 开发</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n<p>https://mp.weixin.qq.com/s/Pkf1WTj-x6JH4Jo8mOr8SQ</p>\n</div>\n<h2> 一、前言</h2>\n<p>上一篇中，我们讲了 <a href=\"https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ\" target=\"_blank\" rel=\"noopener noreferrer\">如何搭建 Java 开发环境</a>。不过既然确定了要从事 Java 开发，那怎么能少得了一个趁手的 IDE 呢。正所谓工欲善其事。必先利其器，一个趁手的 IDE 就像电视剧里的神兵利器，能让我们功力大增，大大提高我们的效率。</p>\n<p>但是目前市场上那么多的 IDE，有 Eclipse、IntelliJ IDEA、NetBeans …… 我们究竟该选择哪一个呢？既然做不了决定，那我就替你选择吧！要是都没接触过，那就直接 IDEA 吧，要是你之前是个 Eclipse 的忠实粉丝，也推荐你用一下 IDEA 试试，你只需要把 IDEA 的快捷键方式设置为 Eclipse 方式即可，相信过了一开始的阵痛期之后，就会喜欢上 IDEA 这一神器。那接下来，我们就来进行 IDEA 的安装工作！</p>\n<h2> 二、安装前的准备工作</h2>\n<p>开始安装之前，我们需要进行一些准备，首先是<strong>社区版和旗舰版该选谁</strong>，接着是<strong>软硬件的支持</strong>。</p>\n<h3> 1. 旗舰版 VS 社区版</h3>\n<p>对于旗舰版和社区版，我从官网给出的对比从而摘选了如下图所示的区别。可以看出旗舰版无论在 <strong>语言支持、框架支持、Build 工具、部署工具、版本控制</strong> 等多方面都比社区版更加强大，但是最大的区别也是我们最为关心的一点：<strong>旗舰版收费，而社区版免费</strong>， 所以可以根据自己的需求进行选择。</p>\n<figure><figcaption></figcaption></figure>\n<h3> 2. 软件</h3>\n<ul>\n<li>IntelliJ IDEA 安装包，下载地址：https://www.jetbrains.com/idea/download/，选择自己系统对应安装包即可。</li>\n</ul>\n<h3> 3. 硬件</h3>\n<table>\n<thead>\n<tr>\n<th>配置项目</th>\n<th style=\"text-align:left\">最低配置</th>\n<th>推荐配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>内存</strong></td>\n<td style=\"text-align:left\">2G +</td>\n<td>8 G +</td>\n</tr>\n<tr>\n<td><strong>硬盘</strong></td>\n<td style=\"text-align:left\">2.5 GB + 1 GB 缓存</td>\n<td>至少 5GB+ 空间的 SSD</td>\n</tr>\n<tr>\n<td><strong>显示器</strong></td>\n<td style=\"text-align:left\">1024 x 768</td>\n<td>1920×1080</td>\n</tr>\n<tr>\n<td><strong>操作系统</strong></td>\n<td style=\"text-align:left\">官方放出的 64 位操作系统：<br>1. Windows 8 +<br>2. macOS 10.13 +<br>3. Linux 的 Gnome、KDE、Unity 桌面环境的支持<br>4. 预览版系统可能支持不好</td>\n<td>最新的 64 位 Windows、macOS、Linux 系统</td>\n</tr>\n</tbody>\n</table>\n<h2> 三、安装工作</h2>\n<h3> 1. Ubuntu</h3>\n<h4> 1.1 安装</h4>\n<ol>\n<li>下载安装包，根据自己的需求选择旗舰版或是社区版</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li>将下载好的安装包 <code>ideaIU-2020.1.1.tar.gz</code> 移动到平时存放软件的目录下进行解压缩</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><figure><figcaption>解压</figcaption></figure>\n<figure><figcaption>解压后的目录结构</figcaption></figure>\n<ol start=\"3\">\n<li>进入解压后的 <code>bin</code> 目录，然后在终端启动如下命令即可：</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"4\">\n<li>进入初始化启动后的设置即可。</li>\n</ol>\n<p>首先是 UI 主题选择，根据自己的喜好选择 Light 还是 Darcula 模式；</p>\n<figure><figcaption>图片源自 IDEA 官网</figcaption></figure>\n<p>接着是否创建启动器脚本，同时选择自己的脚本保存目录</p>\n<figure><figcaption>图片源自 IDEA 官网</figcaption></figure>\n<p>接着选择自己想要的插件和禁用无关插件，根据自己的需求安装即可，如果不知道怎么选择，默认即可。</p>\n<figure><figcaption>图片源自 IDEA 官网</figcaption></figure>\n<p>选择额外的插件支持，按需安装，默认不勾选，后续也可以自行安装。</p>\n<figure><figcaption>图片源自 IDEA 官网</figcaption></figure>\n<h4> 1.2 卸载</h4>\n<p>Linux 下卸载只需要将对应目录（即刚才解压后的目录）删除即可。</p>\n<h3> 2. Windows</h3>\n<h4> 2.1 安装</h4>\n<p>安装过程和 Ubuntu 大致相同，只是 Windows 中的安装包是可执行文件，只需要双击进行安装即可，然后后面选择自己的安装路径即可，安装好之后的设置和 Ubuntu 一致。</p>\n<h4> 2.2 卸载</h4>\n<p>进入 Windows 设置，然后进入应用，然后搜索 IDEA，选择卸载即可。</p>\n<figure><figcaption></figcaption></figure>\n<h3> 3. macOS</h3>\n<h4> 3.1 安装</h4>\n<ol>\n<li>首先去 <a href=\"https://www.jetbrains.com/idea/download/#section=mac\" target=\"_blank\" rel=\"noopener noreferrer\">官网下载</a> 对应安装包；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li>然后双击下载好的 <code>.dmg</code> 安装包，等待验证后拖拽到 <code>Applications</code> 即可；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li>安装成功，打开的主页面如下图所示；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<h4> 3.2 卸载</h4>\n<p>打开访达中的 <strong>应用程序</strong>，然后找到 IDEA，将其拖到 <strong>🗑️ 废纸篓</strong> 即可，也可以单击鼠标右键，然后 <strong>移到废纸篓</strong>；</p>\n<figure><figcaption></figcaption></figure>\n<h2> 四、创建 Java 项目</h2>\n<p><a href=\"https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ\" target=\"_blank\" rel=\"noopener noreferrer\">上一篇</a> 文章中，我们介绍了如何利用编辑器写我们的 <code>Hello World</code>，接下来就讲讲如何利用 IDEA 来创建并书写我们的 <code>Hello World</code> 程序。</p>\n<ol>\n<li>依次进入 <code>File -&gt; New -&gt; Project</code>，然后选择左侧 Java，配置项目 JDK；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li>下一步之后，如果勾选上面的选项，就会从模板创建一个项目（一般都是 <code>HelloWorld</code>），不勾选就是一个空项目，看自己选择；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li>再接下来，就是设置项目名以及项目存储目录了；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"4\">\n<li>最后点击完成，我们的普通 Java 项目就创建成功了；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"5\">\n<li>项目创建成功了，我们在项目 <code>src</code> 目录上右键新建一个 Java 类文件。注意，一般来讲，我们倾向于把类的命名方式定义为首字母大写的驼峰命名法。然后填入如下代码，一个 简单的 <code>HelloWorld</code> 就完成了；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ol start=\"6\">\n<li>最后运行我们刚才写的代码，可以看到输出了 <code>Hello World</code>，和我们在上一篇文章中通过控制台打印出的一样！</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 五、总结</h2>\n<p>今天的内容就到此为止了，主要介绍了 IDEA 的不同版本之间的区别，以及 IDEA 在不同系统中的安装和卸载工作，最后则是给大家演示了如何利用 IDEA 创建一个项目，编写我们最简单的 <code>Hello World!</code> 程序。</p>\n<p>这里如果您想了解 IDEA 的更多使用技巧，可以关注一下，后边我会抽空写一个完整的教程系列，敬请期待吧！您要是等不及了，那就加我微信来催我更文吧！</p>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "变量与数据类型",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220704-variable-and-datatype.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220704-variable-and-datatype.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文：https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw 前情回顾 在之前的文章中，我们已经介绍了如何搭建 Java 开发环境以及如何使用 IDEA，现在就开始正式学习 Java 语言的相关语法吧！😎 本期内容预告如下： 1. 变量 2. 数据类型 3. ...",
      "content_html": "<h1> 变量与数据类型</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>原文：https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw</p>\n</div>\n<h2> 前情回顾</h2>\n<p>在之前的文章中，我们已经介绍了如何搭建 Java 开发环境以及如何使用 IDEA，现在就开始正式学习 Java 语言的相关语法吧！😎</p>\n<p>本期内容预告如下：</p>\n<ol>\n<li><strong>变量</strong></li>\n<li><strong>数据类型</strong></li>\n<li><strong>变量作用域</strong></li>\n<li><strong>常量</strong></li>\n</ol>\n<p>本文将主要从以上四个方面出发，带领大家来看一下 Java 中的变量和数据类型。</p>\n<h2> 变量</h2>\n<h3> 什么是变量？</h3>\n<p>所谓变量，就是用来命名一个数据的标识符，其定义格式如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>其中数据类型是用于限制存储数据的形式，后面会讲到 Java 中的常见数据类型；变量名称是用于代表变量的一个符号，就好比我们每个人的名字；初始值则代表该变量存储时的初始数据。</p>\n<p>在 Java 中，变量主要分为两种：</p>\n<ul>\n<li><strong>基本类型的变量</strong></li>\n<li><strong>引用类型的变量</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中 <code>int</code> 是基本数据类型，表示这是一个整型数；而 <code>String</code> 则是引用类型，表示这是一个引用类型；</p>\n<p><code>id</code> 和 <code>name</code> 则是标识符，也就是我们所说的 <strong>变量</strong>；</p>\n<p><code>=</code> 则是赋值操作符，而 <code>1</code> 则是基本类型的值，<code>村雨遥</code> 则是引用类型的值；</p>\n<h3> 变量的特点</h3>\n<p>在使用变量时，需要注意以下的几个问题。</p>\n<ol>\n<li>变量一定要先声明然后再使用。</li>\n<li>声明一个变量的类型后，不能用它来存储其他类型的数据。</li>\n<li>变量定义时可以不赋初始值，但是在使用时必须赋值。</li>\n<li>变量是有使用范围的，在同一使用范围内，不能重复定义同一个变量。</li>\n<li>变量最重要的一个特点就是可以重新赋值。</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 变量命名规则</h3>\n<p>变量命名也是一门学问，并不是我们想怎么命名就怎么命名，日常开发中最常见的变量命名规则主要有如下几条：</p>\n<ol>\n<li><strong>强制</strong>：变量命名只能使用 <strong>字母（大小写均可）、数字、$、_</strong>；</li>\n<li><strong>强制</strong>：变量名不能使用关键字（就是 Java 中内置的一些关键字，如 <code>int、for、long…</code>）；</li>\n<li><strong>强制</strong>：变量第一个字符不能使用数字，只能用字母、<code>$</code>、<code>_</code>；</li>\n<li>更多命名规则推荐参考阿里巴巴推出的《Java 开发手册》，下载链接：https://github.com/cunyu1943/ebooks</li>\n</ol>\n<h3> 常见关键字</h3>\n<p>这是一种事先定义好的，有特定意义的标识符，也叫做保留字。对于 Java 编译器有着特殊意义，用来表示一种数据类型，或者表示程序的结构等。此外，关键字不能用作变量名、方法名、类名、包名和参数名。常见的关键字可以分为如下几类，具体的关键字如下图所示：</p>\n<ul>\n<li><strong>访问控制类</strong></li>\n<li><strong>类、方法及变量修饰符类</strong></li>\n<li><strong>程序控制类</strong></li>\n<li><strong>错误处理</strong></li>\n<li><strong>包相关</strong></li>\n<li><strong>基本类型</strong></li>\n<li><strong>变量引用</strong></li>\n<li><strong>保留字</strong></li>\n</ul>\n<!-- ![](https://img-blog.csdnimg.cn/9f8fed4aeeda4dea9d1de0ff7677ca4a.png) -->\n<figure><figcaption>Java 关键字</figcaption></figure>\n<h2> 数据类型</h2>\n<h3> 基本数据类型</h3>\n<p>Java 中，共有 8 种基本数据类型，由 Java 语言预定好的，每个数据类型都属于关键字，而且每种基本变量都有其对应的封装类，这 8 种基本数据类型分别是：</p>\n<ul>\n<li><strong>整型（4 种）</strong></li>\n<li><strong>浮点型（2 种）</strong></li>\n<li><strong>字符型（1 种）</strong></li>\n<li><strong>布尔型（1 种）</strong></li>\n</ul>\n<p>下面的表就是 Java 中 8 大数据类型所占的内存空间，对应封装类，数据表示范围以及默认值的一下相关情况。</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>bit</th>\n<th>字节</th>\n<th>封装类</th>\n<th>数据范围</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>byte</code></td>\n<td>8</td>\n<td>1</td>\n<td><code>Byte</code></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>7</mn></msup></mrow><annotation encoding=\"application/x-tex\">-2^7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span> ~ <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>7</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^7-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td>16</td>\n<td>2</td>\n<td><code>Short</code></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding=\"application/x-tex\">-2^{15}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">15</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>15</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{15}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">15</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>char</code></td>\n<td>16</td>\n<td>2</td>\n<td><code>Character</code></td>\n<td><code>\\u0000</code> ~ <code>\\uffff</code>（<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> ~ <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>65535</mn></mrow><annotation encoding=\"application/x-tex\">65535</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">65535</span></span></span></span>）</td>\n<td><code>u0000</code></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td>32</td>\n<td>4</td>\n<td><code>Integer</code></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding=\"application/x-tex\">-2^{31}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{31}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></td>\n<td><code>0</code></td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td>64</td>\n<td>8</td>\n<td><code>Long</code></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>63</mn></msup></mrow><annotation encoding=\"application/x-tex\">-2^{63}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">63</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>63</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{63}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">63</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></td>\n<td><code>0L</code></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td>32</td>\n<td>4</td>\n<td><code>Float</code></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.4</mn><msup><mi>e</mi><mrow><mo>−</mo><mn>45</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">1.4e^{-45}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1.4</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">45</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3.4</mn><msup><mi>e</mi><mn>38</mn></msup></mrow><annotation encoding=\"application/x-tex\">3.4e^{38}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">3.4</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">38</span></span></span></span></span></span></span></span></span></span></span></span></td>\n<td><code>0.0f</code></td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td>64</td>\n<td>8</td>\n<td><code>Double</code></td>\n<td><span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4.9</mn><msup><mi>e</mi><mrow><mo>−</mo><mn>324</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">4.9e^{-324}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">4.9</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">324</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.8</mn><msup><mi>e</mi><mn>308</mn></msup></mrow><annotation encoding=\"application/x-tex\">1.8e^{308}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1.8</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">308</span></span></span></span></span></span></span></span></span></span></span></span></td>\n<td><code>0.0D</code></td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td>1</td>\n<td>不确定</td>\n<td><code>Boolean</code></td>\n<td><code>true</code> 或 <code>false</code></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong></p>\n<ol>\n<li><code>boolean</code> 一般用 1 <code>bit</code> 来存储，但是具体大小并未规定，JVM 在编译期将 <code>boolean</code> 类型转换为 <code>int</code>，此时 1 代表 <code>true</code>，<code>0</code> 代表 <code>false</code>。此外，JVM 还指出 <code>boolean</code> 数组，但底层是通过 <code>byte</code> 数组来实现。</li>\n<li>使用 <code>long</code> 类型时，需要在后边加上 <code>L/l</code>，否则将其作为整型解析，可能会导致越界。</li>\n<li>浮点数如果没有明确指定 <code>float</code> 还是 <code>double</code>，统一按 <code>double</code> 处理。</li>\n<li><code>char</code> 是用 <strong>单引号 <code>''</code></strong> 将内容括起来，<strong>只能存放一个字符</strong>，相当于一个整型值（ASCII 值），能够参加表达式运算；而 <code>String</code> 是用 <strong>双引号 <code>\"\"</code></strong> 将内容括起来，代表的是一个地址值。</li>\n<li><code>Java</code> 在内存中是采用 <code>Unicode</code> 表示，所以无论是一个中文字符还是英文字符，都能用 <code>char</code> 来表示。</li>\n</ol>\n<p>那么如何给一个基本类型变量赋值呢？</p>\n<p>在 <code>Java</code> 中，基本数据类型属于 <code>Java</code> 的一种内置的特殊数据类型，不属于任何类，所以可以直接对其进行赋值；给基本类型的变量赋值的方式就叫做 <strong>字面值</strong>；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 引用数据类型</h3>\n<h4> 常见引用数据类型</h4>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数组</td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td>类</td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td>接口</td>\n<td><code>null</code></td>\n</tr>\n</tbody>\n</table>\n<p>而对于引用数据类型，我们经常是需要 <code>new</code> 关键字来进行赋值，但是引用类型中的 <strong>接口是不能被实例化的，我们需要对其进行实现</strong>；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> String</h4>\n<p>对于引用数据类型中的 <code>String</code>，我们需要特别关注。</p>\n<p><code>String</code> 不同于 <code>char</code>，它属于引用类型，而 <code>char</code> 属于基本数据类型。用双引号 <code>\"\"</code> 括起来表示字符串，一个字符串能够保存 0 个到任意个字符，它一旦创建就不能被改变。</p>\n<p>而针对字符串，如果我们要打印一些特殊的字符，比如字符串本来就包含 <code>\"</code>，那么这个时候就需要借助于转义字符 <code>\\</code>，最常见的转义字符主要有：</p>\n<table>\n<thead>\n<tr>\n<th>转义字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\\"</code></td>\n<td>字符 <code>\"</code></td>\n</tr>\n<tr>\n<td><code>\\'</code></td>\n<td>字符 <code>'</code></td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>字符 <code>\\</code></td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>换行符</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>制表符 <code>Tab</code></td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>回车符</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>那多个字符串之间或者字符串和其他类型数据之间，该如何进行连接呢？</p>\n</blockquote>\n<p>Java 编译器中，对于字符串和其他数据类型之间，可以使用 <code>+</code> 进行连接，编译器会自动将其他数据类型自动转换为字符串，然后再进行连接；</p>\n<blockquote>\n<p><code>String</code> 既然是不可变，那有什么优点呢？</p>\n</blockquote>\n<ol>\n<li><strong>用于缓存 <code>hash</code> 值</strong></li>\n</ol>\n<p>由于 <code>String</code> 的 <code>hash</code> 值被频繁使用，它的不可变性使得 <code>hash</code> 值也不可变，此时只需要进行一次计算；</p>\n<ol start=\"2\">\n<li><strong>字符串常量池（String Pool）的需要</strong></li>\n</ol>\n<p>如果一个 <code>String</code> 对象已经被创建过，那么就会优先从字符串常量池中获取其引用，其不可变性确保了不同引用指向同一 <code>String</code> 对象；</p>\n<ol start=\"3\">\n<li><strong>安全性</strong></li>\n</ol>\n<p>我们经常用 <code>String</code> 作为我们方法的参数，其不变性能够保证参数不可变；</p>\n<ol start=\"4\">\n<li><strong>线程安全</strong></li>\n</ol>\n<p><code>String</code> 的不可变性让它天生 <strong>具备线程安全</strong>，能够在多个线程中方便使用而不用考虑线程安全问题。</p>\n<blockquote>\n<p><code>String、StringBuilder、StringBuffer</code> 对比，该如何选择？</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>可变性</th>\n<th>线程安全</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>String</code></td>\n<td>不可变</td>\n<td>安全</td>\n<td>操作少量的数据</td>\n</tr>\n<tr>\n<td><code>StringBuffer</code></td>\n<td>可变</td>\n<td>安全，内部使用 <code>synchronized</code> 进行同步</td>\n<td>多线程操作字符串缓冲区下操作大量数据</td>\n</tr>\n<tr>\n<td><code>StringBuilder</code></td>\n<td>可变</td>\n<td>不安全</td>\n<td>单线程操作字符串缓冲区下操作大量数据，性能高于 <code>StringBuffer</code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>通过 <code>new String(“xxx”)</code> 创建字符串的两种情况？</p>\n</blockquote>\n<p>使用 <code>new</code> 的方式创建字符串对象，会有两种不同的情况：</p>\n<ol>\n<li><strong>String Pool 中不存在 “xxx”</strong></li>\n</ol>\n<p>此时会创建两个字符串对象，“xxx” 属于字符串字面量，因此在编译期会在 String Pool 中创建一个字符串对象，用于指向该字符串的字面量 “xxx”；然后 <code>new</code> 会在堆中创建一个字符串对象。</p>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>String Pool 中存在 “xxx”</strong></li>\n</ol>\n<p>此时只需要创建一个字符串对象，由于 String Pool 中已经存在指向 “xxx” 的对象，所以直接在堆中创建一个字符串对象。</p>\n<figure><figcaption></figcaption></figure>\n<h3> 数据类型转换</h3>\n<p>对于基本数据类型，不同类型之间是可以相互转换的，但是需要满足一定的条件；</p>\n<blockquote>\n<p><strong>从小到大自动转，从大到小强制转</strong>。</p>\n</blockquote>\n<p>即就是，对于低精度的数据类型，如果要转换为高精度的数据类型，直接将低精度的值赋给高精度的值即可；</p>\n<p>但对于高精度的数据类型，如果想要转换为低精度的数据类型，则需要采用 <strong>强制转换</strong> 的手段，但此时需要承担精度丢失的风险，就像从一个大杯子往一个小杯子里倒水，你要做好小杯子可能装不下溢出的情况；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 隐式转换（自动类型转换）</h4>\n<p>当满足如下条件时，如果将一种类型的数据赋值给另一种数据类型变量时，将执行自动类型转换：</p>\n<blockquote>\n<ol>\n<li>两种数据类型彼此兼容；</li>\n<li>目标数据类型的取值范围大于源数据类型；</li>\n</ol>\n</blockquote>\n<p>一般而言，隐式转换的规则是从低级类型数据转换为高级类型数据，对应规则如下：</p>\n<blockquote>\n<ul>\n<li><strong>数值类型</strong>：<code>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</code></li>\n<li><strong>字符类型转整型</strong>：<code>char -&gt; int</code></li>\n</ul>\n</blockquote>\n<h4> 显式转换（强制类型转换）</h4>\n<p>那既然满足上述两个条件时会发生隐式转换，那不满足我们又想进行数据类型转换时，我们该怎么办呢？</p>\n<p>这个时候就需要我们的 <strong>显式转换</strong> 登场了，其语法格式如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>我们举个例子来说下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>**注意：**强制转换可能会导致精度丢失，所以一般情况下尽量能不用就不用。</p>\n<h4> 常见数据类型转换方法</h4>\n<ol>\n<li><strong>字符串与其他类型之间的转换</strong></li>\n</ol>\n<ul>\n<li><strong>其他类型 -&gt; 字符串</strong></li>\n</ul>\n<blockquote>\n<ol>\n<li>调用类的串转换方法：<code>X.toString()</code>；</li>\n<li>自动转换：<code>\"\" + X</code>；</li>\n<li>利用 <code>String</code> 的方法：<code>String.valueOf(X)</code>；</li>\n</ol>\n</blockquote>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>字符串 - &gt; 其他类型</strong></li>\n</ul>\n<ol>\n<li>调用 <code>parseXXX</code> 方法，比如 <code>parseLong、parseFloat、parseDouble...</code>；</li>\n<li>先调用 <code>valueOf()</code>，方法，然后再调用 <code>xxxValue()</code> 方法；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>int、float、double</strong> 之间的转换</li>\n</ol>\n<ul>\n<li><code>float -&gt; double</code></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><code>double -&gt; float</code></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><code>double -&gt; int</code></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><code>int -&gt; double</code></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 变量作用域</h2>\n<p>我们已经学会了如何定义变量，也知道了使用各种数据类型来定义变量。但是还有一点不知道大家有没有注意到，如果我们的定义变量在不同的位置，其作用是不是相同的呢？</p>\n<p>这就涉及到变量的作用域，一般根据其作用域的不同，可以分为：</p>\n<ul>\n<li><strong>成员变量</strong>：定义在方法体和语句块外，不属于任何一个方法，能在整个类中起作用；</li>\n<li><strong>局部变量</strong>：定义在方法或方法体中的变量，作用域是其所在的代码块；</li>\n</ul>\n<h3> 成员变量</h3>\n<p>成员变量又可以分为 <strong>全局变量（又叫实例变量）</strong> 和 <strong>静态变量（也叫类变量）</strong>，两者的区别如下：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>修饰符</th>\n<th>访问方式</th>\n<th>生命周期</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>全局变量</td>\n<td>无</td>\n<td>对象名.变量名</td>\n<td>一旦对象被引用，则实例变量就存在</td>\n</tr>\n<tr>\n<td>静态变量</td>\n<td><code>static</code></td>\n<td>类名.变量名</td>\n<td>同类共生死，只有当类被 GC 回收时才会被销毁</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 局部变量</h3>\n<p>成员变量指定义在方法或方法体中的变量，作用域是其所在的代码块，可以分为如下三种：</p>\n<ul>\n<li>形参</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>方法内定义</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>代码块定义</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 常量</h2>\n<h3> 简介</h3>\n<p>既然有变量，那就有与之相对的常量（也就是值是固定的，不能再变）。</p>\n<p>常量又叫做字面常量，是通过数据直接来表示的，在程序运行过程中不能发生改变。通常我们把 Java 中用 <code>final</code> 关键字所修饰的成员变量叫做常量，它的值一旦给定就无法再进行改变！</p>\n<h3> 分类</h3>\n<p>Java 中使用 <code>final</code> 关键字来声明常量，其语法格式如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>常量可以分为如下 3 种类型：</p>\n<ul>\n<li><strong>静态常量</strong>：<code>final</code> 之前用 <code>public staic</code> 修饰，表示该常量的作用域是全局的，我们不用创建对象就能够访问它。</li>\n<li><strong>成员常量</strong>：类似于成员变量，但是最大的不同在于它不能被修改。</li>\n<li><strong>局部常量</strong>：作用类似于局部变量，不同之处也在于不能修改。</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>PS：<code>final</code> 修饰变量后，该变量则变为常量。而 <code>final</code> 也还可以用来修饰类和方法，修饰方法时，表示这个方法不能被重写（但可以重载）；修饰类时，则表明该类无法被继承。这些东西这时候你可能会觉得很陌生，不过等我们后续学习了面向对象之后，你就会发现其实很简单。</p>\n<h2> 总结</h2>\n<p>以上就是本期文章的所有内容了，集中介绍了 Java 中的变量、数据类型、变量作用域以及常量等主要知识点。内容虽然蛮多的，但如果大家能够静下心来慢慢学习，掌握起来还是不难的。</p>\n<p>最后，码字不易，如果觉得本文对您有所帮助，可以点赞关注，帮忙分享一波哦！🙏</p>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "image": "https://img-blog.csdnimg.cn/9f8fed4aeeda4dea9d1de0ff7677ca4a.png",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "常用进制转换",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220705-binary-convert.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220705-binary-convert.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 https://mp.weixin.qq.com/s/2f_dODoVco-tSS66lF0U5A 前言 所谓进制转换，就是人们利用符号来计数的方法。进制转换由一组数码符号和两个基本因素“基数”和“位权”所构成。其中基数是指进位计数制中所采用的数码的个数，逢 n 进 1 中的 n 就是基数。而位权则...",
      "content_html": "<h1> 常用进制转换</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n<p>https://mp.weixin.qq.com/s/2f_dODoVco-tSS66lF0U5A</p>\n</div>\n<h2> 前言</h2>\n<p>所谓进制转换，就是人们利用符号来计数的方法。进制转换由一组数码符号和两个基本因素“基数”和“位权”所构成。其中<strong>基数</strong>是指进位计数制中所采用的数码的个数，逢 <code>n</code> 进 1 中的 <code>n</code> 就是基数。而<strong>位权</strong>则指的是进位制中每一个固定位置所对应的单位制，而每一种进制中的某一个数的每位上都有一个权值 <code>m</code>，而且权值是位数减一，比如个位上的数的权值为 <code>0</code>（位数 1 - 1 = 0），而十位的权值为 <code>1</code>（位数 2 - 1 = 1）。</p>\n<p>在 Java 学习中，我们难免会和各种进制打交道。今天就来看看，在 Java 中最常用的几个进制的相关概念，以及如何利用 Java 来实现他们之间的相互转换！</p>\n<h2> 二进制</h2>\n<p>二进制是计算机中采用最广泛的一种数制，用 0 和 1 两个数码来表示，其进位规则是逢二进一，而借位规则则是借一当二。</p>\n<p>如果要将二进制转换为十进制，则采用 <strong>按权展开求和</strong>方法，其步骤是先将二进制的数写成加权系数展开式，然后再更具十进制的加法规则进行求和。</p>\n<p v-pre=\"\" class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1011</mn><msub><mo stretchy=\"false\">)</mo><mn>2</mn></msub><mo>=</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>0</mn></msup><mo>=</mo><mo stretchy=\"false\">(</mo><mn>11</mn><msub><mo stretchy=\"false\">)</mo><mn>10</mn></msub></mrow><annotation encoding=\"application/x-tex\">\n(1011)_2=1*2^3+0*2^2+1*2^1+1*2^0 = (11)_{10}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1011</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">11</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">10</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<h2> 十进制</h2>\n<p>而一个十进制数要转换为二进制数，则需要将整数和小数部分分别转换，最后再进行组合。其中，整数部分采用<strong>除二取余，逆序排序</strong>的方法。具体方法是用 2 来整除一个十进制数，从而得到一个商和余数；然后再用 2 去除以商，从而又得到一个商和余数，重复这个步骤，直到最后得到的商小于 1 时为止。最后把按照得到余数的先后顺序，逆序依次排列，得到的数即为这个十进制数的二进制表示。</p>\n<p v-pre=\"\" class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>15</mn><msub><mo stretchy=\"false\">)</mo><mn>10</mn></msub><mo>=</mo><mo stretchy=\"false\">(</mo><mn>1111</mn><msub><mo stretchy=\"false\">)</mo><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\n(15)_{10}=(1111)_2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">15</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">10</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1111</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<figure><figcaption>整数部分</figcaption></figure>\n<p>小数部分则不同于整数部分，小数部分要使用<strong>乘 2 取整法</strong>，即用十进制的小数部分乘以 2，然后取结果的整数部分，然后再用剩下的小数重复刚才的步骤，直到最后剩余的小数为 0 时停止。最后将每次得到的整数部分按照先后顺序正序排列，从而得到对应的二进制表示。</p>\n<p v-pre=\"\" class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0.25</mn><msub><mo stretchy=\"false\">)</mo><mn>10</mn></msub><mo>=</mo><mo stretchy=\"false\">(</mo><mn>0.01</mn><msub><mo stretchy=\"false\">)</mo><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\n(0.25)_{10}=(0.01)_2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0.25</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">10</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0.01</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<figure><figcaption></figcaption></figure>\n<h2> 八进制</h2>\n<p>所谓八进制，就是每 3 位二进制作为一个单元，其中最小的数是 0，最大的数是 7，一共 8 个数字。</p>\n<p>要将二进制的数转换为八进制，需要将 3 个连续的数拼成一组，然后再独立转成八进制中的数字。</p>\n<p>例如，二进制的 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>111101011110</mn></mrow><annotation encoding=\"application/x-tex\">111101011110</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">111101011110</span></span></span></span> 可以转换为八进制中的 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>7536</mn></mrow><annotation encoding=\"application/x-tex\">7536</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">7536</span></span></span></span>。</p>\n<figure><figcaption></figcaption></figure>\n<h2> 十六进制</h2>\n<p>所谓十六进制，就是每 4 位二进制作为一个单元，其中最小数是 0，最大数是 15，一共 16 个数字，分别用 0 ~ 9、A、B、C、D、E、F 表示。</p>\n<p>要将二进制转换为十六进制，需要将 4 个连续的数拼成一组，然后再独立转换为十六进制中对应的数字。</p>\n<p>例如，二进制的 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1111100111010111</mn></mrow><annotation encoding=\"application/x-tex\">1111100111010111</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1111100111010111</span></span></span></span> 可以转换为十六进制中的 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mn>9</mn><mi>D</mi><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">F9D7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord\">9</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">7</span></span></span></span>。</p>\n<figure><figcaption></figcaption></figure>\n<h2> 常用进制转换</h2>\n<p>当然，Java 中也已经将常用的进制转换方法封装好了，我们只需要调用对应方法即可。</p>\n<table>\n<thead>\n<tr>\n<th>转换</th>\n<th>方法</th>\n<th>返回</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>十进制 -&gt; 二进制</td>\n<td><code>Integer.toBinary(int num)</code></td>\n<td>二进制字符串</td>\n</tr>\n<tr>\n<td>十进制 -&gt; 八进制</td>\n<td><code>Integer.toOctalString(int num)</code></td>\n<td>八进制字符串</td>\n</tr>\n<tr>\n<td>十进制 -&gt; 十六进制</td>\n<td><code>Integer.toHexString(int num)</code></td>\n<td>十六进制字符串</td>\n</tr>\n<tr>\n<td>十进制 -&gt; N 进制</td>\n<td><code>Integer.toString(int num, int N)</code></td>\n<td>N 进制字符串</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>相反的，如果我们要将一个 <code>N</code> 进制的字符串 <code>str</code> 转换为十进制数，那么可以使用以下方法。</p>\n<table>\n<thead>\n<tr>\n<th>转换</th>\n<th>方法</th>\n<th>返回</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>N 进制 -&gt; 十进制</td>\n<td><code>Integer.parseInt(String str, int N)</code></td>\n<td>十进制数</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 总结</h2>\n<p>以上就是有关二进制、十进制、八进制、十六进制相关的知识点了。此外还介绍了 Java 中如何进行十进制向其他进制的转换方法，以及如何将其他进制转换为十进制。如果你刚好这些内容对你有所帮助，那就来个一键三连吧！</p>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "操作符",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220706-operator.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220706-operator.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g 前言 之前的文章 (https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw) 中介绍了 Java 变量和数据类型，那么如何对他们进行运算呢？这就要用到运算符...",
      "content_html": "<h1> 操作符</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n<p>https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g</p>\n</div>\n<h2> 前言</h2>\n<p><a href=\"https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw\" target=\"_blank\" rel=\"noopener noreferrer\">之前的文章</a> 中介绍了 Java 变量和数据类型，那么如何对他们进行运算呢？这就要用到运算符的相关知识点了。所谓运算符，就是指 Java 中对变量或者字面量进行操作的符号。下面就来具体看看，常用的操作符。</p>\n<p>本文主要内容预告如下：</p>\n<ul>\n<li><strong>算术运算符</strong></li>\n<li><strong>关系运算符</strong></li>\n<li><strong>位运算符</strong></li>\n<li><strong>逻辑运算符</strong></li>\n<li><strong>赋值运算符</strong></li>\n<li><strong>条件运算符</strong></li>\n</ul>\n<p>好了，话不多说，开始正式内容吧！</p>\n<h2> 算术运算符</h2>\n<p>常见的算术运算符主要有下表中的几种，主要是针对整型和浮点类型的运算。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>+</code></td>\n<td style=\"text-align:left\">加法 - 相加运算符两侧的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-</code></td>\n<td style=\"text-align:left\">减法 - 左操作数减去右操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>*</code></td>\n<td style=\"text-align:left\">乘法 - 相乘操作符两侧的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/</code></td>\n<td style=\"text-align:left\">除法 - 左操作数除以右操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>％</code></td>\n<td style=\"text-align:left\">取余 - 左操作数除以右操作数的余数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>++</code></td>\n<td style=\"text-align:left\">自增: 操作数的值增加1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>--</code></td>\n<td style=\"text-align:left\">自减: 操作数的值减少1</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意</strong>：<code>++</code> 和 <code>--</code> 可以放在操作数之前，也可以放在操作数之后；<strong>位于操作数之前时，先自增/减，再赋值；位于操作数之后，先赋值，再自增/减</strong>；总结起来就是<strong>符号在前就先加/减，符号在后就后加/减</strong>。</p>\n<p>以下是部分算术运算符的示例以及运行结果：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>这里不难看出，无论是 <code>++</code> 还是 <code>--</code>，当它们单独写一行时，不管是放在变量前边还是后边，其最终结果都是一样的。但如果将它们参与运算，此时的效果就不一样了，这里需要注意。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以上代码中，先进行了 <code>b = a</code> 的赋值操作，所以此时 <code>b</code> 的值是 <code>10</code>。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>而此时，先要对 <code>a</code> 进行加一的操作之后，再将 <code>a</code> 的值赋予 <code>b</code>，所以此时 <code>b</code> 的值为 <code>11</code>。</p>\n<h2> 关系运算符</h2>\n<p>关系运算符主要是指两个数据间的关系，两者之间的比较结果用逻辑值来表示，常用来比较判断两个变量或常量的大小。常见的关系运算符及含义如下表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>==</code></td>\n<td style=\"text-align:left\">检查如果两个操作数的值是否相等，如果相等则条件为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>!=</code></td>\n<td style=\"text-align:left\">检查如果两个操作数的值是否相等，如果值不相等则条件为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt; </code></td>\n<td style=\"text-align:left\">检查左操作数的值是否大于右操作数的值，如果是那么条件为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt; </code></td>\n<td style=\"text-align:left\">检查左操作数的值是否小于右操作数的值，如果是那么条件为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;=</code></td>\n<td style=\"text-align:left\">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;=</code></td>\n<td style=\"text-align:left\">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真</td>\n</tr>\n</tbody>\n</table>\n<p>以下是部分关系运算符的示例以及运行结果：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 位运算符</h2>\n<p>位运算符主要用来对操作数二进制的位进行运算，其运算结果是整型的。常见的位运算符及功能描述如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>＆</code></td>\n<td>如果相对应位都是 1，则结果为 1，否则为 0</td>\n</tr>\n<tr>\n<td><code>|</code></td>\n<td>如果相对应位都是 0，则结果为 0，否则为 1</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>如果相对应位值相同，则结果为 0，否则为 1</td>\n</tr>\n<tr>\n<td><code>〜</code></td>\n<td>按位取反运算符翻转操作数的每一位，即 0 变成 1，1 变成 0</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td>按位左移运算符。左操作数按位左移右操作数指定的位数</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code></td>\n<td>按位右移运算符。左操作数按位右移右操作数指定的位数</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;&gt;</code></td>\n<td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充</td>\n</tr>\n</tbody>\n</table>\n<p>以下是部分位运算符的示例以及运行结果：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 逻辑运算符</h2>\n<p>逻辑运算符通过将关系表达式连接起来，从而组成一个复杂的逻辑表达式，从而判断程序中的表达式是否成立，其结果返回 <code>true</code> 或 <code>false</code>。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>&amp;&amp;</code></td>\n<td style=\"text-align:left\">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>||</code></td>\n<td style=\"text-align:left\">称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>!</code></td>\n<td style=\"text-align:left\">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为 <code>true</code>，则逻辑非运算符将得到 <code>false</code></td>\n</tr>\n</tbody>\n</table>\n<p>以下是逻辑运算符的示例以及运行结果：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 赋值运算符</h2>\n<p>赋值运算符表示一个动作，将其右侧的值送到左侧的变量中。常见的赋值运算符及含义如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>=</code></td>\n<td style=\"text-align:left\">简单的赋值运算符，将右操作数的值赋给左侧操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>+=</code></td>\n<td style=\"text-align:left\">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-=</code></td>\n<td style=\"text-align:left\">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>*=</code></td>\n<td style=\"text-align:left\">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/=</code></td>\n<td style=\"text-align:left\">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>％=</code></td>\n<td style=\"text-align:left\">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;&lt; =</code></td>\n<td style=\"text-align:left\">左移位赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;&gt;=</code></td>\n<td style=\"text-align:left\">右移位赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>＆=</code></td>\n<td style=\"text-align:left\">按位与赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>^=</code></td>\n<td style=\"text-align:left\">按位异或赋值操作符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>|=</code></td>\n<td style=\"text-align:left\">按位或赋值操作符</td>\n</tr>\n</tbody>\n</table>\n<p>以下是部分赋值运算符的示例以及运行结果：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 条件运算符（? :）</h2>\n<p>也叫作三元运算符，共有 3 个操作数，且需要判断布尔表达式的值，常用来取代某个 <code>if-else</code> 语句。其语法结构如下所示：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>以下是条件运算符的示例以及运行结果：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> instanceof</h2>\n<p>用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型），其语法结构如下。该知识点涉及到类与对象，此处就不做展开，等到后边学习类与对象之后，就能理解了。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 运算符优先级</h2>\n<p>运算符有很多，如果我们将多个运算符组合在一起，那它们又该先计算哪一个，然后再计算哪一个呢？其实就像我们日常排队一样，运算符也是有优先级的。\n常用运算符的优先级如下表所示，在我们使用时，如果涉及到一个表达式中含有多个运算符，一定要注意运算符的优先级。当然了，让我们背下来这些也是挺难的。不过不要紧，我们只需要学会灵活运用 <code>()</code> 就好了。我们可以利用 <code>()</code> 将需要先计算的表达式括起来，然后再去进行下一步的运算。</p>\n<table>\n<thead>\n<tr>\n<th>优先级</th>\n<th>运算符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><code>.</code>、<code>()</code>、<code>{}</code></td>\n</tr>\n<tr>\n<td>2</td>\n<td><code>!</code>、<code>~</code>、<code>++</code>、<code>--</code></td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>*</code>、<code>/</code>、<code>%</code></td>\n</tr>\n<tr>\n<td>4</td>\n<td><code>+</code>、<code>-</code></td>\n</tr>\n<tr>\n<td>5</td>\n<td><code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code></td>\n</tr>\n<tr>\n<td>6</td>\n<td><code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>instanceof</code></td>\n</tr>\n<tr>\n<td>7</td>\n<td><code>==</code>、<code>!=</code></td>\n</tr>\n<tr>\n<td>8</td>\n<td><code>&amp;</code></td>\n</tr>\n<tr>\n<td>9</td>\n<td><code>^</code></td>\n</tr>\n<tr>\n<td>10</td>\n<td><code>|</code></td>\n</tr>\n<tr>\n<td>11</td>\n<td><code>&amp;&amp;</code></td>\n</tr>\n<tr>\n<td>12</td>\n<td><code>||</code></td>\n</tr>\n<tr>\n<td>13</td>\n<td><code>?:</code></td>\n</tr>\n<tr>\n<td>14</td>\n<td><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>&amp;=</code></td>\n</tr>\n</tbody>\n</table>\n<h2> equals() 和 ==</h2>\n<ul>\n<li><code>==</code></li>\n</ul>\n<p>基本数据类型用 <code>==</code> 比较的是值，而 用于引用数据类型时判断两个对象的内存地址是否相等，即两对象是否是同一个对象；</p>\n<blockquote>\n<p>本质来讲，由于 Java 中只有值传递，所以不管是基本数据类型还是引用数据类型，比较的其实都是值，只不过引用类型变量存的值是对象的地址；</p>\n</blockquote>\n<ul>\n<li><code>equals()</code></li>\n</ul>\n<p>作用也是判断两个对象是否相等，但是 <strong>不能用于基本数据类型变量的比较</strong>。存在于 <code>Object()</code> 类中，所以所有类都具有 <code>equals()</code> 方法存在两种使用情况：</p>\n<ol>\n<li><strong>类未覆盖 <code>equals()</code> 方法</strong>：此时通过 <code>equals()</code> 比较该类的两个对象时，等价于 <code>==</code> 比较这两个对象，默认使用  <code>Object</code> 类中的 <code>equals()</code> 方法；</li>\n<li><strong>类覆盖了 <code>equals()</code> 方法</strong>：一旦覆盖了该方法，则用来比较两个对象的内容是否相等，如我们常用的 <code>String、BitSet、Data、File</code> 就覆盖了 <code>equals()</code> 方法；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 总结</h2>\n<p>好了，以上就是有关操作符系列的相关知识点了。老规矩，如果您觉得对您有所帮助，那就点个赞吧 🥳.</p>\n<p>对于文中所遗漏或者存在错误的知识点，也欢迎大家评论指正呀！</p>\n<p><strong>关注公众号，获取最新文章更新</strong></p>\n<div style=\"text-align:center\">\n<figure><img src=\"https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif\" alt=\"\" width=\"200\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n</div>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "流程控制",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220707-control-process.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220707-control-process.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 https://mp.weixin.qq.com/s/3WU5l37DpPkR6o7CnFiStA 前言 我们在 上一篇文章 (https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g) 中讲了各种操作符的使用技巧，接上一篇文章中的内容，本次文章主要将流程控...",
      "content_html": "<h1> 流程控制</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n<p>https://mp.weixin.qq.com/s/3WU5l37DpPkR6o7CnFiStA</p>\n</div>\n<h2> 前言</h2>\n<p>我们在 <a href=\"https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g\" target=\"_blank\" rel=\"noopener noreferrer\">上一篇文章</a> 中讲了各种操作符的使用技巧，接上一篇文章中的内容，本次文章主要将流程控制，文章主要内容安排如下：</p>\n<ul>\n<li><strong>输入输出</strong></li>\n<li><strong>顺序结构</strong></li>\n<li><strong>分支结构</strong></li>\n<li><strong>循环结构</strong></li>\n</ul>\n<h2> 输入输出</h2>\n<p>之前的学习中，我们会发现都是通过定义变量并赋初值的方式来得到一个实现固定好值得变量。加入我们现在不想再以这种方式获取变量值，而想要直接控制变量值，又该怎么做呢？这就涉及到 Java 中的输入输出相关知识了，以下就先来看看，如何实现从控制台输入，并从控制台输出吧。</p>\n<h3> 输入</h3>\n<p>先来看一个实例：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>要实现从控制台输入并读取到我们的程序中时，需要借助 <code>Scanner</code> 类，它属于标准输入流，其步骤总结如下：</p>\n<ol>\n<li>首先，需要导入 <code>Scanner</code> 类。即 <code>import java.util.Scanner</code>，其中 <code>import</code> 表示导入某个类，并且只能放在程序的开头。</li>\n<li>然后创建 <code>Scanner</code> 对象。这里需要注意，创建时需要传入 <code>System.in</code>，表示标准输入流，与之对应的 <code>System.out</code> 则代表标准输出流。</li>\n<li>最后就是读取用户输入即可。这里读取时，调用不同的方法 <code>Scanner</code> 会自动转换数据类型，不用我们去进行手动转换。</li>\n</ol>\n<p>从控制台获取不同类型的输入，其常用方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>boolean</code></td>\n<td><code>hasNext()</code></td>\n<td>如果还有输入，则返回 <code>true</code>，否则返回 <code>false</code></td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>next()</code></td>\n<td>返回输入的字符串，以空格为分隔符</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>nextLine()</code></td>\n<td>返回输入的字符串，以换行为分隔符</td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>nextInt()</code></td>\n<td>输入整型数</td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td><code>nextLong()</code></td>\n<td>输入长整型数</td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td><code>nextFloat()</code></td>\n<td>输入单精度数</td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td><code>nextDouble</code></td>\n<td>输入双精度数</td>\n</tr>\n</tbody>\n</table>\n<p>这里值得注意的是 <code>next()</code> 和 <code>nextLine</code> 两个方法，虽然他们的作用都是用于获取输入的 <code>String</code> 类型的内容，但是它们具体的处理机制又会有所区别。\n针对 <code>next()</code> 而言，它会自动消除有效字符前的空格，从而只返回输入的字符，得到的字符串都不会带有空格。也就是说，当使用 <code>next()</code> 时，如果遇到空格，此时就会停止录入，只录入空格前的内容，而空格后的内容则会保留到缓冲区。除了空格之外，<code>next()</code> 也会对制表符和换行符采用同样的处理方式。\n而对 <code>nextLine()</code> 来说，它会返回换行符之前的所有内容，甚至是带空格的字符串。</p>\n<p>因此，在使用时一定要注意它们之间的区别，合理搭配使用，从而得到自己想要的结果。</p>\n<h3> 输出</h3>\n<p>其实从一开始的 <code>hello world</code> 到目前的代码中，我们已经接触过输出了，也就是我们的 <code>System.out.println()</code>。</p>\n<p>其中 <code>println</code> 表示输出并换行，如果我们不想换行，则使用 <code>print</code> 就可以了。</p>\n<p>通过上述方式所输出的内容都是挤在一起的，十分不方便我们阅读。为了更加清晰的打印出我们所需要的结果，可以使用格式化输出。</p>\n<p>要使用格式化输出，需要使用 <code>System.out.printf()</code> 或者 <code>System.out.format()</code> 搭配占位符，然后在后面的参数格式化成指定格式即可，两者达成的效果是等价的。常见的占位符如下：</p>\n<table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>%d</code></td>\n<td>格式化输出整数</td>\n</tr>\n<tr>\n<td><code>%f</code></td>\n<td>格式化输出浮点数</td>\n</tr>\n<tr>\n<td><code>%s</code></td>\n<td>格式化输出字符串</td>\n</tr>\n<tr>\n<td><code>%x</code></td>\n<td>格式化输出十六进制整数</td>\n</tr>\n<tr>\n<td><code>%e</code></td>\n<td>格式化输出科学计数法表示的浮点数</td>\n</tr>\n</tbody>\n</table>\n<p>此外，我们还可以使用各种转义字符来使得我们的输出更为简洁，常见的转义字符及意义如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>转义字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\n</code></td>\n<td>换行</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>水平制表符</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>表示一个反斜杠</td>\n</tr>\n<tr>\n<td><code>\\'</code></td>\n<td>表示一个单引号</td>\n</tr>\n<tr>\n<td><code>\\\"</code></td>\n<td>表示一个双引号</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 顺序结构</h2>\n<figure><figcaption>顺序结构</figcaption></figure>\n<p>顺序结构如上图所示，它可以说是最简单的，只需要按照解决问题的顺序写出对应的语句即可，其执行顺序是自上而下，依次执行的。就类似于我们求解一道数学题，你得根据题意一步一步来，直至解出最后的答案。</p>\n<h2> 分支结构</h2>\n<p>\n上图是分支结构，顺序结构虽然能够处理计算、输出等问题，当遇到需要判断选择时，顺序结构已经不能很好的解决了，此时就需要使用分支结构。\nJava 中，分支结构相关的语句主要涉及到 <code>if</code> 和 <code>switch</code> 相关，下面就分别来看一下。</p>\n<h3> if</h3>\n<ol>\n<li><strong>单次判断</strong></li>\n</ol>\n<p>当我们只进行一次判断时，可以使用一个 <code>if</code> 语句包含一个条件表达式，其语法格式如下；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其执行逻辑如下图所示，如果条件表达式的值为 <code>true</code>，则执行 <code>if</code> 语句块中的执行语句，否则就执行 <code>if</code> 语句块后边的代码；</p>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li><strong>多次判断</strong></li>\n</ol>\n<p>要进行多次判断时，可以使用 <code>if…else</code> 的形式，其语法格式如下；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其执行逻辑如下图所示，如果条件表达式 1 为 <code>true</code>，则执行执行语句 1，否则接着判断条件表达式 2，若为 <code>true</code>，则执行执行语句 2，以此类推，直到完成最后一个条件表达式的判断。</p>\n<figure><figcaption></figcaption></figure>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> switch</h3>\n<p>当我们需要使用 <code>if</code> 进行判断时，难免显得有些繁琐。此时，我们就可以使用 <code>switch</code> 来进行替代，通过判断一个变量所属范围，从而划分出不同的分支。</p>\n<p><code>switch</code> 分支的语法格式如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>通过判断表达式的值，然后执行对应值下的执行语句，而 <code>default</code> 下的执行语句表示如果 <code>switch</code> 表达式未匹配到对应的值时所执行的语句；</p>\n<p>一个 <code>switch</code> 的实例如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>除了上面的形式之外，也可以使用以下形式：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>而在使用 <code>switch</code> 分支语法时，需要遵循一定的规则：</p>\n<ol>\n<li><code>switch</code> 中的变量类型可以是：<code>byte</code>、<code>short</code>、<code>int</code>、<code>char</code>、<code>String</code> （自 JDK 1.7 开始）；</li>\n<li><code>switch</code> 语句根据表达式的结果跳转到对应的 <code>case</code> 结果，然后执行其后跟着的语句，直到遇到 <code>break</code> 才结束执行；</li>\n<li>默认情况下，一般都会跟着一个 <code>default</code> 的分支，用于未匹配到对应情况时的执行情况；</li>\n</ol>\n<h2> 循环结构</h2>\n<p>\n上图为循环结构示意，让程序中遇到需要反复执行某一个功能时，我们发现顺序结构以及分支结构实现起来都太过于繁琐，于是又提出了循环结构的相关概念。\n通过循环结构，我们就可以通过判断循环语句，然后判断是否进入循环体。Java 中，循环结构主要涉及的语句有 <code>while</code>、<code>for</code>、<code>continue</code>、<code>break</code> 等。</p>\n<h3> while</h3>\n<p>假设我们现在有一个题目，需要你计算 <code>1 + 2 + 3 + …… + 50</code> 的结果，你会怎么办呢？</p>\n<p>这么写么：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这么写就太麻烦了，计算到 50 的值就已经很多了，假如有 1000,10000 甚至更大，那我们岂不是写个好久才能写完。这个时候我们就得找找有没有简单的方法，能够只写几句就实现相同的效果呢？答案是：Yes，这就是我们这一小节将要讲到的循环。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>从上面的实例，利用 <code>while</code> 循环，我们就能轻易达成循环的效果。其语法格式如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>只要表达式为 <code>true</code>，就会不断循环执行其中的执行语句，直到表达式为 <code>false</code>，此时便跳出循环，不再执行其中的执行语句。</p>\n<p>除开上面的形式之外，还有另一种 <code>while</code> 形式：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>两者的最大区别在于：<code>do……while</code> 无论 <code>表达式</code> 是否为 <code>true</code>，都至少会执行一次。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>观察以上两个实例，在 <code>while</code> 程序中，我们定义 <code>num = 10</code>，然后假设 <code>num &lt;= 9</code> 时就进入循环体，而 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10</mn><mo>&gt;</mo><mn>9</mn></mrow><annotation encoding=\"application/x-tex\">10 &gt; 9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">10</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">9</span></span></span></span>，所以不进入循环体，直接打印 <code>sum</code> 的值为 <code>0</code>。而在 <code>do…while</code> 程序中，我们同样定义 <code>num = 10</code>，然后假设 <code>num &lt; 10</code> 时继续循环，很明显不满足该情况，理应跳出循环，打印出 <code>sum</code> 的值为 <code>10</code>，说明此时还是进行了一次循环。</p>\n<p>因此，当我们需要在 <code>while</code> 和 <code>do……while</code> 之间做出选择时，如果我们最少需要进行一次循环，则选择 <code>do……while</code>，其他情况下选用两者都可以。</p>\n<h3> for</h3>\n<ul>\n<li><strong>普通 for 循环</strong></li>\n</ul>\n<p>除开 <code>while</code> 和 <code>do……while</code> 之外，我们还有 <code>for</code> 循环来达成同样的结果，只是表达方法不一样。同样以上面计算 <code>1 + 2 + …… + 50</code> 为例，可以写成如下的形式：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p><code>for</code> 循环的语法形式如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>for</code> 循环的执行步骤如下：</p>\n<ol>\n<li>首先执行初始条件，可以声明一种类型，但可以初始化一个或多个循环控制变量，甚至可以放空。</li>\n<li>接着判断终止条件，如果为 <code>true</code>，则进入循环体执行循环语句；如果为 <code>false</code>，则终止循环，执行循环体后面的语句。</li>\n<li>一次循环完成后，执行更新语句来更新循环控制变量。</li>\n<li>最后再次判断终止条件，循环以上三个步骤。</li>\n</ol>\n<p><code>for</code> 和 <code>while</code> 最大的区别就在于 <code>for</code> 循环一般都是事先知道需要循环的次数的，而 <code>while</code> 循环则不需要。</p>\n<ul>\n<li><strong>增强 for 循环</strong></li>\n</ul>\n<p>自 Java 5 后，引入了一种增强型 <code>for</code> 循环，主要用于数字遍历，其语法格式如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>其中，声明语句一般是声明一个同数组数据类型相同的局部变量，而表达式则是要访问的数组名或者返回值是数组的方法。</p>\n<h3> for 和 while 的区别</h3>\n<p>经过上面的学习，我们可以发现，基本能用 <code>for</code> 循环的，都能将其改写成 <code>while</code> 循环。而使用 <code>while</code> 循环的，也可以在一定程度上改写成 <code>for</code> 循环。两者的运行规则都是一样的，那针对什么场景该使用 <code>for</code>，什么场景又该使用 <code>while</code> 呢？</p>\n<p>通常，如果我们知道循环的次数或者循环的范围，那么我们优先使用 <code>for</code> 循环。如果不知道循环的次数和范围，而只知道循环的结束条件，那么此时优先使用 <code>while</code> 循环。</p>\n<h3> continue &amp; break</h3>\n<h3> break</h3>\n<p>主要用在循环语句或者 <code>switch</code> 语句中，表示跳出最里层的循环，然后继续执行该循环下的语句。</p>\n<p><code>break</code> 在 <code>switch</code> 语句中的用法已经见识过了，我们就来看看它在循环中的应用。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>观察结果可知，当 <code>i == 5</code> 时，我们执行了 <code>break</code> 语句，此时就直接跳出了 <code>for</code> 循环，而不再进行下一次的循环。</p>\n<h3> continue</h3>\n<p><code>continue</code> 也同样是应用在循环控制结构中，主要是让程序跳出当次循环，进而进入下一次循环的迭代。</p>\n<p>在 <code>for</code> 循环中，执行 <code>continue</code> 语句后，直接跳转到更新语句，而不再执行 <code>continue</code> 后的语句。而在 <code>while</code> 或 <code>do……while</code> 循环中，执行 <code>continue</code> 语句后，直接跳转到表达式的判断。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>观察上述结果可知，当 <code>i == 5</code> 时，我们执行了 <code>continue</code> 语句，此时便跳出了当次循环，不再进行后边的打印语句，然后继续下一次的循环，所以最终打印的结果没有 5.</p>\n<h2> 总结</h2>\n<p>今天的内容到此就结束了，老规矩，如果大家觉得有用的话，就给个点赞关注吧！</p>\n<p>其次就是对于文中遗漏或者存在欠缺的知识点，还请大家不吝赐教，在评论区指出来！</p>\n<p><strong>关注公众号，获取最新文章更新</strong></p>\n<div style=\"text-align:center\">\n<figure><img src=\"https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif\" alt=\"\" width=\"200\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n</div>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "数组操作的奇技淫巧",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220708-how-to-operate-array.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220708-how-to-operate-array.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 https://mp.weixin.qq.com/s/2Ff14d3cwjVflhtz67k3vQ 前言 前边已经讲过了 Java 中的 8 大基本数据类型，这篇文章主要就来讲讲引用类型中的数组。主要内容安排如下： 数组简介; 遍历; 排序; 常用方法; 数组简介 所谓数组，其实就是多个相同数据类型...",
      "content_html": "<h1> 数组操作的奇技淫巧</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n<p>https://mp.weixin.qq.com/s/2Ff14d3cwjVflhtz67k3vQ</p>\n</div>\n<h2> 前言</h2>\n<p>前边已经讲过了 Java 中的 8 大基本数据类型，这篇文章主要就来讲讲引用类型中的数组。主要内容安排如下：</p>\n<ul>\n<li><strong>数组简介</strong></li>\n<li><strong>遍历</strong></li>\n<li><strong>排序</strong></li>\n<li><strong>常用方法</strong></li>\n</ul>\n<h2> 数组简介</h2>\n<p>所谓数组，其实就是多个相同数据类型的元素按一定顺序排列而成的集合。即将有限个类型相同的变量放到一个容器中，然后按照编号去访问各个元素，而这个容器的名字就叫做数组名，各个元素的编号就叫做索引位置。而其中索引位置是从 <code>0</code> 开始计数，而不是我们日常所习惯的 <code>1</code>。</p>\n<p>要定义一个数组类型的遍历，其语法为 <code>数据类型 []</code>，比如 <code>int[]</code>，而且在初始化时必须指定数组大小，如 <code>int[] arr = new int[10]</code>，表示 <code>arr</code> 数组可以容纳 <code>10</code> 个 <code>int</code> 类型的元素。</p>\n<p>数组的特点：</p>\n<ul>\n<li>数组中的元素初始化时都是有默认值的，整型对应 <code>0</code>，浮点型对应 <code>0.0</code>，而布尔型对应 <code>false</code>。</li>\n<li>数组一经创建，其大小（长度）就不可再变。</li>\n<li>要访问数组中的某一元素，需要用到索引，索引从 <code>0</code> 开始。</li>\n<li>如果要修改数组中的某一元素，直接对对应索引位置的元素使用赋值语句即可。</li>\n</ul>\n<p>和变量一样，既然定义了，那么就要对数组进行初始化。所谓数组的初始化，指的是在内存中，为数组容器开辟空间，然后将数据存入容器中的过程。而常用的初始化方式主要有两种：</p>\n<ul>\n<li><strong>静态初始化</strong></li>\n<li><strong>动态初始化</strong></li>\n</ul>\n<h3> 一维数组</h3>\n<h4> 初始化</h4>\n<ol>\n<li><strong>静态初始化</strong></li>\n</ol>\n<p>所谓静态初始化，就是在定义数组的同时将其初始化。</p>\n<p>静态初始化的完整格式如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>但在开发时，为了方便，也可以对上面的代码进行简写：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>两种方式最终得到的结果是一样的，但第二种更加简洁方便。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>动态初始化</strong></li>\n</ol>\n<p>动态初始化，就是先声明数组长度定义之后，再由系统对其分配初始值。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>PS：注意数组的索引位置不能超过数组的长度，如上面例子中的数组长度为 <code>5</code>，所以我们数组的索引位置最大只能为 <code>4</code>，否则就会报数组越界错误。</p>\n<h4> 求数组长度</h4>\n<p>求数组的长度，利用数组的 <code>length</code> 属性即可；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 二维数组</h3>\n<h4> 初始化</h4>\n<ol>\n<li><strong>静态初始化</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>动态初始化</strong></li>\n</ol>\n<p>二维数组动态声明时，一种是把行和列的长度都指定，而另一种是只需要指定行的长度，不用指定列的长度，列的长度会在初始化时自动确认。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 求数组长度</h4>\n<p>不同于一维数组，因为二维数组有行和列，所需求长度时需要分别求。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 静态初始化和动态初始化的区别</h3>\n<p>上面分别对一维数组和二维数组进行了静态初始化和动态初始化，通过比较总结出两者的区别如下：</p>\n<p><strong>动态初始化</strong>：手动指定数组长度，然后由系统给出默认初始化值。</p>\n<p><strong>静态初始化</strong>：手动指定数组元素，然后系统会根据元素个数计算出数组长度。</p>\n<h2> 数组遍历</h2>\n<p>既然我们已经学会了数组的声明及初始化，接下来就是对数组进行操作，而最常见的则是遍历数组。所谓遍历，就是将数组中的所有元素取出来，然后操作这些取出来的元素。</p>\n<p>假设我们有一个数组如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 标准 for 循环</h3>\n<p>首先，我们来使用标准的 <code>for</code> 循环来遍历该数组，只需要通过数组的索引位置来访问即可。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 增强 for 循环</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p><strong>两者的区别</strong>：标准 <code>for</code> 循环是通过计数器来进行遍历，我们能够很清晰的得知每个元素所对应的索引位置，而增强 <code>for each</code> 循环则是直接访问数组中的元素值，而不关心每个元素对应的索引位置。</p>\n<h3> 标准库遍历</h3>\n<p>通过调用标准库 <code>Arrays</code> 中的 <code>toString()</code> 方法，我们可以将任意类型的数组转换为一个字符串表示形式，从而打印出来。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>以上的遍历主要是针对一维数组，而针对二维数组，当我们要访问其中的一个元素时，可以使用 <code>array[row][col]</code> 来进行访问，而对于二维及更多维的数组，可以使用 <code>Arrays.deepToString()</code>。</p>\n<h2> 数组排序</h2>\n<h3> 使用排序算法</h3>\n<p>排序算法多样，最常用的则有 <strong>冒泡排序、插入排序、快速排序等</strong>，进行排序时会修改数组本身；</p>\n<p>冒泡排序：经过一轮循环，将最大的数置换到末尾，然后进入下一轮循环，每轮均比上一轮的结束位置靠前一位；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 标准库排序</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 常用方法</h2>\n<p>对于数组而言，Java 标准库中已经内置了许多方法，常用的有如下一些方法：</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>static String</code></td>\n<td><code>toString(Object[] a)</code></td>\n<td>输出数组的字符串形式</td>\n</tr>\n<tr>\n<td><code>static &lt;T&gt; List&lt;T&gt;</code></td>\n<td><code>asList(T…… a)</code></td>\n<td>数组转 <code>List</code></td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 总结</h2>\n<p>数组相关的内容就到此结束了，主要从 4 个方面简单介绍了数组的一些相关用法，如果你有更多想要了解的内容，欢迎评论区留言交流。最后，都看到这儿了，不给个赞和关注再走么 🤔.</p>\n<p><strong>关注公众号，获取最新文章更新</strong></p>\n<div style=\"text-align:center\">\n<figure><img src=\"https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif\" alt=\"\" width=\"200\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n</div>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "面向对象的 3、5 知识点",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220709-oop-1.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220709-oop-1.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 https://mp.weixin.qq.com/s/Z4F7tsjLkPbTGy4_gJPQTw 前言 前面已经讲了 Java 的一些环境搭建、IDE 使用、变量及数据类型、操作符、控制流程以及数组操作，今天就来看看 Java 里边的一个核心思想 - 面向对象编程。 什么是面向对象？ 所谓面向对象...",
      "content_html": "<h1> 面向对象的 3、5 知识点</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n<p>https://mp.weixin.qq.com/s/Z4F7tsjLkPbTGy4_gJPQTw</p>\n</div>\n<h2> 前言</h2>\n<p>前面已经讲了 Java 的一些环境搭建、IDE 使用、变量及数据类型、操作符、控制流程以及数组操作，今天就来看看 Java 里边的一个核心思想 - <strong>面向对象编程</strong>。</p>\n<h2> 什么是面向对象？</h2>\n<p>所谓面向对象，是一种通过对象的方式，将现实中的事物映射到计算机模型的一种编程方法。</p>\n<p>对象的含义指的是具体的某一个事物，即我们在现实生活中能够看得见摸得着的。在面向对象程序设计中，对象指的是计算机系统中的某一个成分，主要有两层含义。一个是指 <strong>数据</strong>，另一个则是 <strong>动作</strong>。即对象是两者的结合体，通过对象不仅能够进行操作，还能对操作的结果进行记录。</p>\n<p>在这之前，另一种编程方式是 <strong>面向过程</strong>，用一个具体的例子来讲，可以描述成下面这样：</p>\n<blockquote>\n<p>假如有一天你很想吃酸菜鱼，那么你该怎么办呢？下面就以面向对象和面向过程给你两个选择，让你决定来选哪一个！</p>\n<ol>\n<li><strong>面向对象</strong>：打开手机，打开外卖软件，搜索酸菜鱼，然后下单，等着外卖送到家就行！</li>\n<li><strong>面向过程</strong>：先去买菜，鱼、酸菜、调料……，然后回家杀鱼、切酸菜、切调料……，再接着开始炒，最后做好盛到盘子里！</li>\n</ol>\n</blockquote>\n<p>对比可以发现两者的优缺点：</p>\n<ul>\n<li><strong>面向过程</strong>\n<ul>\n<li><strong>优点</strong>：性能好；以例子来说自己做比起点外卖，经济又实惠，还吃得放心。</li>\n<li><strong>缺点</strong>：不易维护、不易复用、不易扩展；以例子来讲，要是我们自己做，临时又想吃其他的菜，又得跑去买材料啥的，麻烦！但外卖就不一样了，直接打开手机再点就是。</li>\n</ul>\n</li>\n<li><strong>面向对象</strong>\n<ul>\n<li><strong>优点</strong>：易维护、易复用、易扩展，也就是面向过程的缺点。</li>\n<li><strong>缺点</strong>：性能较差；比起自己做，点外卖成本啥的可能就比较高了。</li>\n</ul>\n</li>\n</ul>\n<h2> 面向对象的 5 大原则</h2>\n<ol>\n<li><strong>单一职责原则 SRP</strong></li>\n</ol>\n<p>又称为单一功能原则，它规定了一个类应该只有一个发生变化的原因。也就是说类的功能要单一，不能太复杂。</p>\n<p>举个例子来说，学校里边有学生、老师、管理员，如果将这些人统一封装在一个类中，那么到时候难以对他们的身份作区分，那么此时按照 SRP 原则，我们就可以将他们各自分为一个类，从而方便管理。</p>\n<ol start=\"2\">\n<li><strong>开放封闭原则 OCP</strong></li>\n</ol>\n<p>指一个模块对于扩展是开放的，但对于修改则是封闭的。也就是说可以增加功能，但是不能修改功能。</p>\n<p>也就是说，一个类可以进行扩展（添加属性或者方法），但是对于类中已有的属性和方法，不要修改它们。</p>\n<ol start=\"3\">\n<li><strong>里氏替换原则 LSP</strong></li>\n</ol>\n<p>指子类能够替换父类出现在父类能够出现的任何地方。</p>\n<p>假设有两个类 <code>Father</code> 和 <code>Child</code>，其中 <code>Father</code> 是 <code>Child</code> 的父类，那么在进行调用时，<code>Father</code> 类可以引用 <code>Child</code> 类，反之却不行。</p>\n<ol start=\"4\">\n<li><strong>依赖倒置原则 DIP</strong></li>\n</ol>\n<p>高层次的模块不应该依赖于低层次的模块，而应该都依赖于抽象。抽象不应该依赖于具体实现，但具体实现应该依赖于抽象。</p>\n<p>也就是说，我们可以将同类事物的共性抽取出来，将其作为这一类事物的“高层次模块”，然后由“低层次模块”来继承或者实现“高层次模块”。</p>\n<ol start=\"5\">\n<li><strong>接口分离原则 ISP</strong></li>\n</ol>\n<p>指设计时可以采用多个与特定客户类相关的接口，而不是采用一个通用的接口。</p>\n<h2> 面向对象的 3 大特性</h2>\n<h3> 封装</h3>\n<p>利用抽象数据类型把数据和方法封装在一起，然后共同构成一个相互关联的对象。从而隐藏对象的属性和实现细节，只对外提供访问的接口，提高代码的复用性和安全性。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>对于以上的 <code>Hero</code> 类，它封装了 <code>name</code> 、<code>skill</code> 等属性，如果我们想要获取 <code>Hero</code> 的 <code>name</code> 和 <code>skill</code> 属性值，那么就只能通过 <code>get()</code> 方法来获取，而如果我们想要改变这两个属性值，也只能通过 <code>set()</code> 方法来进行设置。</p>\n<p>封装时，需要注意其原则，对象代码表什么，就封装对应的数据，并提供数据所对应的行为。</p>\n<h3> 继承</h3>\n<p>定义父类之后，子类可以从基础类进行继承，这样一来，子类就可以获得父类中非 <code>private</code> 的属性和方法，从而提高了代码的复用性。</p>\n<p>继承实现了 <code>IS-A</code> 关系，假设我们现在有一个类 <code>Shooter</code> 继承自 <code>Hero</code>，那么此时我们就可以定义一个父类引用，然后将该引用指向它的子类对象。</p>\n<p><code>Java</code> 中提供了一个关键字 <code>extends</code>，从而让一个类和另一个类建立起继承关系，其格式如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中，被继承的类叫做父类（也叫超类或基类），如上述代码中的 <code>Hero</code>，另外一个类则叫做子类（也叫派生类），比如上面的 <code>Shooter</code>。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>但是要注意一点：<strong>在 Java 中，类只能单继承</strong>。</p>\n<h3> 多态</h3>\n<p>所谓多态，就是同类型的对象，表现出的不同形态，表现形式为：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>指的是父类或者接口定义的引用变量可以指向子类或具体实现类的实例对象，提高程序的扩展性。</p>\n<p>多态又可以分为编译时多态和运行时多态，其中，编译时多态是指方法的重载，而运行时多态则指的是程序中定义的对象引用所指向的具体类型在运行期间才能确定下来。</p>\n<p>要确定一个多态是编译时还是运行时多态，可以通过以下三个条件来区分：</p>\n<ul>\n<li><strong>继承</strong></li>\n<li><strong>覆盖（重写）</strong></li>\n<li><strong>向上转型</strong></li>\n</ul>\n<p>如果同时满足以上三个条件，那么此时多态是运行时多态。</p>\n<p>多态中，调用成员变量和成员方法时，遵循以下原则。</p>\n<ol>\n<li><strong>调用成员变量：编译看左边，运行也看左边</strong>：指 <code>javac</code>  编译时，会看左边的父类中是否有该变量，如果有则编译成功，如果没有就会编译失败。而用 <code>java</code>  运行代码时，实际获取的成员变量是父类中的值。</li>\n<li><strong>调用成员方法：编译看左边，运行看右边</strong>：指 <code>javac</code> 编译时，会看左边的父类中是否有该方法，如果有则编译成功，如果没有就会编译失败。而用 <code>java</code> 运行代码时，实际调用的是子类中的方法。</li>\n</ol>\n<h2> 总结</h2>\n<p>以上就是关于面向对象编程思想的一些简单知识介绍了，主要讲了面向对象的概念，面向对象的 3 大特性以及面向对象的 5 大原则。如果觉得本文对你有所帮助，那就来个一键三连再走吧！</p>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "image": "https://zzdxy.github.io/zzdxy/zzdxy/contact/wechatpublic.svg =150x",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "类的相关知识",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220710-oop-2.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220710-oop-2.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 https://mp.weixin.qq.com/s/1BPFnyNuC3fdYBVxP7J3VA 前言 学习了面向对象编程的思想，今天就来看看面向对象编程思想在 Java 中的体现 - 类。以及有关类的相关知识，比如属性、方法、引用等。 类与对象 以我们日常生活为例，我们现在很多人都养宠物，而宠物...",
      "content_html": "<h1> 类的相关知识</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n<p>https://mp.weixin.qq.com/s/1BPFnyNuC3fdYBVxP7J3VA</p>\n</div>\n<h2> 前言</h2>\n<p>学习了面向对象编程的思想，今天就来看看面向对象编程思想在 Java 中的体现 - 类。以及有关类的相关知识，比如属性、方法、引用等。</p>\n<h2> 类与对象</h2>\n<p>以我们日常生活为例，我们现在很多人都养宠物，而宠物 <strong>都有一些共同状态</strong>，比如名字、毛色、年龄…… 这样一来我们就可以设计一个叫做<strong>类</strong>的东西，用来 <strong>代表宠物</strong> 这一类事物。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>有了这个类之后，它就相当于我们的一个模板，根据这个模板我们就能够创建一个个具体的宠物，而这些宠物，就叫做 <strong>对象</strong>。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>总结起来，类就是对对象所共有特征的描述，而对象则是真实存在的具体实例。在 Java 中，必须先设计类，然后才能创建并使用对象。</p>\n<h2> 属性</h2>\n<p>每个宠物都有自己的名字、毛色和年龄等一系列状态，而这些状态就叫做一个类的<strong>属性</strong>。而属性的类型既可以是基本类型（比如上述例子中的 <code>int</code>），也可以是引用类型（上述例子中的 <code>String</code>）。而在 Java 语言中，这些属性就叫做成员变量。成员变量的命名虽然没有强制规定，但是一般都是有一套大家通用的命名方法，即：</p>\n<blockquote>\n<p>若成员变量是一个单词组成，那么一般都是小写。</p>\n<p>若成员变量是多个单词组成，那么则采用驼峰法。</p>\n<p>关于更多的命名规定，推荐参考阿里巴巴出品的 《Java 开发手册》，下载地址：https://github.com/cunyu1943/ebooks</p>\n</blockquote>\n<p>成员变量的完整定义格式语如下，一般来说无需指定初始化值，它是存在默认值的。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>明细</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>基本类型</td>\n<td><code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code>、<code>long</code></td>\n<td>0</td>\n</tr>\n<tr>\n<td>基本类型</td>\n<td><code>float</code>、<code>double</code></td>\n<td>0.0</td>\n</tr>\n<tr>\n<td>基本类型</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>引用类型</td>\n<td>类、接口、数组、<code>String</code></td>\n<td><code>null</code></td>\n</tr>\n</tbody>\n</table>\n<p>要访问属性，通常需要先创建一个对象，然后通过<strong>对象名.成员变量</strong>的方式来进行访问。</p>\n<h2> 方法</h2>\n<h3> 方法的定义</h3>\n<p>而除开属性之后，每个对象还能够有许多其他的功能，就像宠物都能吃东西、会叫……，那么这些他们能够做的事情，在类里边就可以用 <strong>方法</strong> 来进行表示。所谓方法就是程序中最小的执行单元，一般用于封装重复且具有独立功能的代码，从而提高代码的复用性和可维护性。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>方法的定义格式如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中，修饰符主要有以下 4 种不同的访问权限：</p>\n<ol>\n<li><code>default</code>：默认什么都不写的情况，表示在同一个包内可见，主要用于修饰类、接口、变量、方法。</li>\n<li><code>private</code>：表示在同一类中可见，常用于修饰变量和方法，但要注意，它不能用来修饰类（外部类）。</li>\n<li><code>protected</code>：表示对同一个包内的类和所有子类可见，常用于修饰变量、方法，同样的，它也不能修饰类（外部类）。</li>\n<li><code>public</code>：表示对所有类可见，常用于修饰类、接口、变量、方法。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>当前类</th>\n<th>同一包内</th>\n<th>子类（同一包）</th>\n<th>子类（不同包）</th>\n<th>其他包</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>private</code></td>\n<td>✅</td>\n<td>❎</td>\n<td>❎</td>\n<td>❎</td>\n<td>❎</td>\n</tr>\n<tr>\n<td><code>default</code></td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>❎</td>\n<td>❎</td>\n</tr>\n<tr>\n<td><code>protected</code></td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>❎</td>\n</tr>\n<tr>\n<td><code>public</code></td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n</tbody>\n</table>\n<p>同样的，和属性一样，如果要调用一个方法，那么也需要先创建一个 Java 对象，然后通过**对象名.方法名(……)**的形式调用。</p>\n<h3> 方法的分类</h3>\n<p>而对于方法，也有需要注意的几点：</p>\n<ol>\n<li>方法是可以有返回值的，如果要返回对应值，则其返回值的类型要与返回值相对于，对于不需要返回值的方法，则将其返回类型设置为 <code>void</code>；</li>\n<li>方法是可以有参数的，我们上述例子的方法中都是不带参数的，但如果我们有需要，就可以加上自己需要的参数，但此时注意要带上参数的类型；</li>\n</ol>\n<p>总结起来，可以分为如下四种方法：</p>\n<ol>\n<li><strong>无参无返回值</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>无参有返回值</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li><strong>有参无返回值</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li><strong>有参有返回值</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>而对于方法命名的方式，也是有一定讲究的。因为一般而言方法都是一个类的动作行为，所以 <strong>一般都是以动词开头，而如果有多个单词组合，则除开第一个单词全部小写之外，后面每个单词的第一个字母都要使用大写</strong>。</p>\n<p>注意到这里有个关键字 <code>return</code>，它主要用于设置方法的返回。</p>\n<p>如果一个方法没有返回值，那么此时可以省略不写，一旦书写，那么就代表着该方法结束。比如，以下这个方法的两种书写方式最终效果都是一样的。</p>\n<ul>\n<li>带 <code>return</code></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不带 <code>return</code></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>而如果一个方法有返回值，那么此时 <code>return</code> 就必须写，它表示结束方法并返回结果。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 重写与重载</h3>\n<p>此外，既然提到了方法，那肯定少不了重写和重载了，下面就来看看重写和重载之间的区别。</p>\n<ol>\n<li><strong>重写</strong></li>\n</ol>\n<p>所谓重写，其实就是子类对父类中允许访问的方法的实现过程进行加工重新编写，是面向对象编程中多态性的体现，通常发生在父类和子类之间。</p>\n<p>重写时，方法的参数和返回值都不能改变。通过重写，子类可以根据自己的需要，从而去重新定义区别于父类的行为。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>重载</strong></li>\n</ol>\n<p>而重载则是让类以统一的方式来处理不同类型数据的一种方式。一个类中存在多个同名方法，但他们具有不同的参数个数或者类型。</p>\n<p>简单来说，就是在 Java 的一个类中，我们可以创建多个相同名字的方法，但是这些方法之间的参数和返回值有所不同。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 参数传递机制</h3>\n<p>了解参数传递前，先来了解下形参和实参的相关概念。</p>\n<p><strong>实参</strong>，指在调用时所传递给方法的参数，可以是常量、变量、表达式、函数等。无论实参是何种类型的值，在进行方法调用时，都必须有确定的值，从而将这些值传递给形参。</p>\n<p><strong>形参</strong>，在方法定义时，<code>()</code> 中所声明的参数，目的是用来接收调用方法时传入的参数。不是实际存在的变量，所以又叫做虚拟变量。</p>\n<p>Java 中，方法的参数传递都是通过<strong>值传递</strong>的机制来实现的。所谓值传递，就是在传输实参给方法的形参时，并非传输的是实参变量本身，而是通过传输实参变量中所存储的值。</p>\n<p>但是要注意区分的是，Java 中的<strong>基本数据类型的参数传输的是存储的数据值</strong>，而<strong>引用类型的参数传输的是存储的地址值</strong>。</p>\n<h2> 构造方法</h2>\n<p>上面我们说了实例（也就是对象）和属性，那么当我们创建一个实例的时候，通常我们想要把它的属性也给它设置好。为了实现这一功能，这时候我们可以添加方法，从而达到这一目的，以上述设置宠物的年龄为例。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>可以发现通过上述调用方法的方式是可以完成这一目的的，但假设我们需要设置的属性很多，此时要全部设置属性值时就需要调用许多次 <code>setter</code> 方法，一旦遗漏一个，则实例内部状态就紊乱了。那我们就想了，有没有一种简单点的方法，能够让我们在创建实例对象的同时就把内部属性初始化了呢？</p>\n<p>答案是：Yes！🎉🎉🎉</p>\n<p>这时候我们就可以用到一类特殊的方法 - <strong>构造方法</strong>，所谓构造方法，就是定义在类中可以用来初始化一个类的对象，并返回对象的地址，以下就来看看这个构造方法的特殊之处。构造方法的格式如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其实在上面我们创建实例的时候就已经调用了构造方法了，只不过它是没有带任何参数的构造方法。以上述动物类 <code>Pet</code> 为实例，我们来看看如何编写它的构造方法。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以上我们只是给出了无参的构造方法和带了所有属性的构造方法，除了上面的两个构造方法之外，我们还可以根据需要创建带有部分属性的构造方法。</p>\n<p>其中，无参构造方法（默认存在）在初始化对象时，成员变量的数据均采用的默认值，而有参构造方法在初始化对象时，同时可以接收参数来给对象赋值。</p>\n<p>经过对比可以发现，相比于普通的方法，构造方法有着明显的特点：</p>\n<ol>\n<li><strong>没有返回值</strong>：是的，无论是带参还是不带参的构造函数，它们都是没有返回值的，而它也是 <strong>每个类默认的构造方法</strong>。</li>\n<li><strong>方法名同类名一样</strong>：必须确保构造方法的名字和类名一致，否则它就不是构造方法了。</li>\n</ol>\n<p>有了构造方法之后，我们创建实例时就可以直接给它初始化了，而不用再去麻烦地调用各个 <code>setter</code> 方法来初始化实例。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>🎈 Tips：对于实例的属性值，在未经构造方法初始化时，各数据类型都有默认值，整型默认值为 <code>0</code>，浮点型默认值为 <code>0.0</code>，布尔类型默认值为 <code>false</code>，引用类型默认值为 <code>null</code>。</p>\n<h2> 引用</h2>\n<p>既然知道了什么是面向对象以及面向对象中的一些关键知识点如对象、属性、方法的概念，那我们就趁热来看看啥是引用。</p>\n<p>所谓引用，其实在之前学习的时候就已经涉及到了。你是否还记得 <code>String</code> 这个特殊的数据类型，其实在我们创建一个 <code>String</code> 对象时，也就创建了一个引用。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>其中 <code>str</code> 既是一个变量，也是一个引用，指向一个值为 <code>\"村雨遥\"</code> 的 <code>String</code> 对象，后续如果我们要访问这个 <code>String</code> 对象，就需要使用 <code>str</code> 这个引用来代表它。</p>\n<figure><figcaption></figcaption></figure>\n<p>以上我们说的是一个引用指向一个对象，但是我们也可以用多个引用指向同一个对象。就好比你家买了一辆车，不仅你可以开，你老婆也可以开，你爸妈也可以开。而这时候的车就好比一个“对象”，而使用它的人就是多个“引用”。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> JavaBean</h2>\n<p><code>JavaBean</code> 也可以称为实体类，其对象可以用在程序中封装数据。对于一个标准的 <code>JavaBean</code>，定义时需要满足以下要求：</p>\n<ul>\n<li>成员变量均使用 <code>private</code> 修饰。</li>\n<li>提供成员变量所对应的 <code>getXxx()/setXxx()</code> 方法。</li>\n<li>必须提供一个标准的无参构造器，而有参构造器则是可写可不写。</li>\n</ul>\n<h2> 总结</h2>\n<p>今天的内容就到此结束了，主要对面向对象中的类、对象、属性、方法、构造方法以及引用做了介绍，关于更多面向对象的知识，我们下一篇文章再见！</p>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "包和 jar 文件的创建",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220711-oop-3.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220711-oop-3.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 https://mp.weixin.qq.com/s/l4O4bhDMgHamQ5DVPcqUYA 前言 在之前的文章中，讲到了面向的 3 大特性（封装、继承、多态）和面向对象设计的 5 大原则（SRP、OCP、LSP、DIP、ISP）。此外，我们还讲了如何创建一个类，并且在创建类后如何构造一个对象...",
      "content_html": "<h1> 包和 jar 文件的创建</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n<p>https://mp.weixin.qq.com/s/l4O4bhDMgHamQ5DVPcqUYA</p>\n</div>\n<h2> 前言</h2>\n<p>在之前的文章中，讲到了面向的 3 大特性（<strong>封装、继承、多态</strong>）和面向对象设计的 5 大原则（SRP、OCP、LSP、DIP、ISP）。此外，我们还讲了如何创建一个类，并且在创建类后如何构造一个对象。然后还介绍了类中的属性和方法，并对构造方法和引用也做了简单的讲解。</p>\n<p>有了上面的基础之后，今天我们来继续学习面向对象的相关知识，主要内容预告如下：</p>\n<ul>\n<li><strong>包</strong></li>\n<li><strong>注释</strong></li>\n<li><strong>jar 文件的创建</strong></li>\n</ul>\n<h2> 包</h2>\n<p>假设现在有这么一种情况，诸葛亮、周瑜、曹操共同开发一款程序。其中，周瑜和曹操均在自己代码模块中写了一个 <code>PublicUtil</code> 类，现在诸葛亮要调用周瑜和曹操模块中代码，需要同时用到他们中的 <code>PublicUtil</code> 类，这时候就犯难了，诸葛亮在他的代码中使用 <code>PublicUtil</code> 类时，该怎么区分是调用周瑜的，还是调用的曹操的呢？</p>\n<p>针对这个问题，开发 Java 的前辈们当然也想到了。于是，他们在 Java 中定义了一种名字空间，也就是我们今天要讲的包：<code>package</code>。通过使用包机制，就十分容易区别类名的命名空间了。</p>\n<p>一般包名的规则为：公司域名反写 + 包的作用，而且全部都要用英文小写。</p>\n<p>假设曹操的 <code>PublicUtil</code> 类代码如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>周瑜的 <code>PublicUtil</code> 类代码如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>此时，如果诸葛亮要同时使用他们俩代码中的 <code>PublicUtil</code> 类，此时就可以通过引入他们俩的包，然后通过使用 <code>包名.类名</code> 的引用方式来进行区分即可。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以上代码中的 <code>import</code> 你可能也在其他代码中见到过，但你不知道啥作用。其实它就是为了包的使用而生，如果我要使用另一个人的包，那该怎么做呢？其实很简单，只需要在程序中使用关键字 <code>import</code> 即可完成包的导入。</p>\n<p>通过使用包，可以达到以下的作用：</p>\n<ol>\n<li>将功能类似或或相关的类以及接口组织放在同一个包中，方便类的查找与使用。</li>\n<li>包也像文件夹一样，采用了树形目录的存储方式。同一个包中的类名不同，不同包中的类名可以相同。当同时调用两个不同包中的同一类名的类时，通过加上完整的包名就可以加以区分，从而避免类名冲突。</li>\n<li>同时包也限定了访问权限，只有拥有包访问权限的类才能间接去访问包中的类。</li>\n</ol>\n<h2> 注释</h2>\n<p>所谓注释，就是写在程序里边对代码进行结束说明的文字，既方便自己也方便他人查看，更快理解程序含义。而且注释是不影响程序的执行的，在我们对 Java 源代码进行编译后，字节码文件中不含源代码中的注释内容。</p>\n<p>在 Java 中，通常支持三种注释方式，它们分别是：</p>\n<ul>\n<li><code>//</code>：单行注释</li>\n<li><code>/* */</code>：多行注释</li>\n<li><code>/** */</code>：文档注释</li>\n</ul>\n<h3> 单行注释</h3>\n<p>单行注释是以双斜杠 <code>//</code> 来标识，表示只注释当前行内容，一般用在需要注释的内容较少的地方，以下就是一个单行注释的实例。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 多行注释</h3>\n<p>通常我们把要注释的内容放在 <code>/*</code> 和 <code>*/</code> 之间，表示在两者之间的内容都是我们的注释内容，以下是一个多行注释的实例。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 文档注释</h3>\n<p>文档注释和多行注释很像，它是将我们所需要注释的内容包含在 <code>/**</code> 和 <code>*/</code> 之间。而文档注释和其他两种注释最大的区别就在于：我们可以利用 <code>javadoc</code> 工具来提取文档注释，然后生成一个 HTML 文档，类似于 Java 官网所提供的 API 文档，以下是一个文档注释的实例。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>然后我们通过终端，使用 <code>javadoc</code> 命令就可以为上述文件生成一个 HTML 文档。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>而文档注释相比于其他两种注释，也有更多值得注意的地方，下面就分别来看看需要留意的地方。</p>\n<ol>\n<li><strong>常用文档注释分类</strong></li>\n</ol>\n<ul>\n<li><strong>类注释</strong></li>\n</ul>\n<p>顾名思义，所谓类注释，就是针对整个类的说明，它必须放在 <code>import</code> 之后，但又必须放在类定义之前。以下是一个类注释的实例：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这里需要注意的是，在 <code>/**</code> 和 <code>*/</code> 之间的其他行注释，<code>*</code> 是可有可无的，之所以加上，更大情况出于美观的考虑，上面的实例写成如下样式也是合法的。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>方法注释</strong></li>\n</ul>\n<p>同样的，方法注释也就是针对类中方法的注释，它必须放在所描述的方法之前。而一般情况下，除开说明该方法的功能之外，我们经常使用如下标记来对方法进行注释。</p>\n<table>\n<thead>\n<tr>\n<th>标记</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@param variable description</code></td>\n<td>用于介绍当前方法的参数，可以占据多行</td>\n</tr>\n<tr>\n<td><code>@return description</code></td>\n<td>用于描述当前方法的返回值，可以跨多行</td>\n</tr>\n<tr>\n<td><code>@throws class description</code></td>\n<td>用于表示该方法有可能抛出的异常</td>\n</tr>\n</tbody>\n</table>\n<p>以下就是一个方法注释的实例：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>字段注释</strong></li>\n</ul>\n<p>字段注释顾名思义，也就是对于类中字段的说明，用于描述字段的含义，以下是一个字段注释的例子。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当然，如果你不喜欢把一个字段的注释分成多行的话，也可以写成以下格式。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>两种方式都是可以的，也没有优劣之分，可以根据自己的风格来选择。但是在 IntelliJ IDEA 等 IDE 中，如果对代码进行格式化，IDEA 会将第二种方式格式化成第一种方式，这一点需要注意。</p>\n<ol start=\"2\">\n<li><strong>如何提取文档注释</strong></li>\n</ol>\n<p>假设有以下一段代码，我们需要生成关于代码的文档说明。那么就可以使用 JDK 中所提供的 <code>javadoc</code> 命令来提取代码的文档注释。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>然后利用以下命令就可以生成我们的文档注释。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>以上命令的意思就是，对名为 <code>HelloWorld.java</code> 的提取其中的文档注释，并将输出的文件放在 <code>helloworld</code> 文件夹下，并且在文档中包含程序作者和版本，编码方式为 <code>UTF-8</code>。</p>\n<figure><figcaption></figcaption></figure>\n<p>生成的文件列表详情见下图，打开其中的 <code>index.html</code> 就可以查看提取的文档注释。</p>\n<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<h2> jar 文件的创建</h2>\n<p>其实关于这个，我在之前的文章也写过。不过我是利用 IntelliJ IDEA 来对进行代码的打包，如果感兴趣，可以点击下方传送门去看看。</p>\n<blockquote>\n<p><a href=\"https://cunyu1943.github.io/JavaPark/dev-tools/idea/java-quick-start-with-idea\" title=\"如何利用 IntelliJ IDEA 创建 Java 入门应用\" target=\"_blank\" rel=\"noopener noreferrer\">如何利用 IntelliJ IDEA 创建 Java 入门应用</a></p>\n</blockquote>\n<p>不过那是借助工具来生成的，今天我们来看看如何利用 JDK 所提供的命令行工具，来创建一个能打印出 <code>Hello World!</code> 的 <code>jar</code> 包。</p>\n<p>同样的，我们仍然是需要先准备一个能输出 <code>Hello World!</code> 的 Java 源代码，命名为 <code>HelloWorld.java</code>。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>接着，利用 <code>javac</code> 命令对该文件进行编译，然后会生成 <code>HelloWorld.class</code> 字节码文件。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>然后，利用 <code>jar</code> 命令来对生成的字节码文件进行打包。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>其中 <code>c</code> 表示创建一个新 <code>jar</code> 包，<code>v</code> 表示创建过程中打印创建过程中的信息，<code>f</code> 则表示对新生成的 <code>jar</code> 命名。</p>\n<p>最后，利用以下命令来运行 <code>jar</code> 包。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>不过并不会顺利出现我们想要的结果，此时会报错 <code>hello.jar</code> 中没有主清单属性。这是因为我们还没有在 <code>MENIFEST.MF</code> 文件中添加 <code>Main-Class</code> 属性。\n</p>\n<p>用压缩软件打开刚创建的 <code>hello.jar</code>，里边除了 <code>HelloWorld.class</code> 文件之外，还会多一个 <code>META-INF</code> 文件夹，里边还有一个 <code>MENIFEST.MF</code> 文件，此时我们只需要用编辑器打开该文件，然后在文件中加入以下代码。（<strong>记得添加之后要保证整个文件最后保留一行空行</strong>）</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>添加完成之后，再次运行 <code>java -jar hello.jar</code> ，就可以成功在控制台打印 <code>Hello World!</code> 了。</p>\n<h2> 总结</h2>\n<p>以上就是今天博客的所有内容了，如果您觉得本文不错，那就来个一键三连吧，您的关注就是我坚持的不懈动力！</p>\n<p><strong>关注公众号，获取最新文章更新</strong></p>\n<div style=\"text-align:center\">\n<figure><img src=\"https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif\" alt=\"\" width=\"200\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n</div>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "成员变量、实例变量、静态变量、局部变量",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220712-all-kinds-of-variable.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220712-all-kinds-of-variable.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 前言 学习 Java 的过程中，一开始很容易被这些各种变量绕晕，这篇博客主要介绍了这几种变量之间的关系和区别。 实例 各变量联系与区别 成员变量 作用范围是整个类，相当于 C 语言中的全局变量，定义在方法体和语句块之外，一般定义在类的声明之下；成员变量包括实例变量和静态变量(类变量)。 实例变量 独立于与...",
      "content_html": "<h1> 成员变量、实例变量、静态变量、局部变量</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<h2> 前言</h2>\n<p>学习 Java 的过程中，一开始很容易被这些各种变量绕晕，这篇博客主要介绍了这几种变量之间的关系和区别。</p>\n<h2> 实例</h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 各变量联系与区别</h2>\n<h3> 成员变量</h3>\n<p>作用范围是整个类，相当于 C 语言中的全局变量，定义在方法体和语句块之外，一般定义在类的声明之下；成员变量包括实例变量和静态变量(类变量)。</p>\n<h3> 实例变量</h3>\n<p>独立于与方法之外的变量，无 <code>static</code> 修饰，声明在一个类中，但在方法、构造方法和语句块之外，数值型变量默认值为 0，布尔型默认值为 <code>false</code>，引用类型默认值为 <code>null</code>。</p>\n<h3> 静态变量(类变量)</h3>\n<p>独立于方法之外的变量，用 <code>static</code> 修饰，默认值与实例变量相似，一个类中只有一份，属于对象共有，存储在静态存储区，经常被声明为常量，调用一般是类名.静态变量名，也可以用对象名.静态变量名调用。</p>\n<h3> 局部变量</h3>\n<p>类的方法中的变量，访问修饰符不能用于局部变量，声明在方法、构造方法或语句块中，在栈上分配，无默认值，必须经初始化。</p>\n<h3> 成员变量 VS 局部变量</h3>\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>成员变量</th>\n<th>局部变量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类中位置不同</td>\n<td>类中、方法外</td>\n<td>方法中</td>\n</tr>\n<tr>\n<td>初始化值不同</td>\n<td>有初始值，无需初始化</td>\n<td>无默认值，使用前需完成赋值</td>\n</tr>\n<tr>\n<td>内存位置不同</td>\n<td>堆内存</td>\n<td>栈内存</td>\n</tr>\n<tr>\n<td>生命周期不同</td>\n<td>随对象创建而存在，随对象的消失而消失</td>\n<td>随方法的调用而存在，随方法的运行结束而消失</td>\n</tr>\n<tr>\n<td>作用域</td>\n<td></td>\n<td>所属大括号</td>\n</tr>\n</tbody>\n</table>\n<h2> 总结</h2>\n<p>以上就是关于 Java 编程中，静态变量、类变量、实例变量、局部变量以及成员变量之间的相关区别了。读完本文，你是否对这几个变量之间能进行一定程度上的区分了呢？</p>\n<p><strong>关注公众号，获取最新文章更新</strong></p>\n<div style=\"text-align:center\">\n<figure><img src=\"https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif\" alt=\"\" width=\"200\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n</div>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "String 详解",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220713-string.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220713-string.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 概述 String 类代表字符串，定义的变量可以用来指向字符串对象，然后操作该字符串，同时还提供了许多用于操作字符串的功能。Java 中，所有的字符串都用双引号 \"\" 括起来。 此外，String 是不可变的字符串类型，它的对象一旦创建，就不能够再被更改。 但在实际使用过程中，给我们的实际观感可能会觉得 ...",
      "content_html": "<h1> String 详解</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<h2> 概述</h2>\n<p><code>String</code> 类代表字符串，定义的变量可以用来指向字符串对象，然后操作该字符串，同时还提供了许多用于操作字符串的功能。Java 中，所有的字符串都用双引号 <code>\"\"</code> 括起来。</p>\n<p>此外，<code>String</code> 是不可变的字符串类型，它的对象一旦创建，就不能够再被更改。</p>\n<p>但在实际使用过程中，给我们的实际观感可能会觉得 <code>String</code> 是可变的，但实际上 <code>String</code> 每次的修改都是产生并指向了新的字符串对象，原来的字符串对象实际上是没有改变的。</p>\n<h2> 创建对象的两种方式</h2>\n<ol>\n<li>直接赋值</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>通过构造方法创建</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>构造方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public String()</code></td>\n<td>创建一个不含任何内容的空白字符串对象</td>\n</tr>\n<tr>\n<td><code>public String(String original)</code></td>\n<td>根据传入的字符串内容来创建字符串对象</td>\n</tr>\n<tr>\n<td><code>public String(char[] chs)</code></td>\n<td>根据字符串数组的内容来创建字符串对象</td>\n</tr>\n<tr>\n<td><code>public String(bytes[] chs)</code></td>\n<td>根据字节数组的内容来创建字符串对象</td>\n</tr>\n</tbody>\n</table>\n<p>两者的区别在于，利用 <code>\"\"</code> 方式所给出的字符串对象，存储在字符串常量池中，而且相同内容只会在其中存储一份。但是通过构造方法 <code>new</code> 对象，每次 <code>new</code> 都会产生一个新对象，它们是存放在堆内存中的。</p>\n<p>这里要注意，任何类型的数据与字符串相加时，得到的会是一个字符串。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 字符串常用 API</h2>\n<h3> public boolean equals(Object anotherObject)</h3>\n<ol>\n<li><strong>功能</strong></li>\n</ol>\n<p>将此字符串与指定对象比较，只关心字符串内容是否一致。</p>\n<ol start=\"2\">\n<li><strong>示例</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> public boolean equalsIgnoreCase(String anotherString)</h3>\n<ol>\n<li><strong>功能</strong></li>\n</ol>\n<p>将此字符串与指定对象进行比较，忽略大小写比较字符串内容是否一致。</p>\n<ol start=\"2\">\n<li><strong>示例</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> public int length()</h3>\n<ol>\n<li><strong>功能</strong></li>\n</ol>\n<p>求字符串长度。</p>\n<ol start=\"2\">\n<li><strong>示例</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> public char charAt(int index)</h3>\n<ol>\n<li><strong>功能</strong></li>\n</ol>\n<p>获取某个索引位置处的字符。</p>\n<ol start=\"2\">\n<li><strong>示例</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> public char[] toCharArray()</h3>\n<ol>\n<li><strong>功能</strong></li>\n</ol>\n<p>字符串转换为字符串数组。</p>\n<ol start=\"2\">\n<li><strong>示例</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> public String substring(int beginIndex, int endIndex)</h3>\n<ol>\n<li><strong>功能</strong></li>\n</ol>\n<p>根据开始和结束索引进行截取得到新的子串（左闭右开）。</p>\n<ol start=\"2\">\n<li><strong>示例</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> public String replace(CharSequence target, CharSequence replacement)</h3>\n<ol>\n<li><strong>功能</strong></li>\n</ol>\n<p>使用新值将字符串中的旧值替换得到新字符串。</p>\n<ol start=\"2\">\n<li><strong>示例</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> public String[] split(String regex)</h3>\n<ol>\n<li><strong>功能</strong></li>\n</ol>\n<p>通过正则规则切割字符串，得到字符串数组。</p>\n<ol start=\"2\">\n<li><strong>示例</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> StringBuilder</h2>\n<p><code>StringBuilder</code> 可以看做一个容器，创建后其中的内容可变，主要是为了提高字符串 <code>String</code> 的操作效率。</p>\n<h3> 构造方法</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public StringBuilder()</code></td>\n<td>创建一个不含任何内容的空白可变字符串对象</td>\n</tr>\n<tr>\n<td><code>public StringBuilder(String str)</code></td>\n<td>根据字符串内容，创建可变字符串对象</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 常用方法</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public int length()</code></td>\n<td>返回字符串长度</td>\n</tr>\n<tr>\n<td><code>public String toString()</code></td>\n<td>将 <code>StringBuilder</code> 转换为 <code>String</code></td>\n</tr>\n<tr>\n<td><code>public StringBuilder append(Object obj)</code></td>\n<td>添加数据并返回对象本身</td>\n</tr>\n<tr>\n<td><code>public StringBuilder reverse()</code></td>\n<td>反转容器中的内容</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> StringJoiner</h2>\n<p>类似于 <code>StringBuilder</code>，都可以把它们看做是一个容器，而且它们里面的内容还是可变的，而它的出现也是为了提高操作字符串的效率。</p>\n<h3> 构造方法</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public StringJoiner(间隔符)</code></td>\n<td>创建一个 <code>StringJoiner</code> 对象并指定拼接时的间隔符</td>\n</tr>\n<tr>\n<td><code>public StringJoiner(间隔符, 开始符号, 结束符号)</code></td>\n<td>创建一个 <code>StringJoiner</code> 对象并指定拼接时的间隔符、开始符号、结束符号</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 常用方法</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public StringJoiner add(Object obj)</code></td>\n<td>添加数据后返回对象本身</td>\n</tr>\n<tr>\n<td><code>public int length()</code></td>\n<td>返回字符串长度</td>\n</tr>\n<tr>\n<td><code>public String toString()</code></td>\n<td>将 <code>StringJoiner</code> 转换为 <code>String</code></td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 总结</h2>\n<p>以上就是关于 <code>Java</code> 中字符串的相关知识点了，主要介绍了 <code>String</code> 类创建对象的两种方式以及常用 <code>API</code>。此外，为了提高字符串的操作效率，还了解 <code>StringBuilder</code> 和 <code>StringJoiner</code> 的构造方法以及常用方法，方便后续编程中使用。</p>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "ArrayList 详解",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220714-arraylist.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220714-arraylist.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 概述 ArrayList 代表的是集合类，集合是一种容器，类似于数组。不同的是数组一旦定义后，其类型和长度就固定了，但集合的大小却是动态变化的，而且其中的元素类型也是动态的。 因此，数组更适合数据个数和类型确定的场景，而集合则更适合数据个数不确定，且需要做增删元素的场景。 泛型支持 ArrayList 实...",
      "content_html": "<h1> ArrayList 详解</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<h2> 概述</h2>\n<p><code>ArrayList</code> 代表的是集合类，集合是一种容器，类似于数组。不同的是数组一旦定义后，其类型和长度就固定了，但集合的大小却是动态变化的，而且其中的元素类型也是动态的。</p>\n<p>因此，数组更适合数据个数和类型确定的场景，而集合则更适合数据个数不确定，且需要做增删元素的场景。</p>\n<h2> 泛型支持</h2>\n<p><code>ArrayList&lt;E&gt;</code> 实际上就是一个泛型类，能够在编译阶段约束集合对象只能操作某种数据类型。而且这里的数据类型只能是引用类型，而不能是基本数据类型。</p>\n<table>\n<thead>\n<tr>\n<th>正确</th>\n<th>错误</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;;</code></td>\n<td><code>ArrayList&lt;int&gt; list = new ArrayList&lt;&gt;;</code></td>\n</tr>\n</tbody>\n</table>\n<h2> 构造方法</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public ArrayList()</code></td>\n<td>创建一个初始容量为 10 的空列表</td>\n</tr>\n<tr>\n<td><code>public ArrayList(int initialCapacity)</code></td>\n<td>创建一个指定容量的空列表</td>\n</tr>\n<tr>\n<td><code>public ArrayList(Collection&lt;? extends E&gt; c)</code></td>\n<td>创建一个包含指定集合中元素的列表</td>\n</tr>\n</tbody>\n</table>\n<h2> 常用方法</h2>\n<h3> 元素个数</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public int size()</code></td>\n<td>返回集合中的元素个数</td>\n</tr>\n</tbody>\n</table>\n<h3> 元素获取</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public E get(int index)</code></td>\n<td>获取索引位置为 <code>index</code> 的元素</td>\n</tr>\n</tbody>\n</table>\n<h3> 元素新增</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void add(int index, E element)</code></td>\n<td>在指定索引位置 <code>index</code> 新增元素 <code>element</code></td>\n</tr>\n<tr>\n<td><code>boolean add(E element)</code></td>\n<td>在列表末尾新增一个元素 <code>element</code></td>\n</tr>\n</tbody>\n</table>\n<h3> 元素删除</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public E remove(int index)</code></td>\n<td>删除指定索引处的元素并返回被删除的元素</td>\n</tr>\n<tr>\n<td><code>public boolean remove(Object obj)</code></td>\n<td>删除指定元素并返回是否删除成功</td>\n</tr>\n</tbody>\n</table>\n<h3> 元素修改</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public E set(int index, E element)</code></td>\n<td>修改指定索引处的元素，返回被修改的元素</td>\n</tr>\n</tbody>\n</table>\n<h3> 元素遍历</h3>\n<ol>\n<li><strong>for 循环</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>增强 for 循环</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li><strong>迭代器</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 总结</h2>\n<p>本文主要讲解了 <code>ArrayList</code> 的定义、泛型支持、构造方法以及常用方法等。主要针对的是日常中的使用，更多关于 <code>ArrayList</code>&nbsp; 底层原理的一些知识，抽个时间再聊吧！</p>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "image": "https://zzdxy.github.io/zzdxy/zzdxy/contact/wechatpublic.svg =150x",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "输入输出流",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220715-in-out-stream.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220715-in-out-stream.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 前言 我们日常开发过程中，有许多方面都涉及到 IO 流，比如上传下载、传输、设计模式等等。而所有的一切都是基于 IO 流来进行，所以今天就来看看 Java 中 IO 流的相关知识点。 本文主要内容安排如下： 文件对象; 流简介; 字节流; 字符流; 文件对象 文件路径 Java 标准库 java.io 提...",
      "content_html": "<h1> 输入输出流</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<h2> 前言</h2>\n<p>我们日常开发过程中，有许多方面都涉及到 IO 流，比如上传下载、传输、设计模式等等。而所有的一切都是基于 IO 流来进行，所以今天就来看看 Java 中 IO 流的相关知识点。</p>\n<p>本文主要内容安排如下：</p>\n<ul>\n<li><strong>文件对象</strong></li>\n<li><strong>流简介</strong></li>\n<li><strong>字节流</strong></li>\n<li><strong>字符流</strong></li>\n</ul>\n<h2> 文件对象</h2>\n<h3> 文件路径</h3>\n<p>Java 标准库 <code>java.io</code> 提供了 <code>File</code> 对象用于操作文件和目录，也就是说我们的文件和目录都是可以通过 <code>File</code> 封装成对象的。构造 <code>File</code> 对象时，需要传入我们的文件或目录的路径名，常用的构造方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>File(String pathName)</code></td>\n<td>通过将给定路径名字符串转换为抽象路径名来创建新实例</td>\n</tr>\n<tr>\n<td><code>File(String parent, String child)</code></td>\n<td>从父路径名字符串和子路径名字符串创建新实例</td>\n</tr>\n<tr>\n<td><code>File(File parent, String child)</code></td>\n<td>从父抽象路径名和子路径名字符串创建新实例</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>对于我们传入文件的路径，既可以使用绝对路径，也可以使用相对路径。</p>\n<ul>\n<li><strong>相对路径</strong>：以当前文件所在位置为参考，然后建立出另一个文件所在位置路径。我们最常用的有 <code>.</code> 和 <code>..</code>，前者表示当前目录，而后者则表示当前目录的上一级目录。假设我们当前目录为 <code>/home/cunyu1943/data</code>，则 <code>.</code> 仍然表示该目录，而 <code>..</code> 则表示 <code>/home/cunyu1943</code> 目录。</li>\n<li><strong>绝对路径</strong>：又可以分为 <strong>本地绝对路径</strong> 和 <strong>网络绝对路径</strong>。本地绝对路径以根目录为参考，指文件在硬盘中真实存在的路径，比如在 Windows 系统，我们的一个绝对路径是 <code>D:\\\\Softwares\\\\Typora\\\\Typora.exe</code>，而在类 <code>Unix</code> 系统中则为 <code>/home/cunyu1943/IO.md</code>，此时需要注意平台间的分隔符是不一样的，但为了同一，推荐同一写成 <code>/</code>，这样程序在不同系统中迁移时也不会出现问题。而网络绝对位置则指带有网址的路径，比如 <code>https://cunyu1943.site/index.html</code>。</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 文件和目录操作</h3>\n<h4> 创建与删除</h4>\n<p>既然拿到了 <code>File</code> 对象，接下来就是通过操作该对象来进行创建和删除文件或目录了，以下是一些 <code>File</code> 类常用的创建和删除方法。</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>boolean</code></td>\n<td><code>createNewFile()</code></td>\n<td>当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件；存在时，则创建失败</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>mkdir()</code></td>\n<td>创建由此抽象路径名命名的目录</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>mkdirs()</code></td>\n<td>创建由此抽象路径名命名的多级目录，包括任何必需但不存在的父目录</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>delete()</code></td>\n<td>删除由此抽象路径名命名的文件或目录，删除目录的前提是该目录必须为空</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>\n<p>创建文件时，调用的是 <code>createNewFile()</code> 方法，而创建目录时调用的是 <code>mkdir()</code> 或者 <code>mkdirs()</code> 方法。我们在调用时要注意区分，否则就算你的路径是文件，当调用了创建目录的方法后它也会创建成目录而非文件。对应的，就算你给定的路径是目录，当调用创建文件的方法后它也会创建成文件而非目录。</p>\n</li>\n<li>\n<p>删除目录时，若目录中有内容（目录、文件），则 <strong>不能直接删除</strong>，而是应该先删除目录中的内容，然后才能删除目录；</p>\n</li>\n</ul>\n<h4> 相关属性</h4>\n<p>获取到 <code>File</code> 对象后，我们可以对其相关属性进行判断，常用方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>long</code></td>\n<td><code>length()</code></td>\n<td>该抽象路径名表示的文件的所占字节大小</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>canRead()</code></td>\n<td>该抽象路径名表示的文件是否可读</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>canWrite()</code></td>\n<td>该抽象路径名表示的文件是否可写</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>canExecute()</code></td>\n<td>该抽象路径名表示的文件是否可执行</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h4> 判断和获取</h4>\n<p>获取到 <code>File</code> 对象后，我们既可以用它来表示文件，也可以用来表示目录。而对于文件和目录的判断和获取功能，可以使用如下常用的方法：</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>boolean</code></td>\n<td><code>isFile()</code></td>\n<td>测试此抽象路径名表示的文件是否为普通文件</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>isDirectory()</code></td>\n<td>测试此抽象路径名表示的文件是否为目录</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>exists()</code></td>\n<td>测试此抽象路径名表示的文件或目录是否存在</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>getPath()</code></td>\n<td>将抽象路径转换为路径字符串</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>getAbsolutePath()</code></td>\n<td>返回此抽象路径名的绝对路径名字符串</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>getName()</code></td>\n<td>返回由此抽象路径名表示的文件或目录的名称</td>\n</tr>\n<tr>\n<td><code>String[]</code></td>\n<td><code>list()</code></td>\n<td>返回字符串数组，表示该抽象路径名表示目录下的文件和目录</td>\n</tr>\n<tr>\n<td><code>File[]</code></td>\n<td><code>listFiles()</code></td>\n<td>返回抽象路径名数组，表示该抽象路径名表示目录下的文件</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 练习</h3>\n<p>假设我们要遍历 Windows 下 C 盘的 Windows 目录，并且列出其中文件名和文件大小，而不用列出目录名，我们可以利用如下代码来实现：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 流</h2>\n<h3> 什么是流</h3>\n<p>所谓流，就是一系列数据的组合。当我们需要进行数据交互的时候，比如在服务器和客户端之间进行数据交互时，我们此时就可以使用 Java 中的流来实现。Java 中，数据的输入和输出都是以流的形式来进行的。根据数据流方向的不同，我们可以将其分为：<strong>输入流</strong>、<strong>输出流</strong>。而根据处理的数据单位不同，可分为：<strong>字节流</strong>、<strong>字符流</strong>。两者的关系可以描述为下表：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>字节流</th>\n<th>字符流</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>输入流</strong></td>\n<td><code>InputStream</code></td>\n<td><code>Reader</code></td>\n</tr>\n<tr>\n<td><strong>输出流</strong></td>\n<td><code>OutputStream</code></td>\n<td><code>Writer</code></td>\n</tr>\n</tbody>\n</table>\n<p>而对于字节流和字符流的选用原则，我们建议遵循如下规则：<strong>如果数据能够通过 Windows 自带笔记本软件打开并且能够读懂其中的内容，则选用字符流，否则选择字节流。而如果我们也不知道应该使用何种类型的流，则默认使用字节流</strong>。</p>\n<p>下图描述了字节流和字符流的类层次图，注意：<strong>无论是字节流还是字符流，其子类名都是以其父类名作为子类名的后缀的</strong>。</p>\n<figure><figcaption></figcaption></figure>\n<h3> InputStream</h3>\n<figure><figcaption></figcaption></figure>\n<p>注意，<code>InputStream</code> 并非是并不是一个接口，而是所有字节输入流所有类的父类。下面我们主要以 <code>FileInputStream</code> 来举例，所谓 <code>FileInputStream</code>，就是从文件流中读取数据，然后将数据从文件中读取到内存，常用方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>int</code></td>\n<td><code>available()</code></td>\n<td>返回该输入流中可以读取的字节数的估计值</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>close()</code></td>\n<td>关闭输入流并释放相关资源</td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>read(bytep[] b)</code></td>\n<td>从输入流读取一些字节数，并将其存储到缓冲区 b</td>\n</tr>\n</tbody>\n</table>\n<p>下面是一个从文件中读取数据到内存中的实例，文件内容如下：</p>\n<figure><figcaption></figcaption></figure>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> OutputStream</h3>\n<figure><figcaption></figcaption></figure>\n<p><code>OutputStream</code> 并非是并不是一个接口，而是所有输出字节流的所有类的父类。下面我们主要以 <code>FileOutputStream</code> 来举例，所谓 <code>FileOutputStream</code>，就是从内存中读取数据，然后将数据从内存存放到文件中，常用方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void</code></td>\n<td><code>write(byte[] b)</code></td>\n<td>将 <code>b.length</code> 个字节从指定字节数组写入此文件输出流</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>close()</code></td>\n<td>关闭文件输出流并释放相关资源</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<p>需要注意的点：</p>\n<ul>\n<li>字节流写入数据时如何实现换行？</li>\n</ul>\n<p>写入换行的转义字符的字节数组即可，但是需要注意，不同系统下换行的转义字符不同，Windows 下为 <code>\\r\\n</code>，macOS 下为 <code>\\r</code>，而 Linux 下为 <code>\\m</code>。</p>\n<ul>\n<li>字节流写入数据时如何实现追加？</li>\n</ul>\n<p>调用 <code>public FileOutputStream(String name, boolean append)</code> 这个构造方法即可，当 <code>append</code> 为 <code>true</code> 时，表示追加，默认情况下是 <code>false</code>，表示不追加。</p>\n<h3> 字符串中的编解码问题</h3>\n<h4> 编码</h4>\n<ul>\n<li><code>byte[] getBytes()</code>：使用平台默认字符集将该字符串编码成一系列字节，然后将结果存储到新的字节数组中；</li>\n<li><code>byte[] getBytes(String charsetName)</code>：使用指定字符集将该字符串编码为一系列字节，然后将结果存储到新的字节数组中；</li>\n</ul>\n<h4> 解码</h4>\n<ul>\n<li><code>String(byte[] bytes)</code>：使用平台默认字符集解码指定的字节数来构造新的字符串；</li>\n<li><code>String(byte[] bytes, String charsetName)</code>：通过指定的字符集解码指定的字节数组来构造新的字符串；</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> Writer</h3>\n<figure><figcaption></figcaption></figure>\n<p>当我们要写入基于字符的数据到数据源中时，需要使用写入器 <code>Writer</code>. 以其中的 <code>FileWriter</code> 具体展开，其常用方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void</code></td>\n<td><code>close()</code></td>\n<td>先刷新再关闭流，不能再写数据</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>flush()</code></td>\n<td>刷新流，可以继续写数据</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>newLine()</code></td>\n<td>写入行分隔符</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>write()</code></td>\n<td>写入字符或字符串</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> Reader</h3>\n<figure><figcaption></figcaption></figure>\n<p>当我们要从数据源读取基于字符的数据时，需要使用读取器 <code>Reader</code>. 我们以 <code>FileReader</code> 实践，其常用的方法有：</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void</code></td>\n<td><code>close()</code></td>\n<td>关闭流并释放相关资源</td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>read()</code></td>\n<td>读取一个字符</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td><code>readLine()</code></td>\n<td>读一行文字</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td><code>ready()</code></td>\n<td>获取该流是否准备好被读取</td>\n</tr>\n</tbody>\n</table>\n<p>我们以从文件中读取内容为例：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 总结</h2>\n<p>好了，关于 IO 流的知识点到此就结束了，赶紧学起来！如果你觉得本文对你有所帮助，那就点赞关注一波吧！</p>\n<p>对于文中遗漏或者错误的知识点，欢迎大家评论留言，咱们评论区见！</p>\n<p><strong>关注公众号，获取最新文章更新</strong></p>\n<div style=\"text-align:center\">\n<figure><img src=\"https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif\" alt=\"\" width=\"200\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n</div>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "反射机制详解",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220716-reflection.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220716-reflection.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 https://mp.weixin.qq.com/s/f0sJpAhgI6B7oirsJfv9jQ 反射概述 什么是反射 将类的各个组成部分封装为其他对象的过程就叫做 反射，其中 组成部分 指的是我们类的 成员变量（Field）、构造方法（Constructor）、成员方法（Method）。 使用反...",
      "content_html": "<h1> 反射机制详解</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n<p>https://mp.weixin.qq.com/s/f0sJpAhgI6B7oirsJfv9jQ</p>\n</div>\n<h2> 反射概述</h2>\n<h3> 什么是反射</h3>\n<p>将类的各个组成部分封装为其他对象的过程就叫做 <strong>反射</strong>，其中 <strong>组成部分</strong> 指的是我们类的 <strong>成员变量（Field）</strong>、<strong>构造方法（Constructor）</strong>、<strong>成员方法（Method）</strong>。</p>\n<h3> 使用反射的优缺点</h3>\n<ul>\n<li>\n<p><strong>优点</strong></p>\n<ol>\n<li>在 <strong>程序运行过程中</strong> 可以操作类对象，增加了程序的灵活性；</li>\n<li>解耦，从而提高程序的可扩展性，提高代码的复用率，方便外部调用；</li>\n<li>对于任何一个类，当知道它的类名后，就能够知道这个类的所有属性和方法；而对于任何一个对象，都能够调用它的一个任意方法。</li>\n</ol>\n</li>\n<li>\n<p><strong>缺点</strong></p>\n<ol>\n<li><strong>性能问题</strong>：Java 反射中包含了一些动态类型，JVM 无法对这些动态代码进行优化，因此通过反射来操作的方式要比正常操作效率更低。</li>\n<li><strong>安全问题</strong>：使用反射时要求程序必须在一个没有安全限制的环境中运行，如果程序有安全限制，就不能使用反射。</li>\n<li><strong>程序健壮性</strong>：反射允许代码执行一些平常不被允许的操作，破坏了程序结构的抽象性，导致平台发生变化时抽象的逻辑结构无法被识别。</li>\n</ol>\n</li>\n</ul>\n<h2> Class 对象的获取及使用</h2>\n<h3> 获取 Class 对象的方式</h3>\n<ol>\n<li><code>Class.forName(\"全类名\")</code></li>\n</ol>\n<p>源代码阶段，它能将字节码文件加载进内存中，然后返回 <code>Class</code> 对象，多用于 <strong>配置文件</strong> 中，将类名定义在配置文件中，通过读取配置文件来加载类。</p>\n<ol start=\"2\">\n<li><code>类名.class</code></li>\n</ol>\n<p>类对象阶段，通过类名的 <code>class</code> 属性来获取，多用于 <strong>参数的传递</strong>。</p>\n<ol start=\"3\">\n<li><code>对象.getClass()</code></li>\n</ol>\n<p>运行时阶段，<code>getClass()</code> 定义在 <code>Object</code> 类中，表明所有类都能使用该方法，多用于 <strong>对象的获取字节码</strong> 的方式。</p>\n<p>我们首先定义一个 <code>Person</code> 类，用于后续反射功能的测试；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>定义好 <code>Person</code> 类之后，我们尝试用 3 种不同的方式来获取 <code>Class</code> 对象，并比较它们是否相同。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>上述代码中，会发现最后输出的比较结果返回的是两个 <code>true</code>，说明通过上述三种方式获取的 <code>Class</code> 对象都是同一个，<strong>同一个字节码文件（<code>*.class</code>）在一次运行过程中只会被加载一次</strong>。</p>\n<h3> Class 对象的使用</h3>\n<h4> 获取成员变量</h4>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Field[] getFields()</code></td>\n<td>返回包含一个数组 <code>Field</code>对象反射由此表示的类或接口的所有可访问的公共字段类对象</td>\n</tr>\n<tr>\n<td><code>Field getField(String name)</code></td>\n<td>返回一个 <code>Field</code>对象，它反映此表示的类或接口的指定公共成员字段类对象</td>\n</tr>\n<tr>\n<td><code>Field[] getDeclaredFields()</code></td>\n<td>返回的数组 <code>Field</code>对象反映此表示的类或接口声明的所有字段类对象</td>\n</tr>\n<tr>\n<td><code>Field getDeclaredField(String name)</code></td>\n<td>返回一个 <code>Field</code>对象，它反映此表示的类或接口的指定已声明字段类对象</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>Field[] getFields()</code></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>回顾下我们的 <code>Person</code> 类，可以发现 <code>id</code>、<code>grade</code> 成员变量都是被 <code>public</code> 所修饰的，说明该方法是用于获取类中所有被 <code>public</code> 所修饰的成员变量（<strong>包括父类</strong>）。</p>\n<ul>\n<li><code>Field getField(String name)</code></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<p>从上面的结果分析可知，该方法只能用于获取类中指定名称的 <code>public</code> 所修饰的成员变量，对于 <code>protected</code>、<code>private</code> 所修饰的成员变量，该方法是无法获取的（<strong>包括父类</strong>）。而获取或设置成员变量值时，可以通过 <code>get/set</code> 方法来操作，具体操作方法如下。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><code>Field[] getDeclaredFields()</code></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>观察上面的结果可知，该方法可用于获取所有的成员变量，不用考虑修饰符的限制（<strong>不包括父类</strong>）。</p>\n<ul>\n<li><code>Field getDeclaredField(String name)</code></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>观察上面的结果可知，该方法可用于获取指定的成员变量，不用考虑成员变量修饰符的限制（<strong>不包括父类</strong>）。但是在利用 <code>set</code>、<code>get</code> 方法来获取和设置 <code>private</code>、<code>protected</code> 修饰的成员变量时，需要利用 <code>setAccessible()</code> 来忽略访问全新啊修饰符的安全检查，否则程序将会报错。</p>\n<h4> 获取构造方法</h4>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Constructor&lt;?&gt;[] getConstructors()</code></td>\n<td>返回包含一个数组 <code>Constructor</code>对象反射由此表示的类的所有公共构造类对象</td>\n</tr>\n<tr>\n<td><code>Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)</code></td>\n<td>返回一个 <code>Constructor</code> 对象，该对象反映 <code>Constructor</code>对象表示的类的指定的公共类函数</td>\n</tr>\n<tr>\n<td><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></td>\n<td>返回一个反映 <code>Constructor</code> 对象表示的类声明的所有 <code>Constructor</code> 对象的数组类</td>\n</tr>\n<tr>\n<td><code>Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)</code></td>\n<td>返回一个 <code>Constructor</code> 对象，该对象反映 <code>Constructor</code> 对象表示的类或接口的指定类函数</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ul>\n<li>\n<p><code>Constructor&lt;?&gt;[] getConstructors()</code></p>\n<p>类似于通过 <code>Class</code> 实例来获取成员变量，该方法用于获取所有 <code>public</code> 所修饰的构造方法（<strong>包括父类</strong>）；</p>\n</li>\n<li>\n<p><code>Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)</code></p>\n</li>\n</ul>\n<p>该方法用于获取某一指定参数类型后的 <code>public</code> 所修饰的构造方法（<strong>包括父类</strong>）；</p>\n<ul>\n<li><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></li>\n</ul>\n<p>该方法用于获取所有 <code>public</code> 所修饰的构造方法（<strong>不包括父类</strong>）；</p>\n<ul>\n<li><code>Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)</code></li>\n</ul>\n<p>该方法用于获取某一指定参数类型后的 <code>public</code> 所修饰的构造方法（<strong>不包括父类</strong>）；</p>\n<p>而获取到构造方法之后，我们就可以利用 <code>newInstance()</code> 方法来创建类的实例。特殊的，如果我们的构造方法是无参的，此时则可以直接利用 <code>Class.newInstance()</code> 来构造实例。</p>\n<h4> 获取成员方法</h4>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Method[] getMethods()</code></td>\n<td>返回包含一个数组 方法对象反射由此表示的类或接口的所有公共方法 类对象，包括那些由类或接口和那些从超类和超接口继承的声明</td>\n</tr>\n<tr>\n<td><code>Method getMethod(String name, 类&lt;?&gt;... parameterTypes)</code></td>\n<td>返回一个方法对象，它反映此表示的类或接口的指定公共成员方法 类对象</td>\n</tr>\n<tr>\n<td><code>Method[] getDeclaredMethods()</code></td>\n<td>返回包含一个数组方法对象反射的类或接口的所有声明的方法，通过此表示 类对象，包括公共，保护，默认（包）访问和私有方法，但不包括继承的方法</td>\n</tr>\n<tr>\n<td><code>Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)</code></td>\n<td>返回一个方法对象，它反映此表示的类或接口的指定声明的方法类对象</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ul>\n<li><code>Method[] getMethods()</code></li>\n</ul>\n<p>用于获取当前类的所有 <code>public</code> 所修饰的成员方法（<strong>包括父类</strong>）。</p>\n<ul>\n<li><code>Method getMethod(String name, 类&lt;?&gt;... parameterTypes)</code></li>\n</ul>\n<p>用于获取当前类的某一个指定名称 <code>public</code> 所修饰的成员方法（<strong>包括父类</strong>）。</p>\n<ul>\n<li><code>Method[] getDeclaredMethods()</code></li>\n</ul>\n<p>用于获取当前类的所有 <code>public</code> 所修饰的成员方法（<strong>不包括父类</strong>）。</p>\n<ul>\n<li><code>Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)</code></li>\n</ul>\n<p>用于获取当前类的某一个指定名称 <code>public</code> 所修饰的成员方法（<strong>不包括父类</strong>）。</p>\n<p>而当我们获取到类的成员方法后，如果要执行某一个方法，可以使用 <code>invoke()</code> 方法来执行该方法。</p>\n<h4> 获取类名</h4>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<ul>\n<li><code>String getName()</code></li>\n</ul>\n<p>从上述程序的结果可知，当我们获取到 <code>Class</code> 对象之后，如果不知道类的全名，就可以使用 <code>getName()</code> 来获取该类的全名。</p>\n<h2> 反射实例</h2>\n<p>假设我们有如下需求：在不改变类的代码的前提下，我们能够创建任意类的对象，并执行其中的方法。</p>\n<p>此时，我们可以通过 <strong>配置文件 + 反射</strong> 的方式来实现这一效果，而这也就是我们现在所用框架中的基础，当我们使用反射后，只需要通过修改配置文件中的内容就能够不用去改代码就实现对应的功能。</p>\n<p>假设我们有两个类，一个 <code>Student</code>，一个 <code>Teacher</code>，两者的定义如下；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>要实现我们的需求，通常需要如下步骤：</p>\n<ol>\n<li>将要创建对象的全类名和要执行的方法都配置在配置文件中；</li>\n</ol>\n<p>定义的配置文件 <code>prop.properties</code> ，其中主要内容包括 <code>className</code> 和 <code>methodName</code> 两个属性，分别代表类的全类名和要调用方法的名字。一个具体实例如下，分别代表名为 <code>Student</code> 的类和名为 <code>study</code> 的方法。</p>\n<div class=\"language-properties line-numbers-mode\" data-ext=\"properties\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>然后在主方法中加载读取配置文件；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>利用反射技术将类加载到内存中；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li>接着利用 <code>newInstance()</code> 方法创建对象；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"5\">\n<li>最后则是利用 <code>invoke()</code> 方法来执行方法；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>将整个流程汇总起来就是：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>此时，我们只需要改动配置文件 <code>prop.properties</code> 中的配置即可输出不同结果；</p>\n<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<h2> 总结</h2>\n<p>好了，感谢耐心看到这里的各位。如果您觉得本文对您有所帮助，那就给我点个赞吧！</p>\n<p>最后，对于文中知识点有错误或欠缺的地方，还请大家见谅，欢迎大家评论留言给我指正~</p>\n<p><strong>关注公众号，获取最新文章更新</strong></p>\n<div style=\"text-align:center\">\n<figure><img src=\"https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif\" alt=\"\" width=\"200\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n</div>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "JDBC 入门指南",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220717-jdbc-introduction.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220717-jdbc-introduction.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 https://mp.weixin.qq.com/s/DOXFxk5dk9WBfAVK0UJUng 前言 在我们日常使用的 APP 或网站中，往往需要存取数据，比如在微信中，需要存储我们的用户名、手机号、用户密码…… 等一系列信息。依靠之前所学习的 Java 相关知识已经无法满足这一需求。现在的应用...",
      "content_html": "<h1> JDBC 入门指南</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n<p>https://mp.weixin.qq.com/s/DOXFxk5dk9WBfAVK0UJUng</p>\n</div>\n<h2> 前言</h2>\n<p>在我们日常使用的 APP 或网站中，往往需要存取数据，比如在微信中，需要存储我们的用户名、手机号、用户密码…… 等一系列信息。依靠之前所学习的 Java 相关知识已经无法满足这一需求。现在的应用程序中最基本、应用最广的也就是关系型数据库，如 MySQL。Java 语言中为了实现与关系型数据库的通信，制定了标准的访问接口，即 JDBC（Java Database Connectivity）。本文主要介绍在 Java 中使用 JDBC 的相关知识，主要内容如下：</p>\n<ul>\n<li><strong>JDBC 简介</strong></li>\n<li><strong>数据的增删改查</strong></li>\n<li><strong>事务</strong></li>\n<li><strong>连接池</strong></li>\n</ul>\n<h2> JDBC 简介</h2>\n<p>JDBC（Java Database Connectivity），即 Java 数据库连接。是 Java 语言中用于规范客户端程序如何来访问数据库的应用程序接口，它是面向关系型数据库的，提供了查询和更新数据库中数据的方法。</p>\n<p>本文以 MySQL 来演示如何使用 JDBC，所以需要事先在你的机器上准备好 MySQL，而且最好是懂一些 MySQL 的使用。</p>\n<p>首先我们需要建立 MySQL 与 Java 程序间的联系，所以需要事先好 mysql-connector-java 这个第三方包，下载地址：https://downloads.mysql.com/archives/c-j/</p>\n<h3> 导入驱动包</h3>\n<p>以在 IDEA 中导入 jar 包为例，当我们建立好项目后，导包过程如下：</p>\n<ol>\n<li>首先依次打开 <code>File -&gt; Project Structure -&gt; Modules -&gt; Dependencies</code>；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li>然后点击 <code>+</code> 号，选择 <code>1 JARs or Directories</code>，找到你下载好的 jar 包导入；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li>导入成功，点击 <code>OK</code> 即可；</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<h3> 初始化并建立连接</h3>\n<p>导入我们的 jar 包之后，就需要进行初始化工作。新建一个类，用于初始化并连接。先将驱动类加载到 JVM 中，加载过程中会执行其中的静态初始化块，从而完成驱动的初始化工作。然后建立数据库与程序之间的连接，此时需要提供数据库的 IP 地址、端口号、数据库名、编码方式、用户名、用户密码等信息。</p>\n<p>首先，我们在数据库中建立一个表 <code>student</code>，建表语句如下，用于后续实践。</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<p>创建好数据库及表之后，我们就可以进行初始化和连接工作了，这里的步骤主要分为如下几步：</p>\n<ol>\n<li>首先需要加载驱动，主要是利用 <code>Class.forName()</code> 将驱动类加载到 JVM；</li>\n<li>建立程序和数据库之间的连接，主要是创建 <code>Connection</code> 对象；</li>\n<li>接着是创建用于执行 SQL 语句的 <code>Statement</code> 对象；</li>\n<li>最后则是关闭连接从而释放资源，先关闭 <code>Statement</code> ，再关闭 <code>Connection</code> ；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>对于上述关闭 <code>Connection</code> 和 <code>Statement</code> 的方式，可能略显繁琐，为了进一步简化，可以使用 <code>try-with-source</code> 的方式自动关闭，简化后的代码如下；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> JDBC 增删改查</h2>\n<p>当我们初始化并建立 JDBC 连接之后，我们就可以对数据库进行 CRUD （增加、查询、更新、删除）等操作。</p>\n<p>在正式开始 CRUD 前，我们最好先了解下 MySQL 中的数据类型在 Java 中所对应的数据类型，以便后续操作数据。一般来讲，两者中的数据类型对应关系如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>SQL 中的数据类型</th>\n<th>对应的 Java 数据类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>BIT</code>、<code>BOOL</code></td>\n<td><code>boolean</code></td>\n</tr>\n<tr>\n<td><code>INTEGER</code></td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>BIGINT</code></td>\n<td><code>long</code></td>\n</tr>\n<tr>\n<td><code>REAL</code></td>\n<td><code>float</code></td>\n</tr>\n<tr>\n<td><code>FLOAT</code>、 <code>DOUBLE</code></td>\n<td><code>double</code></td>\n</tr>\n<tr>\n<td><code>CHAR</code>、 <code>VARCHAR</code></td>\n<td><code>String</code></td>\n</tr>\n<tr>\n<td><code>DECIMAL</code></td>\n<td><code>BigDecimal</code></td>\n</tr>\n<tr>\n<td><code>DATE</code></td>\n<td><code>java.sql.Date</code>、<code>LocalDate</code></td>\n</tr>\n<tr>\n<td><code>TIME</code></td>\n<td><code>java.sql.Time</code>、 <code>LocalTime</code></td>\n</tr>\n</tbody>\n</table>\n<p>此外，虽然我们在 JDBC 的简介部分在初始化和建立连接时使用的是用 <code>Statement</code> 来创建一个对象并用于后续操作，但是在实际使用过程中时，SQL 参数基本都是从方法参数传入的，这时使用 <code>Statement</code> 就十分容易引起 SQL 注入，为了解决这一问题，大牛们提出了如下两个办法：</p>\n<ol>\n<li>对字符串中的参数进行转义，然后利用转义后的参数来进行操作。但是转义十分麻烦，而且一使用 SQL，我们就必须增加转义代码。</li>\n<li>利用 <code>PreparedStatement</code>，它利用 <code>?</code> 作为占位符，将数据联通 SQL 本身传递给数据库，从而保证每次传给数据库的 SQL 语句都是保持一致的，每次变动的只是占位符中的数据不同。通过使用 <code>PreparedStatement</code>，我们就能够 <strong>完全避免 SQL 注入 问题</strong>。</li>\n</ol>\n<p>针对后续利用 JDBC 操作数据库的过程，为了尽量避免 SQL 注入问题，我们优先采用 <code>PreparedStatement</code> 而非 <code>Statement</code>.</p>\n<h3> 查询数据</h3>\n<p>首先，我们来进行查询操作。进行查询时，可以总结为如下几个步骤：</p>\n<ol>\n<li>通过创建一个 <code>Connection</code> 对象从而建立连接；</li>\n<li>然后利用 <code>prepareStatement()</code> 方法创建一个 <code>PreparedStatement</code> 对象并传入 SQL 语句，用于执行查询操作；</li>\n<li>接着执行 <code>PreparedStatement</code> 对象所提供的 <code>executeQuery()</code> 方法，获取查询结果并返回到一个 <code>ResultSet</code> 结果集中；</li>\n<li>最后则是利用 <code>ResultSet</code> 对象的 <code>next()</code> 方法去读取我们所查询返回的结果；</li>\n</ol>\n<blockquote>\n<p>需要注意的地方：</p>\n<ol>\n<li>如果你不是利用 <code>try-with-source</code> 的方式，那么一定要记得在使用完连接之后记得释放资源；</li>\n<li>结果集 <code>ResultSet</code> 中，索引位置是从 <code>1</code> 开始的，而不是从 <code>0</code> 开始，这一点要特别注意！</li>\n</ol>\n</blockquote>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> 增加数据</h3>\n<p>即插入一条新记录，和查询语句很像，但是区别在于最后 <code>PreparedStatement</code> 对象执行的不是 <code>executeQuery()</code>，而是 <code>executeUpdate()</code>. 插入记录的步骤总结如下：</p>\n<ol>\n<li>创建 <code>Connection</code> 对象从而建立连接；</li>\n<li>利用 <code>prepareStatement()</code> 方法创建一个 <code>PreparedStatement</code> 对象并传入 SQL 语句，用于执行插入操作；</li>\n<li>然后依次设置占位符所代表的值；</li>\n<li>执行 <code>PreparedStatement</code> 对象所提供的 <code>executeUpdate()</code> 方法，此时返回的是一个 <code>int</code> 类型的数，表示插入记录的条数；</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>新增数据后，接着查询数据，得到如下结果，可以看到我们新插入的数据成功加入到了数据库中！</p>\n<figure><figcaption></figcaption></figure>\n<h3> 删除数据</h3>\n<p>删除数据和新增数据的方式基本一样，两者最大的区别在于 SQL 语句的不同，删除操作利用的是 <code>DELETE</code> 语句，能一次删除若干列。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>删除数据后，接着查询数据，得到如下结果，可以看到 <code>id = 101</code> 的数据列已经被删除了，说明我们删除数据成功了！</p>\n<figure><figcaption></figcaption></figure>\n<h3> 修改数据</h3>\n<p>修改数据的方式同删除数据和新增数据基本一致，最大的区别在于 SQL 语句的不同，修改操作利用的是 <code>UPDATE</code> 语句，能一次更新若干列。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>修改数据后，接着查询数据，得到如下结果，可以看到 <code>id = 201</code> 对应的数据列中，<code>name</code> 从小黄变成了村雨遥，说明数据更新成功。</p>\n<figure><figcaption></figcaption></figure>\n<h3> 注意</h3>\n<p>当我们的数据库表设置自增主键后，在新增数据时无需指定主键也会自动更新。但是在获取自增主键的值时，不能先插入再查询，否则可能会导致冲突。要正确获取自增主键，需要在创建 <code>PreparedStatement</code> 时，指定一个标志位 <code>RETURN_GENERATED_KEYS</code>，用于表示 JDBC 驱动必须返回插入的自增主键。</p>\n<p>假设我们创建表时，设置了自增长的键：</p>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>此时无论是 <code>executeQuery()</code> 还是 <code>execureUpdate()</code> 都不会返回这个自增长的 <code>id</code>，所以需要在创建 <code>PreparedStatement</code> 对象时加入 <code>Statement.RETURN_GENERATED_KEYS</code> 参数以确保会返回自增长 ID，然后通过 <code>getGeneratedKeys</code> 获取该字段；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> JDBC 工具类</h3>\n<p>观察上面的代码，我们可以注意到每次都需要注册驱动、传递参数，关闭连接等操作，为了提高工具通用性，我们利用配置文件来配置数据库相关信息，然后创建一个 JDBC 工具类来简化上述操作。</p>\n<ol>\n<li>首先在 <code>src</code> 目录下创建一个配置文件 <code>jdbc.properties</code>，并且填入数据库的相关信息；</li>\n</ol>\n<div class=\"language-properties line-numbers-mode\" data-ext=\"properties\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>创建工具类</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> JDBC 事务</h2>\n<h3> 事务 4 大特性</h3>\n<p>事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行结果必须使数据库从一种一致性状态切换到另一中一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。事务能够在数据库提交工作时确保要么所有修改都保存，要么所有修改都不保存。<strong>即事务是逻辑上的一组操作，要么都执行，要么都不执行</strong>。</p>\n<ol>\n<li><strong>原子性（Atomicity）</strong></li>\n</ol>\n<p>原子性是整个数据库事务中不可分割的工作单位，只有事务中的所有的数据库操作都执行成功，才代表整个事务成功，如果其中任一环节执行失败，那么就算已经执行成功的 SQL 语句也必须撤销，回滚到事务执行前的状态。即原子性能够保证 <strong>动作要么全部完成，要么完全不起作用。</strong> <strong>即事务是最小的执行单位，不允许分割</strong>。</p>\n<ol start=\"2\">\n<li><strong>一致性（Consistency）</strong></li>\n</ol>\n<p>指事务将数据库从一种一致性状态变为另一种一致性状态。在事务开始前后，数据库的完整性约束未被破坏。<strong>在事务执行前后，数据能够保持一致，多个事务对统一数据读取的结果相同</strong>。</p>\n<ol start=\"3\">\n<li><strong>隔离性（Isolation）</strong></li>\n</ol>\n<p>并发访问数据库时，隔离性要求每个读写事务对其他事务的操作对象能够相互分离，即一个用户的事务不被其他事务所干扰，各并发事务间数据库是独立的；</p>\n<ol start=\"4\">\n<li><strong>持久性（Durability）</strong></li>\n</ol>\n<p>表示事务一旦被提交，其结果就是永久性的，它对数据库中数据的改变是持久的，即便数据库发生故障也不应该对其产生影响；</p>\n<h3> 脏读、幻读 &amp; 不可重复读</h3>\n<p>了解事务隔离级别之前，先来看看这几个读的概念：</p>\n<ol>\n<li><strong>脏读（Dirty Read）</strong></li>\n</ol>\n<p>表示某一事务已经更新了一份数据，另一个事务在此时读取了同一份数据。当前一个事务撤销操作后，就会导致后一个事务所读取的数据不正确。</p>\n<ol start=\"2\">\n<li><strong>幻读（Phantom Read）</strong></li>\n</ol>\n<p>在一个事务的两次查询中数据量不一致，假如有一个事务查询了几列数据，同时另一个事务中在此时查询了新的数据，则查询事务在后续查询中，就会发现数据比最开始的查询数据更丰富。</p>\n<ol start=\"3\">\n<li><strong>不可重复读（Non-repeatable Read）</strong></li>\n</ol>\n<p>一个事务中两次查询数据不一致，有可能是因为两次查询过程中插入了一个更新原有数据的事务。</p>\n<p><strong>注意：不可重复读和幻读的区别在于：</strong></p>\n<blockquote>\n<p><strong>不可重复读的重点在于修改，</strong> 比如多次读取一条记录发现其中某些列的值被修改，而 <strong>幻读的重点在于新增或删除</strong>，比如多次读取一条记录发现记录增多或减少了。</p>\n</blockquote>\n<h3> 隔离级别</h3>\n<p>SQL 标准定义了 4 个隔离级别，隔离级别从低到高分别是：</p>\n<ol>\n<li><strong>READ-UNCOMMITTED（读取未提交）</strong></li>\n</ol>\n<p>最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能导致脏读、幻读或不可重复读</strong>。</p>\n<ol start=\"2\">\n<li><strong>READ-COMMITTED（读取已提交）</strong></li>\n</ol>\n<p>允许读取并发事务已经提交的数据，<strong>能够阻止脏读，但可能导致幻读或不可重复读</strong>。</p>\n<ol start=\"3\">\n<li><strong>REPEATABLE-READ（可重复读）</strong></li>\n</ol>\n<p>对同一字段的多次读取结果时一致的，除非数据是被本身事务自己所修改，<strong>能够阻止脏读和不可重复读，但可能导致幻读</strong>。</p>\n<ol start=\"4\">\n<li><strong>SERIALIZABLE（可串行化）</strong></li>\n</ol>\n<p>最高的隔离级别，完全服从 ACID 的隔离级别，所有事务依次逐个执行，这样事务之间就完全不可能产生干扰，<strong>能够防止脏读、幻读以及不可重复读</strong>。</p>\n<p>以下是 SQL 隔离级别和各种读之间的关系：</p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>READ-UNCOMMITTED</code></td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>READ-COMMITTED</code></td>\n<td>❌</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>REPEATABLE-READ</code></td>\n<td>❌</td>\n<td>❌</td>\n<td>✔</td>\n</tr>\n<tr>\n<td><code>SERIALIZABLE</code></td>\n<td>❌</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n</tbody>\n</table>\n<h3> 实例</h3>\n<p>关于回滚，主要涉及 <code>Connection</code> 对象，常用的三个方法如下：</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>void</code></td>\n<td><code>setAutoCommit(boolean autoCommit)</code></td>\n<td>设定连接的自动提交模式，<code>true</code> 表示自动提交，<code>false</code> 表示手动提交</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>commit()</code></td>\n<td>使上次提交/回滚以来所做的所有更改成为永久更改，并释放此 <code>Connection</code> 对象当前持有的所有数据库锁</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><code>rollback()</code></td>\n<td>撤销当前十五中所做的所有更改，并释放此 <code>Connection</code> 对象当前持有的所有数据库锁</td>\n</tr>\n</tbody>\n</table>\n<p>以下是一个回滚实例，我们当我们第一次插入一条数据时，由于是新数据，所以不会报错，但是如果我们执行一次程序之后再次执行，此时按理来说就会报错，因为插入的数据重复，这时候利用事务就可以十分方便的解决这个问题，我们设置插入出错就回滚到未出错之前的状态，这样就能保证插入数据不会报错了。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>除了上述回滚的方式外，JDBC 还支持设置保存点的方式，我们可以使用事务回滚到指定的保存点，主要涉及的方法如下：</p>\n<ul>\n<li><code>setSavepoint(String savePointName)</code>：创建新的保存点，返回一个 <code>SavePoint</code> 对象；</li>\n<li><code>rollback(String savePointName)</code>：回滚到指定保存点；</li>\n</ul>\n<h2> 连接池</h2>\n<h3> 简介</h3>\n<p>当我们使用多线程时，每个线程如果都需要连接数据库来执行 SQL 语句，那么每个线程都得创建一个连接，然后在使用之后关闭。这个创建和关闭连接的过程是十分耗时的，一旦多线程并发时，就容易导致系统卡顿。针对这一问题，提出使用数据库连接池。数据库连接池，其实就相当于一个集合，是一个存放数据库连接的容器。当我们的系统初始化好之后，集合就被创建，集合中会申请一些连接对象，当用户来访问数据库时，从集合中获取连接对象，一旦用户访问完毕，就将连接对象返还给容器。</p>\n<p>使用数据库连接池的优点：一来是节约资源，二来提高了用户访问的效率。</p>\n<h3> 常用数据库连接池</h3>\n<h4> C3P0</h4>\n<ol>\n<li>导包</li>\n</ol>\n<p>首先需要导包，先去下载 C3P0 对象的 jar 包，下载地址：https://sourceforge.net/projects/c3p0/，然后将其中的如下两个包导入；</p>\n<figure><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li>定义配置文件</li>\n</ol>\n<p>创建 C3P0 对应的配置文件，注意：配置文件一般放在 <code>src</code> 路径下，而且文件的名称要必须为以下其中的一个：</p>\n<ul>\n<li><code>c3p0.properties</code></li>\n<li><code>c3p0-config.xml</code></li>\n</ul>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>\n<p>创建连接池对象</p>\n</li>\n<li>\n<p>获取连接对象</p>\n</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h4> Druid</h4>\n<ol>\n<li>导包</li>\n</ol>\n<p>导入 Druid 的 jar 包，下载地址：https://repo1.maven.org/maven2/com/alibaba/druid/</p>\n<ol start=\"2\">\n<li>定义配置文件</li>\n</ol>\n<p>配置文件名称无要求，但是后缀名为 <code>.properties</code>，而且可以存放在任意目录下；</p>\n<div class=\"language-properties line-numbers-mode\" data-ext=\"properties\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>加载配置文件</li>\n<li>创建连接池对象</li>\n<li>获取连接对象</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 总结</h2>\n<p>今天的内容到此就结束了，老规矩，点赞关注走一波 🧐。</p>\n<p>对于文中有错或遗漏的地方，还烦请各位大佬在评论区指出来。我是村雨遥，一个技术栈主要为 Java 的菜鸟程序员，关注我，一起学习成长吧！</p>\n<p><strong>关注公众号，获取最新文章更新</strong></p>\n<div style=\"text-align:center\">\n<figure><img src=\"https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif\" alt=\"\" width=\"200\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n</div>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "是时候拥抱 Junit 单元测试了",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220718-test-with-junit.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220718-test-with-junit.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 https://mp.weixin.qq.com/s/_FWd0Bj3DlbCReex6pqJKQ 何为测试 在计算机领域中，所谓测试，描述的是一种用来鉴定软件正确性、完整性和质量的过程。而软件测试又一般可以分为黑盒测试和白盒测试，两者的相关定义如下。 黑盒测试 黑盒测试（black-box tes...",
      "content_html": "<h1> 是时候拥抱 Junit 单元测试了</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n<p>https://mp.weixin.qq.com/s/_FWd0Bj3DlbCReex6pqJKQ</p>\n</div>\n<h2> 何为测试</h2>\n<p>在计算机领域中，所谓测试，描述的是一种用来鉴定软件正确性、完整性和质量的过程。而软件测试又一般可以分为黑盒测试和白盒测试，两者的相关定义如下。</p>\n<h3> 黑盒测试</h3>\n<blockquote>\n<p>黑盒测试（<code>black-box testing</code>），也称黑箱测试，是软件测试方法，测试应用程序的功能，而不是其内部结构或运作。测试者不需具备应用程序的代码、内部结构和编程语言的专门知识。测试者只需知道什么是系统应该做的事，即当键入一个特定的输入，可得到一定的输出。测试案例是依应用系统应该做的功能，照规范、规格或要求等设计。测试者选择有效输入和无效输入来验证是否正确的输出。</p>\n</blockquote>\n<p>黑盒测试方法可适合大部分的软件测试，例如集成测试（<code>integration testing</code>）以及系统测试（<code>system testing</code>）。</p>\n<h3> 白盒测试</h3>\n<blockquote>\n<p>白盒测试（<code>white-box testing</code>），又称透明盒测试 <code>glass box testing</code>、结构测试 <code>structural testing</code> 等）是一个测试软件的方法，测试应用程序的内部结构或运作，而不是测试应用程序的功能（即黑盒测试）。在白盒测试时，以编程语言的角度来设计测试案例。测试者输入资料验证资料流在程序中的流动路径，并确定适当的输出，类似测试电路中的节点。</p>\n</blockquote>\n<p>白盒测试可以应用于单元测试（<code>unit testing</code>）、集成测试（<code>integration testing</code>）和系统的软件测试流程，可测试在集成过程中每一单元之间的路径，或者主系统跟子系统中的测试。尽管这种测试的方法可以发现许多的错误或问题，它可能无法检测未使用部分的规范。</p>\n<p>介绍一下黑白盒测试，主要是为了大家有一个概念，明白两者之间的区别，关于更多测试的内容，这里就不展开讲了，毕竟我们的重点是 JUnit。</p>\n<h2> JUnit 简介</h2>\n<h3> 什么是 JUnit</h3>\n<blockquote>\n<p>官网：https://junit.org/</p>\n</blockquote>\n<p>JUnit 是一个编写可重复测试的简单框架，是单元测试框架 xUnit 的一个实例，属于白盒测试。</p>\n<p>针对 Java 语言而言，程序中最小的功能单元是方法，因此，对 Java 程序进行单元测试就是针对单个 Java 方法的测试。</p>\n<p>在我们简单的小程序中，平常测试使用的方法是在主类中创建对象，然后调用对应方法。但是这样一来存在两个缺点：</p>\n<ol>\n<li>不能将测试代码和业务代码分离；</li>\n<li>未打印出测试结果和期望结果；</li>\n</ol>\n<p>因此此时我们就需要一种新的测试框架来帮助我们编写测试，而 JUnit 则是专门针对 Java 而设计的一种标准单元测试框架。作为一个 Java 开发者，学习 JUnit 来进行测试是必备技能。</p>\n<h3> 如何安装 JUnit</h3>\n<ul>\n<li><strong>本地安装</strong></li>\n</ul>\n<p>对于这种方法，我们只需要去下载 JUnit 最新的包，当前有 Junit4 和 Junit5 两个版本，可以根据自己的需要进行选择然后导入我们 IDE 的依赖文件即可，依赖文件下载地址如下：</p>\n<blockquote>\n<p>JUnit4：https://github.com/junit-team/junit4/releases/</p>\n<p>JUnit5：https://github.com/junit-team/junit5/releases/</p>\n</blockquote>\n<p>以 IDEA 为例，依次打开 <code>File -&gt; Project Structure -&gt; Project Settings -&gt; Modules -&gt; Dependencies -&gt; 点击 + -&gt; Library... -&gt; Java</code>，最后找到下载的 JUnit 文件即可；</p>\n\n<ul>\n<li><strong>Maven 安装</strong></li>\n</ul>\n<p>当使用 Maven 之后，我们就能十分简单地安装 JUnit 了，只需要在项目的 <code>pom.xml</code> 配置文件中导入依赖即可；</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 使用 Junit 进行单元测试</h3>\n<p>首先我们需要有一个主类，然后基于该类来进行测试，这里我们以简单的运算器为例；</p>\n<p>创建一个简易计算机类 <code>Calc</code>，然后包括加法 <code>add</code> 和减法 <code>sub</code> 两个方法；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>定义好上述主类之后，我们来进行测试，测试步骤如下；</p>\n<ol>\n<li><strong>定义测试类</strong></li>\n</ol>\n<p>定义测试类时，我们推荐定义类名时就是 <strong>主类 Test</strong> 的形式，比如我们上面的类为 <code>Calc</code>，我们要对其进行测试，则测试类的类名为 <code>CalcTest</code>；</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>定义测试方法</strong></li>\n</ol>\n<p>测试类定义好之后，我们就可以定义测试方法了，而定义测试方法时，我们也有几点建议；</p>\n<ul>\n<li>测试方法名是在主类方法名前加上 <code>test</code>，比如我们上边的方法为 <code>add</code>，则我们对应的测试方法名为 <code>testAdd</code>；</li>\n<li>针对测试方法的返回值，因为我们只需要在方法内给出结果即可，不用再供其他人调用，所以建议返回值设置为 <code>void</code>；</li>\n<li>针对测试方法的参数列表，由于我们主要还是针对传统建类调用方法测试的方法，所以此时最好是保持参数列表为空；</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中，<code>@Test</code> 为注解，用来注释一个普通的方法为一条测试用例。<code>assertEquals</code> 方法用于断言两个值是否相等。</p>\n<p>如果测试成功，则在 IDE 中会出现如下提示。</p>\n<figure><figcaption></figcaption></figure>\n<p>一般来讲，测试成功一般是绿色，而测试失败则是红色。</p>\n<ul>\n<li>测试成功的界面</li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<ul>\n<li>测试失败的界面</li>\n</ul>\n<figure><figcaption></figcaption></figure>\n<p>总结起来，我们针对一个方法的具体测试的步骤如下：</p>\n<ol>\n<li>首先是创建被测试类的对象；</li>\n<li>然后调用被测试的方法；</li>\n<li>最后加入断言，判断调用方法得到结果和实际的结果之间是否相同；</li>\n</ol>\n<h2> JUnit 常用注解</h2>\n<p>由于现在主要用到的有 Junit4 和 Junit5 两个版本，而两者之间也是存在一些区别的，所以在这里给出两者中常用注解的一些差异。</p>\n<p>下表中，给出了 Junit4 和 Junit5 中所共有功能的对应注解：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Junit4 注解</th>\n<th>Junit5 注解</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>@Test</code></td>\n<td><code>@Test</code></td>\n<td style=\"text-align:left\">标识一条测试用例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>@Ignore</code></td>\n<td><code>@Disable</code></td>\n<td style=\"text-align:left\">忽略的测试用例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>@Before</code></td>\n<td><code>@BeforeEach</code></td>\n<td style=\"text-align:left\">每一个测试方法之前运行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>@After</code></td>\n<td><code>@AfterEach</code></td>\n<td style=\"text-align:left\">每一个测试方法之后运行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>@BefreClass</code></td>\n<td><code>@BeforeAll</code></td>\n<td style=\"text-align:left\">所有测试开始之前运行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>@AfterClass</code></td>\n<td><code>@AfterAll</code></td>\n<td style=\"text-align:left\">所有测试结果之后运行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>@Category</code></td>\n<td><code>@Tag</code></td>\n<td style=\"text-align:left\">标记和过滤</td>\n</tr>\n</tbody>\n</table>\n<p>而相对于 Junit4，Junit5 也有做出升级，其特有的一些注解如下：</p>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@TestFactory</code></td>\n<td>测试工厂进行动态测试</td>\n</tr>\n<tr>\n<td><code>@Nested</code></td>\n<td>嵌套测试</td>\n</tr>\n<tr>\n<td><code>@ExtendWith</code></td>\n<td>注册自定义扩展</td>\n</tr>\n</tbody>\n</table>\n<h2> 常用断言方法</h2>\n<p>而在测试中，我们经常用到断言方法。这些断言方法都来自于由继承了 <code>java.lang.Object</code> 的 <code>Assert</code> 类，用于提供编写测试。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>void assertArrayEquals([String message],expected array, result array)</code></td>\n<td style=\"text-align:left\">断言预期数组和结果数组相等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>void assertEquals([String message],expected value, actual value)</code></td>\n<td style=\"text-align:left\">断言两个值是否相等。类似于字符串比较使用的 <code>equals()</code> 方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>void assertNotEquals(String message], first, second)</code></td>\n<td style=\"text-align:left\">查看两个对象是否不相等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>void assertNull(String message], object)</code></td>\n<td style=\"text-align:left\">查看对象是否为空</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>void assertNotNull(String message], object)</code></td>\n<td style=\"text-align:left\">查看对象是否不为空</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>void assertSame(String message], expected, actual)</code></td>\n<td style=\"text-align:left\">查看两个对象的引用是否相等。类似于使用 <code>==</code> 比较两个对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>void assertNotSame(String message], unexpected, actual)</code></td>\n<td style=\"text-align:left\">查看两个对象的引用是否不相等。类似于使用 <code>!=</code> 比较两个对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>void assertTrue(String message], boolean condition)</code></td>\n<td style=\"text-align:left\">查看运行结果是否为 <code>true</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>void assertFalse([String message], boolean condition)</code></td>\n<td style=\"text-align:left\">查看运行结果是否为 <code>false</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>void assertThat([String message], actual, matcher)</code></td>\n<td style=\"text-align:left\">查看实际值是否满足指定的条件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>fail()</code></td>\n<td style=\"text-align:left\">让测试失败</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 总结</h2>\n<p>好了，以上就是有关单元测试 Junit 的简单使用指南了。虽说大家现在还是有很多人在使用 Junit4，但如果你之前并未接触过 Junit，个人建议那就直接学习 Junit5 吧。当然了，Junit4 了解也是很有必要的，毕竟技多不压身，多一份技能少求人嘛。</p>\n<p><strong>关注公众号，获取最新文章更新</strong></p>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "Lombok 安装及使用指南",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220719-lombok-install-and-usage.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220719-lombok-install-and-usage.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 https://mp.weixin.qq.com/s/t4h5VRfbYqNIRZVlMaqPEg 简介 为了减少写一些 get/set/toString 方法，让项目代码更加整洁，提高开发效率，发现大家都开始采用 Lombok 这个工具。Lombok 是一个 Java 类库，它会自动插入编辑器和构...",
      "content_html": "<h1> Lombok 安装及使用指南</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n<p>https://mp.weixin.qq.com/s/t4h5VRfbYqNIRZVlMaqPEg</p>\n</div>\n<h2> 简介</h2>\n<p>为了减少写一些 <code>get/set/toString</code> 方法，让项目代码更加整洁，提高开发效率，发现大家都开始采用 Lombok 这个工具。Lombok 是一个 Java 类库，它会自动插入编辑器和构建工具，用于帮助开发人员消除 Java 中冗长样板代码。而我们开发人员所要做的，仅仅是添加几个 Lombok 中的注解，就可以替换掉原来的多行 <code>get/set/toString</code> 方法代码，既简洁也易于维护。下面我们就来看看，如何安装并使用这一工具。</p>\n<h2> 安装 Lombok</h2>\n<p>日常开发中，相信大多数人现在使用的都是 IDEA 这个 Java 神器了，如果你还在使用 Eclipse 或者 MyEclipse 等工具，那强烈推荐你去体验一把 IDEA，相信你一用上它就会爱上它的强大！下面我就以在 IDEA 中使用 Lombok 为例，看看如何安装并使用它。</p>\n<p>在先前 IDEA 的版本中，Lombok 是需要通过插件来安装的，安装方法如下：依次进入<code>File -&gt; Settings -&gt; Plugins</code>，然后搜索 Lombok ，最后进行安装即可。而在新版本的 IDEA 中，Lombok 已经被集成到 IDEA 中，我们不用再去安装它就可以直接使用，可以说是十分方便了。</p>\n<ul>\n<li>老版本 IDEA 安装 Lombok</li>\n</ul>\n\n<ul>\n<li>新版本中集成了 Lombok</li>\n</ul>\n\n<p>以上就是 Lombok 的安装过程了，是不是十分简单？那接下来我们就来看看，如何在我们的项目中使用 Lombok！</p>\n<h2> Lombok 使用</h2>\n<p>现在大家进行项目管理时用的工具大多应该都是 Maven，所以我们直接在需要使用 Lombok 的项目中加入 Lombok 编译支持，也就是在 <code>pom.xml</code> 文件中加入以下依赖。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>导入相关依赖之后，接下来就是具体使用过程了。</p>\n<h3> 具体使用</h3>\n<p>在需要的实体类中引入相关注解即可，只不过注解不同它们所对应的功能也不同，而且同一个注解可能在不同位置的功能也不一样。如下图；</p>\n<figure><figcaption></figcaption></figure>\n<h3> 常用注解</h3>\n<h4> @Data</h4>\n<p>注解在 <strong>类</strong> 上：给类的所有属性提供 <code>get</code> 和 <code>set</code> 方法，此外还有 <code>equals、canEqual、hashCode、toString</code> 方法以及 <strong>默认参数为空的构造方法</strong>；</p>\n<ul>\n<li><strong>使用前</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>使用后</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> @Setter</h4>\n<p>注解在 <strong>类</strong> 上：为该类所有属性均提供 <code>set</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>\n<ul>\n<li><strong>使用前</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>使用后</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注解在 <strong>属性</strong> 上：为该属性提供 <code>set</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>\n<ul>\n<li><strong>使用前</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>使用后</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> @Getter</h4>\n<p>注解在 <strong>类</strong> 上：为该类所有属性均提供 <code>get</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>\n<ul>\n<li><strong>使用前</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>使用后</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注解在 <strong>属性</strong> 上：为该属性提供 <code>get</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>\n<ul>\n<li><strong>使用前</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>使用后</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> @ToString</h4>\n<p>注解在 <strong>类</strong> 上：生成所有参数的 <code>toString()</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>\n<ul>\n<li><strong>使用前</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>使用后</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> @Value</h4>\n<p>注解在 <strong>类</strong> 上：生成 <code>get</code> 方法，以及 <code>equals、hashCode、toString</code> 方法，同时提供 <strong>含所有参数的构造方法</strong>；</p>\n<ul>\n<li><strong>使用前</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>使用后</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> @AllArgsConstructor</h4>\n<p>注解在 <strong>类</strong> 上：为类提供一个 <strong>全参构造方法</strong>，但此时不再提供默认构造方法；</p>\n<ul>\n<li><strong>使用前</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>使用后</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> @NoArgsConstructor</h4>\n<p>注解在 <strong>类</strong> 上：为类提供一个 <strong>无参构造方法</strong>；</p>\n<ul>\n<li><strong>使用前</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>使用后</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> @RequiredArgsConstructor</h4>\n<p>注解在 <strong>类</strong> 上：使用类中所有带 <code>@NonNull</code> 注解的或带有 <code>final</code> 修饰的成员变量生成对应构造方法；</p>\n<ul>\n<li><strong>使用前</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>使用后</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> @NonNull</h4>\n<p>注解在 <strong>属性</strong> 上，自动生成一个关于该参数的非空检查，若参数为 <code>null</code>，则抛出一个空指针异常，同时提供 <strong>默认构造方法</strong>，具体用法可以参照上面的例子；</p>\n<h4> @EqualsAndHashCode</h4>\n<p>注解在 <strong>类</strong> 上，生成 <code>equals、canEquals、hasnCode</code> 方法，同时会生成默认构造方法；</p>\n<ul>\n<li><strong>使用前</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>使用后</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> @Cleanup</h4>\n<p>注解在 <strong>局部变量</strong> 前，保证该变量代表的资源使用后自动关闭，默认调用资源的 <code>close()</code> 方法，若该资源有其它关闭方法，可用 <code>@Cleanup(\"方法名\")</code> 来指定要调用的方法，同时提供 默认构造方法；</p>\n<ul>\n<li><strong>使用前</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>使用后</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> @Synchronized</h4>\n<p>注解在 <strong>类方法 或 实例方法</strong>：效果与 <code>synchronized</code> 关键字相同，区别在于锁对象不同，对于类方法和实例方法，<code>synchronized</code> 关键字的锁对象分别是 <strong>类的</strong> <code>**class**</code> <strong>对象和</strong> <code>**this**</code> <strong>对象</strong>，而 <code>@Synchronized</code> 的锁对象分别是 <strong>私有静态</strong> <code>**final**</code> <strong>对象</strong> <code>**lock**</code> <strong>和 私有</strong> <code>**final**</code> <strong>对象</strong> <code>**lock**</code>，也可以自己指定锁对象，同时提供默认构造方法；</p>\n<ul>\n<li><strong>使用前</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>使用后</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> @SneakyThrows</h4>\n<p>注解在 <strong>方法</strong> 上：将方法中的代码用 <code>try-catch</code> 语句包裹，捕获异常并在 <code>catch</code> 中用 <code>Lombok.sneakyThrow(e)</code> 将异常抛出，还可以用 <code>@SneakyThrows(Exception.class)</code> 的形式指定抛出异常类型，同时提供 <strong>默认构造方法</strong>；</p>\n<ul>\n<li><strong>使用前</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>使用后</strong></li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> @Log</h4>\n<p>注解在 <strong>类</strong> 上：主要用于我们记录日志信息，同时提供 <strong>默认构造方法</strong>。它封装了多个主流 <code>Log</code> 库，主要有如下几个；</p>\n<ul>\n<li>\n<p><code>@Log</code></p>\n</li>\n<li>\n<p><code>@Slf4j</code></p>\n</li>\n<li>\n<p><code>Log4j</code></p>\n</li>\n<li>\n<p><code>Log4j2</code></p>\n</li>\n</ul>\n<h2> 总结</h2>\n<p>以上就是关于 Lombok 的相关使用小技巧了，如果你还没有使用过它，那就赶紧去试试吧！</p>\n<p>最后，创作不易，如果你觉得我的文章对你有所帮助，那就来个一键三连吧！</p>\n<h2> 参考资料</h2>\n<ol>\n<li>https://projectlombok.org/features/all</li>\n</ol>\n<p><strong>关注公众号，获取最新文章更新</strong></p>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "Fastjson V2 简单使用手册",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220720-fastjson2-quickstart.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220720-fastjson2-quickstart.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 前言 在日常 Java 企业级开发中，可能避不开 JSON 这个格式。 JSON 源于 1999 年的 JS 语言规范 ECMA262 的一个子集，然后又在 2003 年作为一种数据格式 ECMA404 发布，到了 2006 年，又作为 rfc4627 发布。直到现在，JSON 的应用已经十分广泛了。 J...",
      "content_html": "<h1> Fastjson V2 简单使用手册</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<h2> 前言</h2>\n<p>在日常 Java 企业级开发中，可能避不开 <code>JSON</code> 这个格式。 <code>JSON</code> 源于 1999 年的 <code>JS</code> 语言规范 <code>ECMA262</code> 的一个子集，然后又在 2003 年作为一种数据格式 <code>ECMA404</code> 发布，到了 2006 年，又作为 <code>rfc4627</code> 发布。直到现在，<code>JSON</code> 的应用已经十分广泛了。</p>\n<p><code>JSON</code> 基于纯文本，所以阅读起来也十分轻松，而且规范简单，容易处理，能够做到开箱即用，最最重要的是，<code>JSON</code> 和平台无关，所以能够作为不同系统间的传输格式协议。</p>\n<p><code>JSON</code> 有 7 大基本数值，分别是：<code>false</code>、<code>null</code>、<code>true</code>、<code>object</code>、<code>array</code>、<code>number</code>、<code>string</code>。其结构也非常简单，只有两种结构：一个是 <strong>数组</strong>，一个是<strong>对象中的键值对集合</strong>。其中，对象用 <code>{}</code> 来表示，其内部是 <code>key:value</code> 形式，而数组则是用 <code>[]</code> 来表示，不同值之间用逗号 <code>,</code> 分隔。</p>\n<p>以下就是一个 <code>JSON</code> 的简单示例：</p>\n<div class=\"language-json line-numbers-mode\" data-ext=\"json\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>而在 Java 中，主流的 <code>JSON</code> 库只要有以下三个：</p>\n<ol>\n<li><code>Fastjson</code>：国内阿里巴巴公司所开发的 <code>JSON</code> 库，性能出众且快速。</li>\n<li><code>Jackson</code>：<code>Spring</code> 默认的 <code>JSON</code> 库，社区十分活跃，更新迭代快。</li>\n<li><code>Gson</code>：谷歌出品的 <code>JSON</code> 库，算是目前来说功能最全的 <code>JSON</code> 库了。</li>\n</ol>\n<p>得益于 <code>Fastjson</code> 的超高性能，国内的大部分公司都选择了阿里出品的 <code>Fastjson</code> 作为处理 <code>JSON</code> 的工具库。本文就来看看，<code>Fastjson</code> 的一些常用的使用技巧。</p>\n<h2> 使用技巧</h2>\n<p>首先，我们创建一个 <code>Maven</code> 项目，用来演示 <code>Fastjson</code> 的使用，也方便我们管理依赖。同时，这里选择 <code>Fastjson v2</code> 来作为今天的演示主角。</p>\n<p>当然，首要的工作就是创建一个 <code>Maven</code> 项目，如果你还有点摸不着头脑，那可以移步先去看看前备知识：</p>\n<blockquote>\n<p><a href=\"https://cunyu1943.github.io/JavaPark/md/java/maven/20220104-maven-project-with-idea\" target=\"_blank\" rel=\"noopener noreferrer\">Maven 教程：使用 IDEA 创建 Maven 项目</a></p>\n</blockquote>\n<p>当我们创建完成一个 <code>Maven</code> 项目之后，首要的工作就是在项目的 <code>pom.xml</code> 中添加 <code>Fastjson V2</code> 的依赖。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>接着我们创建一个 <code>Hero</code> 类，方便后续过程中的使用。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> Java 对象序列化为 JSON</h3>\n<p>在我们的主类中创建一个 <code>Hero</code> 对象，然后利用 <code>toJSONString()</code> 方法将其转换为 <code>JSON</code> 字符串，可以看到结果正确转换了。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> JSON 解析为 Java 对象</h3>\n<p>假设有一个 <code>JSON</code> 字符串，我们想将其转换为 Java 对象，则可以使用 <code>parseObject()</code> 方法。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> JSON 解析为 JSONObject</h3>\n<p>将 <code>JSON</code> 解析为 <code>JSONObject</code> 的方法和将 <code>JSON</code> 转换为 Java 对象的方法类似，但是少了一个参数，这里需要注意。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> JSON 解析为 JSONArray</h3>\n<p>要将 <code>JSON</code> 解析为 <code>JSONArray</code>，此时可以使用 <code>parseArray()</code> 方法。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 总结</h2>\n<p>以上就是日常开发中常见的 4 种其他格式和 <code>JSON</code> 格式之间的转换过程了，其中，最常用的应该莫过于 <code>JSON</code> 和 Java 对象之间的相互转换了，一定要熟练掌握！关于 <code>Fastjson V2</code> 的简单使用就介绍到这里了，关于更多 <code>Fastjson V2</code> 的高级使用技巧，等待我们后续文章再见吧！</p>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "深入浅出 Java 注解",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220721-annotations.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220721-annotations.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 注解简介 所谓注解，其实就像一种拥有特定作用的注释，自 JDK1.5 及之后版本所引入的特性，它是放在 Java 源码的类、方法、字段、参数前的一种用作标注的“元数据”，与类、接口、枚举处于同一个层次中。 通过其作用的不同，我们常常将注解分为如下 3 类： 1. 编写文档：通过代码中标识的注解生成对应文档...",
      "content_html": "<h1> 深入浅出 Java 注解</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<h2> 注解简介</h2>\n<p>所谓注解，其实就像一种拥有特定作用的注释，自 JDK1.5 及之后版本所引入的特性，它是放在 Java 源码的类、方法、字段、参数前的一种用作标注的“元数据”，与类、接口、枚举处于同一个层次中。</p>\n<p>通过其作用的不同，我们常常将注解分为如下 3 类：</p>\n<ol>\n<li><strong>编写文档</strong>：通过代码中标识的注解生成对应文档（即类似于 Java doc 的文档）；</li>\n<li><strong>代码分析</strong>：通过代码中标识的注解对代码进行分析（使用反射）；</li>\n<li><strong>编译检查</strong>：通过代码中标识的注解让编译器能实现基本的编译检查（<code>@Override</code>）；</li>\n</ol>\n<h2> 常用的预定义注解</h2>\n<h3> <code>@Override</code></h3>\n<p>一般是用在方法上，表示重写该父类的方法，比如我们使用最多的 <code>toString()</code> 方法，它是 <code>Object</code> 类的一个方法，而我们的写的类都是继承自 <code>Object</code> 类，所以我们自定义的所有类都是有 <code>toString()</code> 方法的。但是如果我们自定义类中的方法在父类中没有，则不能使用该注解，否则会导致无法编译通过。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> <code>@Deprecated</code></h3>\n<p>一般用在方法之前，表示该方法已经过期，不建议再继续使用（但是仍然有效，只不过可能有更新的版本，推荐使用更新的版本）。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h3> <code>@SuppressWarnings</code></h3>\n<p>表示忽略警告信息，常用的值以及含义如下表：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>deprecation</code></td>\n<td>使用了不赞成使用的类或方法时的警告</td>\n</tr>\n<tr>\n<td><code>unchecked</code></td>\n<td>使用了未经检查的转换时的警告</td>\n</tr>\n<tr>\n<td><code>fallthrough</code></td>\n<td>当 <code>switch</code> 程序块直接通往下一种情况而没有 <code>break</code> 时的警告</td>\n</tr>\n<tr>\n<td><code>path</code></td>\n<td>在类路径、源文件路径等中有不存在的路径时的警告</td>\n</tr>\n<tr>\n<td><code>serial</code></td>\n<td>当在可序列化的类上缺少 <code>serialVersionUID</code> 定义时的警告</td>\n</tr>\n<tr>\n<td><code>finally</code></td>\n<td>任何 <code>finally</code> 子句不能正常完成时的警告</td>\n</tr>\n<tr>\n<td><code>rawtypes</code></td>\n<td>泛型类型未指明</td>\n</tr>\n<tr>\n<td><code>unused</code></td>\n<td>引用定义了，但是没有被使用</td>\n</tr>\n<tr>\n<td><code>all</code></td>\n<td>关闭以上所有情况的警告</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 自定义注解</h2>\n<h3> 格式</h3>\n<p>我们可以使用 <code>@interface</code> 来自定义注解，其格式如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>一个简单的示例如下，其中 <code>AnnoDemo</code> 代表着我们自定义注解的名称，而 <code>name()</code>、<code>age()</code>、<code>score()</code> 则分别表示自定义注解的三个属性，而且我们利用关键字 <code>default</code> 对每个属性都赋予了默认值。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 原理</h3>\n<p>注解本质上相当于一个接口，它默认继承自 <code>java.lang.annotation.Annotation</code>。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 参数</h3>\n<p>注解的参数类似于无参的方法，通常我们推荐用 <code>default</code> 来设定一个默认值，对于方法的基本要求通常有如下几点：</p>\n<ol>\n<li>方法的返回值类型不可以是 <code>void</code>；</li>\n<li>如果定义了方法，那么在使用时需要给方法进行赋值，赋值的规则如下：\n<ol>\n<li>若定义方法时，使用了关键字 <code>default</code> 对方法赋予了默认初始值，那么在使用注解时，可以不用对方法进行再次赋值；</li>\n<li>若只有一个方法需要赋值，且方法名为 <code>value</code>，那么此时 <code>value</code> 可以省略，直接定义值即可；</li>\n<li>数组赋值时，值需要用大括号 <code>{}</code> 包裹，若数组中只有一个值，那么此时 <code>{}</code> 可以省略；</li>\n</ol>\n</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如上述例子中，<code>name()</code>、<code>age()</code>、<code>score()</code> 就是我们自定义注解的参数。而当我们要是用该注解时，则通过如下方式来对参数进行赋值。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 元注解</h2>\n<h3> 定义</h3>\n<p>所谓元注解(<code>meta annotation</code>)，就是可以用来修饰其他注解的注解。</p>\n<h3> 常用的元注解</h3>\n<ol>\n<li><code>@Target</code></li>\n</ol>\n<p>描述注解所修饰的对象范围，其取值主要有如下几种：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ElementType.TYPE</code></td>\n<td>表示可以作用于类或接口</td>\n</tr>\n<tr>\n<td><code>ElementType.FIELD</code></td>\n<td>表示可以作用于成员变量</td>\n</tr>\n<tr>\n<td><code>ElementType.METHOD</code></td>\n<td>表示可以作用于方法</td>\n</tr>\n<tr>\n<td><code>ElementType.CONSTRUCTOR</code></td>\n<td>表示可以作用于构造方法</td>\n</tr>\n<tr>\n<td><code>ElementType.PARAMETER</code></td>\n<td>表示可以作用于方法的参数</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><code>@Retention</code></li>\n</ol>\n<p>用于约束注解的生命周期，其取值如下：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>RetentionPolicy.SOURCE</code></td>\n<td style=\"text-align:left\">表示在源代码文件中有效，注解将被编译器丢弃（注解信息仅保留在源码中，源码经编译后注解信息丢失，不再保留到字节码文件中）</td>\n</tr>\n<tr>\n<td><code>RetentionPolicy.CLASS</code></td>\n<td style=\"text-align:left\">表示在字节码文件中有效，注解在字节码文件中可用，但会被 JVM 丢弃</td>\n</tr>\n<tr>\n<td><code>RetentionPolicy.RUNTIME</code></td>\n<td style=\"text-align:left\">表示在运行时有效，此时可以通过反射机制来读取注解的信息</td>\n</tr>\n</tbody>\n</table>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li><code>@Documented</code></li>\n</ol>\n<p>描述其他类型的注解是否被抽取到 API 文档中。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"4\">\n<li><code>@Inherited</code></li>\n</ol>\n<p>这是一个标记注解，描述某个注解能够被子类继承，但是该元注解只适合已经配置了 <code>@Target(ElementType.TYPE)</code> 类型的自定义注解，而且仅针对于类的继承，而对于接口的继承则无效。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"5\">\n<li><code>@Repeatable</code></li>\n</ol>\n<p>该注解是从 JDK1.8 新引入的元注解，表示在同一位置能够重复相同的注解。在没有该注解之前，我们一般是无法在同一类型上使用相同注解的，但引入该注解后，我们就可以在同一类型上使用相同注解。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>利用 <code>@Repeatable</code> 配置自定义注解之后，我们就可以在某个类型声明处添加多个我们自定义的注解了。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 总结</h2>\n<p>总结上述的知识点，我们将自定义注解的过程归纳为如下 3 步。</p>\n<ol>\n<li><strong>定义一个注解</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>添加参数并设置默认值</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li><strong>利用元注解来配置我们的自定义注解</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在实际应用过程中，利用元注解配置自定义注解时，必须设置 <code>@Target</code> 和 <code>@Retention</code> 两个元注解，而且 <code>@Retention</code> 的值通常是设置为 <code>RetentionPolicy.RUNTIME</code>。</p>\n<p>好了，以上就是我们注解的相关概念以及自定义注解所需要的掌握的一些知识点了，如果你觉得对你有所帮助，那就来一波点赞关注吧！\n<strong>关注公众号，获取最新文章更新</strong></p>\n<div style=\"text-align:center\">\n<figure><img src=\"https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif\" alt=\"\" width=\"200\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n</div>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "Mockito + JUnit 单元测试实例",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220722-mockito.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20220722-mockito.html",
      "summary": "前言 在日常 Java 开发中，一般都需要进行单元测试，而 Mock 测试则是单元测试中的重要方法之一。所谓 Mock 测试，就是指在测试过程中，对于一些不容易构造或难以获取的较为复杂的对象，用一个虚拟的对象来代表，从而方便测试的一种测试方法。其中，这个虚拟的对象就叫做 Mock 对象，最常见的就是用它来代表 Servlet 中 HttpServlet...",
      "content_html": "<h1> Mockito + JUnit 单元测试实例</h1>\n<h2> 前言</h2>\n<p>在日常 Java 开发中，一般都需要进行单元测试，而 <code>Mock</code> 测试则是单元测试中的重要方法之一。所谓 <code>Mock</code> 测试，就是指在测试过程中，对于一些不容易构造或难以获取的较为复杂的对象，用一个虚拟的对象来代表，从而方便测试的一种测试方法。其中，这个虚拟的对象就叫做 <code>Mock</code> 对象，最常见的就是用它来代表 <code>Servlet</code> 中 <code>HttpServletRequest</code> 对象，<code>JDBC</code> 中的 <code>ResultSet</code> 对象等。</p>\n<p>通过使用 <code>Mock</code>，我们能够降低单元测试的耦合，如果代码中对其他类或者接口有依赖关系，通过 <code>Mock</code> 就能帮我们模拟出这些依赖，并且帮我们验证所调用的依赖行为。通过使用 <code>Mock</code>，我们就可以验证对象的某些方法的调用情况，调用了多少次，方法的参数又是哪些。</p>\n<p>之前我们介绍过 Junit 相关的知识点，不熟悉的小伙伴可以去看看我之前的一篇文章 -&gt;  <a href=\"/zzdxy/java-tutorial/javase/20220718-test-with-junit.html\" target=\"blank\">是时候拥抱 JUnit 单元测试了！</a> 。但使用 JUnit 时有个问题就是针对难以构造的复杂对象，我们可能需要费很大劲儿才能搞定。此时，我们就可以利用 <code>Mock</code> 测试和 JUnit 结合起来。</p>\n<p>在众多的 <code>Mock</code> 框架中，<code>Mockito</code> 算是比较流行的一个框架了，大家经常将它和 JUnit 结合起来使用。<code>Mockito</code> 允许我们创建和配置 <code>Mock</code> 对象，从而最大程度上简化对外部依赖的测试类的开发。</p>\n<p>通常，使用 <code>Mockito</code> 可以分为以下三个步骤：</p>\n<ol>\n<li>首先，模拟并替换测试代码中的外部依赖。</li>\n<li>其次，执行测试代码。</li>\n<li>最后，验证测试代码是否被正确执行。</li>\n</ol>\n<p>下面就来看看，如何使用 <code>Mockito</code> + JUnit。</p>\n<h2> 创建项目并添加依赖</h2>\n<p>既然要测试，那肯定得上代码了。这里为了方便管理依赖，所以创建一个 Maven 项目来作为示例。</p>\n<p>创建好项目之后，项目结构如下图所示。</p>\n<figure><figcaption></figcaption></figure>\n<p>紧接着，我们向项目的 <code>pom.xml</code> 中添加 <code>Mockito</code> 和 <code>JUnit</code> 的依赖。</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>最终得到的 <code>pom.xml</code> 文件内容如下：</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 编写代码并测试</h2>\n<p>经过创建项目并添加相关依赖之后，我们就可以来编写代码并继续测试了。</p>\n<p>同样的，首先我们在项目中添加一个简单的 <code>Demo</code> 类，并在其中声明一个方法，其最终代码如下。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>接着在 <code>Demo</code> 类中单击鼠标右键，选择 <code>Generate</code>，会弹出以下选择项，我们选择 <code>Test</code> 来自动生成该类的测试代码。</p>\n<figure><figcaption></figcaption></figure>\n<p>选择 <code>Test</code> 之后，IDEA 并不会立马生成对应的测试类，而是会弹出以下配置窗口让我们配置后再进行生成。这里主要注意的点在于：</p>\n<ol>\n<li><code>Testing library</code>：用于测试的类库，我们一般测试都是选择 <code>JUint4</code> 或者 <code>JUnit5</code>。</li>\n<li><code>Class name</code>：测试类的类名，这里一般默认的就是 <code>类名 + Test</code>，可以根据自己的需要来进行修改。</li>\n<li><code>Destination package</code>：生成的测试类所在的包，一般是对应于上面的类所在的包。</li>\n<li><code>Generate test methods for</code>：这里主要是选择需要生成测试的方法，在下面的 <code>Member</code> 中进行勾选即可。</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<p>配置完成后，IDEA 会在 <code>test/java</code> 文件夹下自动创建包并生成对应测试类，最终自动生成的测试类如下。</p>\n<figure><figcaption></figcaption></figure>\n<p>最后，我们按照 <code>Mock</code> 测试的三个步骤来书写代码，得到最终的测试方法如下。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中，<code>@Test</code> 是 <code>JUnit</code> 中的注解，用于标识测试方法。</p>\n<p>然后以上代码中的第 4 行则对应测试中的第一步，模拟外部依赖，创建 <code>Demo</code> 的对象。</p>\n<p>第 5 行则对应测试中的第二步，执行测试代码，然后返回执行结果。</p>\n<p>第 6 行则对应测试中的第三步，验证代码是否被正确执行。这里主要用到的是 <code>Mockito</code> 中的断言方法。</p>\n<p>最后，执行测试类中的方法，如果测试通过，则 IDEA 中出现如下结果。</p>\n<figure><figcaption></figcaption></figure>\n<p>假设我们修改下以上代码中断言中的期望值，则测试不通过，此时 IDEA 会返回断言中的提示信息。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<h2> 总结</h2>\n<p>以上内容就是关于 <code>Mockito</code> 搭配 <code>JUnit</code> 进行单元测试的简单示例了，主要从两个方面来展开。一方面是如何创建并添加对应依赖，另一方面则是如何编写代码并自动生成对应测试类，然后编写测试代码。而更多关于 <code>Mockito</code> 的使用技巧，我们将到另一篇文章中进行介绍。</p>\n",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "流程控制知识大闯关",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20221127-loop-in-action.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20221127-loop-in-action.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 https://mp.weixin.qq.com/s/K4aL8oND7RW0mooNhusw 前言 既然已经学习了 Java 中的流程控制，接下来就来实际操作下，利用我们所学知识来解决实际的问题。 光学是没有用的，只有不断实践才能了解其中的真正含义。 闯关 第一关：打印折纸的次数 1. 题目 已知...",
      "content_html": "<h1> 流程控制知识大闯关</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n<p>https://mp.weixin.qq.com/s/K4aL8o_ND7R_W0mooNhusw</p>\n</div>\n<hr>\n<h2> 前言</h2>\n<p>既然已经学习了 <code>Java</code> 中的流程控制，接下来就来实际操作下，利用我们所学知识来解决实际的问题。</p>\n<p>光学是没有用的，只有不断实践才能了解其中的真正含义。</p>\n<h2> 闯关</h2>\n<h3> 第一关：打印折纸的次数</h3>\n<ol>\n<li><strong>题目</strong></li>\n</ol>\n<p>已知世界上最高的山峰是珠穆朗玛峰，它的高度是 <code>8844.43</code> 米，假设有一张足够大的纸，其厚度为 <code>0.1</code> 毫米，那么请问我要折叠多少次，才能将这张纸折成珠穆朗玛峰的高度？</p>\n<ol start=\"2\">\n<li><strong>解析</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">折叠次数</th>\n<th style=\"text-align:center\">厚度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>1</code></td>\n<td style=\"text-align:center\"><code>0.1</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>2</code></td>\n<td style=\"text-align:center\"><code>0.2</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>3</code></td>\n<td style=\"text-align:center\"><code>0.4</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>4</code></td>\n<td style=\"text-align:center\"><code>0.8</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>……</code></td>\n<td style=\"text-align:center\"><code>……</code></td>\n</tr>\n</tbody>\n</table>\n<p>可以发现，纸张初始厚度为 <code>0.1</code> 毫米，而每次折叠之后，折叠后的纸张厚度都是未折叠前的 <code>2</code> 倍。而同时，我们事先是不清楚具体要叠多少次的，所以我们选择 <code>while</code> 来进行循环。</p>\n<ol start=\"3\">\n<li><strong>实现</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 第二关：回文数</h3>\n<ol>\n<li><strong>题目</strong></li>\n</ol>\n<p>假设给你一个整数 <code>x</code>，如果这个数是回文数，打印 <code>true</code>，否则打印 <code>false</code>。</p>\n<p>回文数：指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>\n<ol start=\"2\">\n<li><strong>解析</strong></li>\n</ol>\n<p>既然回文数的定义是正序和倒序读都是一样，那么我们就把这个数逆转，然后比较逆转的数和原来的数是否相等，如果相等，那么说明这个数是一个回文数，否则它就不是一个回文数。</p>\n<ol start=\"3\">\n<li><strong>实现</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 第三关：求商和余数</h3>\n<ol>\n<li><strong>题目</strong></li>\n</ol>\n<p>给定两个整数，分别是被除数和除数，然后在不使用乘法、除法和 <code>%</code> 运算符的情况下，求出商和余数。</p>\n<ol start=\"2\">\n<li><strong>解析</strong></li>\n</ol>\n<p>平时如果要求两数的商，那么可以使用 <code>/</code>，而要求两数的余数则可以使用 <code>%</code>。但现在已经规定不能使用这两个运算符，那么就只想另想办法。</p>\n<p>我们知道，其实乘除法归根结底还是加减法的简化，所以我们可以利用减法来实现求两数的商和余数。</p>\n<ol start=\"3\">\n<li><strong>实现</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 第四关：逢七必过</h3>\n<ol>\n<li><strong>题目</strong></li>\n</ol>\n<p>游戏规则：从任意一个数字开始报数，当要报的数字是包含 <code>7</code> 或 <code>7</code> 的倍数时，都要说：过。</p>\n<p>打印出 <code>1 - 100</code> 之间的满足逢七必过规则的数据。</p>\n<ol start=\"2\">\n<li><strong>解析</strong></li>\n</ol>\n<p>当一个数是 <code>7</code> 的倍数，那么这个数除以 <code>7</code> 的余数为 <code>0</code>。而如果这个数包含 <code>7</code>，那么这个数的个位或者十位是 <code>7</code>。</p>\n<ol start=\"3\">\n<li><strong>实现</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 第五关：平方根</h3>\n<ol>\n<li><strong>题目</strong></li>\n</ol>\n<p>输入一个大于等于 <code>2</code> 的整数，计算并返回这个数的平方根，结果只保留整数部分。</p>\n<ol start=\"2\">\n<li><strong>解析</strong></li>\n</ol>\n<p>求一个数的平方根，通过遍历的方式，如果在不大于所给数的范围之内存在一个数的平方等于所给数，那么范围内的这个数就是所给数的平方根。而如果范围内存在一个数的平方刚好大于所给数，那么比这个数小 <code>1</code> 的数一定是所给数的平方根的整数部分，也就是我们所求的结果。</p>\n<ol start=\"3\">\n<li><strong>实现</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 第六关：判断一个数是否为质数</h3>\n<ol>\n<li><strong>题目</strong></li>\n</ol>\n<p>从键盘输入一个正整数，判断该数是否为质数。</p>\n<ol start=\"2\">\n<li><strong>解析</strong></li>\n</ol>\n<p>所谓质数，就是指这个数只能被 <code>1</code> 和它本身整除，要注意 <code>1</code> 既不是质数也不是合数。</p>\n<p>此时通过遍历，如果 <code>1</code> 到它之间存在一个数能被所给数整除，那么说明说给数不是一个质数。</p>\n<ol start=\"3\">\n<li><strong>实现</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 第七关：猜数小游戏</h3>\n<ol>\n<li><strong>题目</strong></li>\n</ol>\n<p>系统随机给出一个 <code>1 - 100</code> 之间的整数，然后用程序实现才出这个数字是多少。</p>\n<ol start=\"2\">\n<li><strong>解析</strong></li>\n</ol>\n<p>随机数需要用 <code>Random</code> 包，然后就是通过比较输入的数和生成的随机数大小，直到最后猜中。</p>\n<ol start=\"3\">\n<li><strong>实现</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 总结</h2>\n<p>以上就是关于流程控制中关于 <code>for</code>、<code>while</code> 的知识测验了，你闯过了几关呢？</p>\n<p>最后，文中所有代码已上传到 <code>Gitee</code>，有需要的朋友可以自取。</p>\n<blockquote>\n<p>传送门：https://gitee.com/cunyu1943/java-in-practice</p>\n</blockquote>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "image": "https://zzdxy.github.io/zzdxy/zzdxy/contact/wechatpublic.svg =150x",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "static 和 final 小课堂",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20221203-oop-advance.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20221203-oop-advance.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 前言 学习了面向对象的一些知识点后，在看别人的代码中经常会看到 static 和 final 两个关键字，那你知道它俩都是做什么用的么，使用的时候需要注意啥呢？ 今天的内容就来一起了解下，static 和 final 关键字的使用。 static 静态的意思，是 Java 中常用的修饰符，既可以用它来修饰...",
      "content_html": "<h1> static 和 final 小课堂</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<h2> 前言</h2>\n<p>学习了面向对象的一些知识点后，在看别人的代码中经常会看到 <code>static</code> 和 <code>final</code> 两个关键字，那你知道它俩都是做什么用的么，使用的时候需要注意啥呢？</p>\n<p>今天的内容就来一起了解下，<code>static</code> 和 <code>final</code> 关键字的使用。</p>\n<h2> static</h2>\n<p>静态的意思，是 <code>Java</code> 中常用的修饰符，既可以用它来修饰成员变量，也可以用它来修饰成员方法。</p>\n<h3> 静态变量</h3>\n<p>静态变量就是用 <code>static</code> 来修饰的成员变量，最重要的特点就是一个类中的静态变量被类中的所有对象所共享。它不属于任何一个对象，而是属于类。其生命周期同类一样，共生共存，是优先于对象的。</p>\n<p>和成员变量不同的是，成员变量只能通过新建对象，然后用对象名来进行调用。而静态变量不仅仅可以用这种方式，还可以直接通过类名来进行调用，而这也是更为推荐的方式。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li><strong>成员变量调用</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>静态变量调用</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 静态方法</h3>\n<p>静态方法就是类中用 <code>static</code> 来修饰的成员方法，一般用来修饰公共的工具类或者测试类。</p>\n<p>同样的，静态方法既可以用通过新建对象，然后用对象名来调用的方式，也可以直接通过类名来调用的方式，这也是更为推荐的方式。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 注意</h3>\n<p>使用 <code>static</code> 修饰方法或变量后，需要注意以下的小细节。</p>\n<ul>\n<li>一个静态方法中<strong>只能</strong>访问静态变量和其他的静态方法。而不能访问非静态的变量和方法。</li>\n<li>但一个非静态方法一方面既可以访问静态变量，也可以访问非静态变量；另一方面，也既可以访问静态方法，也可以访问非静态方法。</li>\n<li>不同于成员方法，静态方式中是不存在 <code>this</code> 关键字的。</li>\n</ul>\n<h3> 静态代码块</h3>\n<p>在代码中用 <code>static{}</code> 包裹起来的代码叫做静态代码块，它会随着类的加载而加载，而且会自动触发，只执行一次，一般用来对一些数据初始化。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> final</h2>\n<h3> 修饰变量</h3>\n<p>用 <code>final</code> 修饰的变量叫做常量，说明它只能被赋值一次。</p>\n<p>实际开发中，一般用常量来作为系统的配置信息，一方面既方便维护，另一方面又可以提高代码可读性。</p>\n<p>对常量进行命名时，一般遵循以下的规范：</p>\n<ul>\n<li>如果是单个单词，那么将它全部大写即可。</li>\n<li>如果是多个单词，那么将每个单词都大写，并且单词之间用下划线 <code>_</code> 隔开。</li>\n</ul>\n<p>此外，对于修饰的变量的类型不同，含义也是不一样的。</p>\n<p>如果修饰的变量是一个基本类型，那么表示的是该变量存储的<strong>数据值</strong>不可改变。而如果修饰的变量是一个引用类型，则表示该变量存储的<strong>地址值</strong>不能改变，但是对象内部是可以发生变化的。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 修饰方法</h3>\n<p>说明该方法是最终方法，不能再被重写。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 修饰类</h3>\n<p>说明这个类时最终类，不能够再被继承。也就是说，如果一个类被 <code>final</code> 所修饰，那么这个类不能作为其他任意类的福来。如果试图对一个用 <code>final</code> 修饰的类进行继承，则在编译期间可能会发生错误。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 总结</h2>\n<p>今天的内容到此就结束了，首先介绍了 <code>static</code> 用来修饰符变量和方法的应用场景，还额外补充了静态代码块相关的知识点。另外，我们也对 <code>final</code> 用来修饰变量、方法和类时的场景进行了回顾。</p>\n<p>码字不易，如果本文对你所有帮助，那就来个一键三连吧！</p>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "image": "https://zzdxy.github.io/zzdxy/zzdxy/contact/wechatpublic.svg =150x",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "抽象、接口和内部类",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20221211-abstract.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20221211-abstract.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 抽象方法 定义 所谓抽象方法，就是将公共的行为（方法）抽取到一个父类后，由于每个子类中执行的内容是不一致的，所以父类中无法确认具体的方法体，此时就可以将该方法定义为抽象方法。 格式 要定义一个抽象方法，那么需要遵循以下的格式，要注意，抽象方法一般都是没有定义 以下是一个抽象方法定义的具体实例。 抽象类 定...",
      "content_html": "<h1> 抽象、接口和内部类</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<h2> 抽象方法</h2>\n<h3> 定义</h3>\n<p>所谓抽象方法，就是将公共的行为（方法）抽取到一个父类后，由于每个子类中执行的内容是不一致的，所以父类中无法确认具体的方法体，此时就可以将该方法定义为抽象方法。</p>\n<h3> 格式</h3>\n<p>要定义一个抽象方法，那么需要遵循以下的格式，要注意，抽象方法一般都是没有定义</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>以下是一个抽象方法定义的具体实例。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 抽象类</h2>\n<h3> 定义</h3>\n<p>知道了什么是抽象方法，那么抽象类就很简单了，如果我们发现一个类中存在着抽象方法，那么这个类一定要声明为抽象类。</p>\n<h3> 格式</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 注意</h3>\n<ol>\n<li>抽象类不能实例化。</li>\n<li>抽象类中不一定有抽象方法，但有抽象方法的类一定是抽象类。</li>\n<li>抽象类中可以有构造方法。</li>\n<li>如果一个类的父类是抽象类，那么这个类要么是抽象类，要么重写父类中所有的抽象方法。</li>\n</ol>\n<h3> 作用</h3>\n<p>在抽取共性时，如果无法确定方法体，此时就可以将该方法定义为抽象方法。然后强制让子类按照某种格式重写。</p>\n<h2> 接口</h2>\n<h3> 定义</h3>\n<p>接口是一种规则，是对行为的抽象。</p>\n<h3> 格式</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 注意</h3>\n<ol>\n<li>接口和抽象类一样，不能被实例化。</li>\n<li>接口和类之间是实现关系，通过关键字 <code>implements</code> 表示，实现格式为:</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"3\">\n<li>如果一个类实现了某个接口，那么这个类要么是抽象类，要么就得重写接口中所有的抽象方法。</li>\n<li>不同于类单继承的特点，一个类是可以实现多个接口的。</li>\n</ol>\n<h3> 成员的特点</h3>\n<ol>\n<li><strong>成员变量</strong></li>\n</ol>\n<p>接口中，成员变量只能是常量，默认修饰符为 <code>public static final</code>。</p>\n<ol start=\"2\">\n<li><strong>构造方法</strong></li>\n</ol>\n<p>接口中不存在构造方法。</p>\n<ol start=\"3\">\n<li><strong>成员方法</strong></li>\n</ol>\n<p><code>JDK 7</code> 之前，只能是抽象方法，其默认修饰符为 <code>public abstract</code>。<code>JDK 8</code> 时，能够定义有方法体的方法，<code>JDK 9</code> 中，有带来了可以定义私有方法的特性。</p>\n<h3> 默认方法</h3>\n<p>自 <code>JDK 8</code> 之后，就允许在接口中定义默认方法，但是需要使用关键字 <code>default</code> 来修饰，从而解决接口升级的问题。</p>\n<p>接口中的<strong>默认方法</strong>的定义格式为：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>使用默认方法时，需要注意：</p>\n<ul>\n<li>接口中的默认方法不是抽象方法，所以没有要求强制被重写。但如果要重写默认方法，重写时就需要去掉默认方法的关键字 <code>default</code>。</li>\n<li>默认方法中的权限空置房 <code>public</code> 可以省略不写，但关键字 <code>default</code> 不能省略。</li>\n<li>如果一个类实现了多个接口，而且着多个接口中还存在着重名的默认方法，那么该类就必须对重名的默认方法进行重写。</li>\n</ul>\n<p>以下是一个存在重名默认方法必须重写的实例。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 静态方法</h3>\n<p>除了默认方法，<code>JDK 8</code> 以后还可以在接口中定义静态方法，此时需要用关键字 <code>static</code> 修饰。</p>\n<p>接口中 <strong>静态方法</strong> 的定义格式为：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>在接口中使用静态方法时，需要注意：</p>\n<ul>\n<li>静态方法只能通过接口名调用，不能通过实现接口的类名或者对象名来调用。</li>\n<li>权限控制符 <code>public</code> 可以省略，但关键字 <code>static</code> 不能省略。</li>\n</ul>\n<p>以下是一个在接口中定义静态方法和调用接口中静态方法的实例。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 私有方法</h3>\n<p>除了上述的静态方法和默认方法之外，<code>JDK 9</code> 中又引入接口中定义私有方法的特性。</p>\n<p>其中，接口中定义私有方法的格式如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>两者的区别在于：静态的私有方法（带关键字 <code>static</code>）是为接口中的静态方法服务，而非静态的私有方法（不带关键字 <code>static</code>） 则是为接口中的默认方法服务。</p>\n<p>以下是在接口中定义私有方法的实例：</p>\n<ol>\n<li><strong>私有方法</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li><strong>静态私有方法</strong></li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 接口和类之间的关系</h3>\n<ol>\n<li><strong>类和类的关系</strong></li>\n</ol>\n<p>类与类之间只能存在继承关系，且只限于单继承，不能多继承，但是可以多层继承。</p>\n<ol start=\"2\">\n<li><strong>类和接口的关系</strong></li>\n</ol>\n<p>类和接口之间是实现关系，既可以单实现，也可以多实现，还能在继承一个类的同时实现多个接口。</p>\n<ol start=\"3\">\n<li><strong>接口和接口的关系</strong></li>\n</ol>\n<p>接口之间是继承关系，但不同于类和类之间的关系，接口之间既可以单继承，也可以多继承。</p>\n<h2> 内部类</h2>\n<h3> 定义</h3>\n<p>顾名思义，所谓内部类就是定义在类中的类。比如说在 <code>A</code> 类的内部定义了一个 <code>B</code> 类，那么我们就说 <code>B</code> 是内部类。其中 <code>B</code> 类表示的是 <code>A</code> 类的一部分，而且 <code>B</code> 类单独存在时没有任何意义。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 特点</h3>\n<p>如果一个类中定义了一个内部类，那么这个内部类就能够直接访问外部类的所有成员，包括私有成员。</p>\n<p>但是，如果一个外部类要访问内部类的成员，那么此时就必须创建对象。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 分类</h3>\n<p><code>Java</code> 中，内部类主要分为以下四种：</p>\n<ol>\n<li><strong>成员内部类</strong></li>\n<li><strong>静态内部类</strong></li>\n<li><strong>局部内部类</strong></li>\n<li><strong>匿名内部类</strong></li>\n</ol>\n<h4> 成员内部类</h4>\n<p>写在成员位置，属于外部类的成员，其中成员内部类也能够被常用的修饰符 <code>public、private、protected、static</code> 等所修饰。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>要想获取成员内部类对象，可以通过以下两种方式：</p>\n<ol>\n<li>在外部类中编写方法，然后对外提供内部类的对象。</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>直接创建，创建格式为：<code>外部类名.内部类名 对象名 = 外部类对象.内部类对象</code>。</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 静态内部类</h4>\n<p>静态内部类就是用关键字 <code>static</code> 修饰的内部类。静态内只能访问外部类中的静态变量和静态方法，如果要访问非静态的变量和方法就需要创建对象。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>创建静态内部类对象的格式为：<code>外部类名.内部类对象名 = new 外部类名.内部类名();</code></p>\n<p>调用非静态方法的格式：先创建对象，然后用对象调用。</p>\n<p>调用静态方法的格式：<code>外部类名.内部类名.方法名();</code></p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 局部内部类</h4>\n<p>如果一个类被定义在方法中，那么这个类就叫做局部内部类。外界是无法直接使用局部内部类，需要在方法内部创建对象并使用。同时，这个内部类既可以访问外部类的成员，也可以访问方法中的局部变量。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 匿名内部类</h4>\n<p>匿名内部类就是没有名字的内部类，也正因为名字，所以匿名内部类只能使用一次。而且使用匿名内部类还有个前提条件：必须继承一个父类或者实现一个接口。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-java line-numbers-mode\" data-ext=\"java\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "image": "https://zzdxy.github.io/zzdxy/zzdxy/contact/wechatpublic.svg =150x",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础"
      ]
    },
    {
      "title": "计算机软硬件",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20230920-cs-hard-soft.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20230920-cs-hard-soft.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 一、计算机组成 ⏳ 联系 想解锁更多知识？不妨关注我的微信公众号：村雨遥（id：JavaPark）。 扫一扫，探索另一个全新的世界。",
      "content_html": "<h1> 计算机软硬件</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n</div>\n<h2> 一、计算机组成</h2>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "image": "https://zzdxy.github.io/zzdxy/zzdxy/contact/wechatpublic.svg =150x",
      "date_published": "2023-09-25T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础系列"
      ]
    },
    {
      "title": "Java 简介",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20230921-intro.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20230921-intro.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 一、前言 本章节中，主要介绍 Java 中的主要特性和发展历史。以及作为新手，日常学习中对 Java 语言的误解。 二、主要特性 1. 简单性 语法类似于 C++ 语言，方便大多程序开发者能够简单地学习和实践。此外，抛弃了 C++ 中复杂的语言特性，如操作符重载、多继承、自动强类型转换等，降低了程序...",
      "content_html": "<h1> Java 简介</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n</div>\n<h2> 一、前言</h2>\n<p>本章节中，主要介绍 <code>Java</code> 中的主要特性和发展历史。以及作为新手，日常学习中对 <code>Java</code> 语言的误解。</p>\n<h2> 二、主要特性</h2>\n<h3> 1. 简单性</h3>\n<p>语法类似于 <code>C++</code> 语言，方便大多程序开发者能够简单地学习和实践。此外，抛弃了 <code>C++</code> 中复杂的语言特性，如操作符重载、多继承、自动强类型转换等，降低了程序开发者上手难度。<code>Java</code> 中移除了指针的概念，也提供了内容空间的自动分配与回收，使得内存管理也更加方便。</p>\n<h3> 2. 面向对象</h3>\n<p>面向对象是一种程序设计技术，将重点从过程集中到对象和对象的接口上。<code>Java</code> 提供类、接口和集成等面向对象的特性，抛弃了类之间复杂的多继承，仅支持单继承，但同时支持接口的多继承。</p>\n<h3> 3. 分布式</h3>\n<p><code>Java</code> 拥有丰富的类库，可处理 <code>HTTP</code> 和 <code>FTP</code> 类的协议请求。因此，<code>Java</code> 能够访问和打开网络上的资源，开发网络应用。</p>\n<h3> 4. 健壮性</h3>\n<p><code>Java</code> 中，没有了 <code>C++</code> 中类的多继承、指针等概念。同时它的强类型机制、异常处理机制、垃圾回收机制等都为 <code>Java</code> 程序的健壮性提供了重要保障。</p>\n<h3> 5. 安全性</h3>\n<p>开发网络应用时，安全性十分重要。利用 <code>Java</code> 的诸多安全特性能够构建防病毒、防篡改系统。</p>\n<h3> 6. 体系结构中立</h3>\n<p><code>Java</code> 源代码经编译后成为字节码，字节码能够在实现了 <code>Java</code> 虚拟机的各种系统中运行，无视系统差异。</p>\n<h3> 7. 可移植性</h3>\n<p>正是由于 <code>Java</code> 的体系结构中立，才有了适合分发和高度可移植的特点。</p>\n<h3> 8. 解释型</h3>\n<p><code>Java</code> 经编译后形成字节码文件，然后由虚拟机来解释这些字节码并执行，因此说 <code>Java</code> 是一门解释型语言。</p>\n<h3> 9. 高性能</h3>\n<p>相比于其他编译型编程语言，<code>Java</code> 性能毋庸置疑，同时，引入即时编译器，其性能已经和 <code>C++</code> 相差不大，在某些场景下甚至更胜一筹。</p>\n<h3> 10. 多线程</h3>\n<p>大量请求的场景下，单线程的交互响应和实时行为变得十分缓慢。随着摩尔定律的终结，多线程的引入，无疑会带来更加快速的交互响应和实时行为，大大提升体验。</p>\n<h3> 11. 动态性</h3>\n<p>随着各种应用场景的不断涌现，<code>Java</code> 也在动态适应变化的环境。<code>Java</code> 中所需的类既能动态加载到内存中，也能通过网络来载入，也更有利于软件的迭代升级。</p>\n<h2> 三、发展简史</h2>\n<p>1990 年代初，<code>Sun</code> 公司的詹姆斯·高斯林等人为了实现电视机、电话、闹钟等家用电器的控制和通信，开发了一套用于设置在家用电器等小型系统中的编程语言。在当时，这门语言被命名为 <code>Oka</code>。但由于市场需求不高，所以该计划被逐渐放弃。</p>\n<p>随着 1990 年代互联网的发展，<code>Sun</code> 公司发现 <code>Oka</code> 语言在互联网中的应用前景广泛。于是决定对 <code>Oka</code> 进行改造，并在 1995 年 5 月以 <code>Java</code> 的名义正式发布。</p>\n<p>随着互联网的迅猛发展，Java 也得以逐渐成为重要的网络编程语言，詹姆斯·高斯林也被大家公认为 <code>Java</code> 之父。</p>\n<p>到了 2009 年， <code>Sun</code> 公司被 <code>Oracle</code> 公司所收购，自此 <code>Java</code> 成为 <code>Oracle</code> 公司的一大产品直至今日。</p>\n<p>以下是截止到本文写作时间 <code>Java</code> 的历史年表，累计经过了 21 次主要版本更新，目前来到了 <code>JDK</code> 21。不过虽然 <code>Java</code> 已经经历了这么多版本的更新，但国内目前用的最多的应该还是 <code>JDK</code> 1.8 版本。而出于对稳定性的考虑，企业开发更喜欢 <code>LTS</code> 版本，这也是为什么至今 <code>JDK</code> 1.8 还占有如此高的市场比例。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">版本</th>\n<th style=\"text-align:left\">发布日期</th>\n<th style=\"text-align:left\">主要事件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">JDK Beta</td>\n<td style=\"text-align:left\">1995</td>\n<td style=\"text-align:left\"><code>Java</code> 语言发布，用 <code>Java</code> 实现的浏览器和 <code>Java Applet</code> 被大量应用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JDK 1.0</td>\n<td style=\"text-align:left\">1996 年 1 月</td>\n<td style=\"text-align:left\">奠定了 <code>JDK</code>、<code>JRE</code>、<code>JVM</code> 的体系结构</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JDK 1.1</td>\n<td style=\"text-align:left\">1997 年 2 月</td>\n<td style=\"text-align:left\">加入 <code>JIT</code>，提升 <code>JDK</code> 效率</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">J2SE 1.2</td>\n<td style=\"text-align:left\">1998 年 12 月</td>\n<td style=\"text-align:left\">确立 <code>J2SE</code>、<code>J2EE</code>、<code>J2ME</code> 产品结构</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">J2SE 1.3</td>\n<td style=\"text-align:left\">2000 年 5 月</td>\n<td style=\"text-align:left\">内置 <code>HotSpot JVM</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">J2SE 1.4</td>\n<td style=\"text-align:left\">2002 年 2 月</td>\n<td style=\"text-align:left\"><code>XML</code> 处理、断言、支持正则表达式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">J2SE 5.0</td>\n<td style=\"text-align:left\">2004 年 9 月</td>\n<td style=\"text-align:left\">静态导入、泛型、<code>for-each</code> 循环、自动拆，装箱、枚举、可变参数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JDK 6</td>\n<td style=\"text-align:left\">2006 年 12 月</td>\n<td style=\"text-align:left\">提供动态语言支持、同步垃圾回收</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JDK 7</td>\n<td style=\"text-align:left\">2011 年 7 月</td>\n<td style=\"text-align:left\">字符串的 <code>switch</code> 语句、多异常捕抓</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>JDK  8 (LTS)</strong></td>\n<td style=\"text-align:left\">2014 年 3 月</td>\n<td style=\"text-align:left\"><code>Lambda</code> 表达式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JDK 9</td>\n<td style=\"text-align:left\">2017 年 9 月</td>\n<td style=\"text-align:left\">轻量级 <code>json API</code>、垃圾收集机制更新</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JDK 10</td>\n<td style=\"text-align:left\">2018 年 3 月</td>\n<td style=\"text-align:left\">局部变量类型推断，<code>Java</code> 后续版本快速迭代更新</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>JDK 11 (LTS)</strong></td>\n<td style=\"text-align:left\">2018 年 9 月</td>\n<td style=\"text-align:left\">常用类增强，<code>JDK</code> 11 是继 <code>JDK</code> 8 之后的首个长期支持本版</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JDK 12</td>\n<td style=\"text-align:left\">2019 年 3 月</td>\n<td style=\"text-align:left\"><code>switch</code> 表达式增强</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JDK 13</td>\n<td style=\"text-align:left\">2019 年 9 月</td>\n<td style=\"text-align:left\">文本块支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JDK 14</td>\n<td style=\"text-align:left\">2020 年 3 月</td>\n<td style=\"text-align:left\"><code>instanceof</code> 支持模式匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JDK 15</td>\n<td style=\"text-align:left\">2020 年 9 月</td>\n<td style=\"text-align:left\"><code>EdDSA</code> 数字签名算法、 密封类、隐藏类</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JDK 16</td>\n<td style=\"text-align:left\">2021 年 3 月</td>\n<td style=\"text-align:left\">启用 <code>C++ 14</code> 语言特性、向量 <code>API</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>JDK 17 (LTS)</strong></td>\n<td style=\"text-align:left\">2021 年 9 月</td>\n<td style=\"text-align:left\">恢复总是严格的浮点语义、增强型伪随机数生成器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JDK 18</td>\n<td style=\"text-align:left\">2022 年 3 月</td>\n<td style=\"text-align:left\">默认 <code>UTF-8</code> 编码、代码片段、简单的网络服务器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JDK 19</td>\n<td style=\"text-align:left\">2022 年 9 月</td>\n<td style=\"text-align:left\">记录模式、外部函数与内存 <code>API</code>、<code>Linux</code>/<code>RISC-V</code> 移植、虚拟线程、结构化并发</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JDK 20</td>\n<td style=\"text-align:left\">2023 年 3 月</td>\n<td style=\"text-align:left\">1. 作用域值<br>2. 记录模式<br>3. <code>switch</code> 模式匹配<br>4. 外部函数和内存 <code>API</code><br>5. 虚拟线程<br>6. 结构化并发<br>7. 向量 <code>API</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>JDK 21（LTS）</strong></td>\n<td style=\"text-align:left\">2023 年 9 月</td>\n<td style=\"text-align:left\">1. 分代 <code>ZGC</code><br>2. 序列集合<br>3. 弃用 <code>Windows</code> 32 位 <code>x86</code><br>4. 密钥封装机制 <code>API</code><br>5. 字符串模板<br>6. 未命名类和实例主方法</td>\n</tr>\n</tbody>\n</table>\n<h2> 四、常见误解</h2>\n<h3> 1. JavaScript 是 Java 的子集</h3>\n<p>两个东西完全不沾边，<code>JavaScript</code> 是一种可以在网页中使用的脚本语言，而 <code>Java</code> 是完全的强类型语言，两者除了名字很像，其他方面可以说没有一点关系。</p>\n<h3> 2. Java 是解释型语言，所以效率较低</h3>\n<p>早期版本的 <code>Java</code> 的确是解释型的，但随着 <code>Java</code> 虚拟机中采用了即时编译器，其性能已经和 <code>C++</code> 相差不大，在某些场景下甚至更胜一筹。</p>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "image": "https://zzdxy.github.io/zzdxy/zzdxy/contact/wechatpublic.svg =150x",
      "date_published": "2023-09-25T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础系列"
      ]
    },
    {
      "title": "开发环境配置",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20230922-environment.html",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/20230922-environment.html",
      "summary": "共勉 不要哀求，学会争取。若是如此，终有所获。 原文 一、前言 学习完 Java 的主要特性、发展历程以及常见误解之后。本篇文章来学习，如何在当前主流操作系统下搭建 Java 开发环境，为接下来的开发做好准备。 二、Windows 环境配置 1. 安装 1. 首先进入 Oracle 官网 (https://www.oracle.com/java/tec...",
      "content_html": "<h1> 开发环境配置</h1>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">共勉</p>\n<p>不要哀求，学会争取。若是如此，终有所获。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">原文</p>\n</div>\n<h2> 一、前言</h2>\n<p>学习完 <code>Java</code> 的主要特性、发展历程以及常见误解之后。本篇文章来学习，如何在当前主流操作系统下搭建 <code>Java</code> 开发环境，为接下来的开发做好准备。</p>\n<h2> 二、Windows 环境配置</h2>\n<h3> 1. 安装</h3>\n<ol>\n<li>首先进入 <a href=\"https://www.oracle.com/java/technologies/javase-downloads.html\" target=\"_blank\" rel=\"noopener noreferrer\">Oracle 官网</a>，然后找到自己想要的 <code>JDK</code> 版本，这边以 <code>JDK</code> 11 为例。</li>\n</ol>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/jdk11.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li>点击 JDK Download 后，它会跳转到具体下载页面，然后根据自己的系统来进行选择，此处以 <code>Windows</code> 64 位系统为例。</li>\n</ol>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/download.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li>点击最后的链接后，它会让你同意协议，勾选同意，然后登陆你的 <code>Oracle</code> 账户即可开始下载，若是没有 <code>Oracle</code> 账户，点击下面的创建一个就可以了。</li>\n</ol>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/agree.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/login.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<ol start=\"4\">\n<li>下载完成后，进行安装即可，安装流程和我们平常安装软件的一样，就再赘述，需要注意的是要记住如下的安装路径，因为一般我们都不会安装到默认路径，所以一定要记住你所安装到的路径，这关系到后续的配置步骤。</li>\n</ol>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/install-path.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h3> 2. 配置</h3>\n<p>好了，经过上面的配置，我们的 JDK 就已经安装好了，但是这个使用你是用不了的，我们还需要进一步的配置；</p>\n<p>打开系统属性来进行环境变量配置，打开系统属性并进行配置的方式如下：</p>\n<ol>\n<li><strong>Windows + R</strong> 快捷键组合唤醒 Windows 运行窗口，然后输入 <code>sysdm.cpl</code>，紧接着回车即可，一般会打开如下界面，然后点击最上方的 <strong>高级</strong>；</li>\n</ol>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/1695686767330.webp\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li>点击高级后，就会打开如下界面，然后打开环境变量。</li>\n</ol>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/1695686806548.webp\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li>新建环境变量 <strong>JAVA_HOME</strong>，然后变量值填入刚才安装 JDK 的路径（刚才提醒过要记住！）。</li>\n</ol>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/java-home.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<ol start=\"4\">\n<li>编辑 <strong>Path</strong> 环境变量，然后新建一个变量值，填入如下内容：<code>%JAVA_HOME%\\bin</code>。</li>\n</ol>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/path-bin.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<ol start=\"5\">\n<li>各种确定，然后突出系统属性即可，到这一步，理论上我们的 JDK 就安装并配置成功了，接下来我们就去确认一下到底安装好了没有。</li>\n</ol>\n<h3> 3. 注意</h3>\n<p>自 <code>JDK</code> 11 之后，安装完成后就无需在配置环境变量，安装完成即可去验证是否安装成功。</p>\n<h3> 4. 验证</h3>\n<p>按照上述步骤操作完成之后，接下来就是验证了，一般我们可以通过如下三个命令来进行验证。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>打开命令控制台（<strong>Windows + R，然后输入 cmd 回车</strong>），然后输入如上三个命令，如果安装成功，一般是会出现如下内容的；</p>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/1695686544052.webp\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/1695686583197.webp\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/1695686620882.webp\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h2> 三、macOS 环境配置</h2>\n<h3> 1. 安装</h3>\n<ol>\n<li>首先去 <a href=\"https://www.oracle.com/java/technologies/javase-jdk11-downloads.html\" target=\"_blank\" rel=\"noopener noreferrer\">官网下载</a> 对应安装包。</li>\n</ol>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/macos-jdk.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li>\n<p>接受相关协议并登录下载。</p>\n</li>\n<li>\n<p>双击下载好的 <code>.dmg</code> 安装包，然后开始安装。</p>\n</li>\n</ol>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/install-macos.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<ol start=\"4\">\n<li>安装过程中会让你输入密码，也就是你本机的密码。</li>\n</ol>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/pwd.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<ol start=\"5\">\n<li>安装成功。</li>\n</ol>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/success.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h3> 2. 验证</h3>\n<p>不同于 <code>Windows</code>，<code>macOS</code> 下不用再手动配置环境变量了，它会给你自动配置好，我们只需要去验证即可；</p>\n<ol>\n<li>查看 <code>JDK</code> 版本。</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/macos-jdk-v.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<ol start=\"2\">\n<li>编译命令。</li>\n</ol>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/macos-javac.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<ol start=\"3\">\n<li>运行验证命令。</li>\n</ol>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/macos-java.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h2> 四、Linux 环境配置</h2>\n<h3> 1. 安装</h3>\n<ol>\n<li>先去 <a href=\"https://www.oracle.com/java/technologies/javase-downloads.html\" target=\"_blank\" rel=\"noopener noreferrer\">下载</a> 要安装的 <code>JDK</code> 版本，然后解压到本地存放的位置。</li>\n</ol>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/jdk-install.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/jdk-path.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h3> 2. 配置</h3>\n<p>打开配置文件 <code>/etc/profile</code>，然后加入如下内容；</p>\n<div class=\"language-profile line-numbers-mode\" data-ext=\"profile\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/jdk-profile.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/profile-jdk.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h3> 3. 验证</h3>\n<p>安装和配置之后，在终端中输入如下命令进行验证是否成功。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><img src=\"https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/verify.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h2> 五、安装目录详解</h2>\n<p>安装好 <code>JDK</code> 之后，打开安装路径，通常情况下会有如下的目录结构，而各个模块的功能则如下表所示。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>目录</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>bin</code></td>\n<td>用于存放各种工具命令，比如我们最常用的 <code>javac</code>、<code>java</code> 等</td>\n</tr>\n<tr>\n<td><code>lib</code></td>\n<td>存放工具的一些补充 <code>jar</code> 包</td>\n</tr>\n<tr>\n<td><code>conf</code></td>\n<td>存放相关配置文件</td>\n</tr>\n<tr>\n<td><code>include</code></td>\n<td>存放一些平台特定的头文件，比如 <code>Windows</code>、<code>macOS</code>、<code>Linux</code> 平台下这里的头文件是有所不同的</td>\n</tr>\n<tr>\n<td><code>legal</code></td>\n<td>存放各模块的授权文件</td>\n</tr>\n<tr>\n<td><code>jmods</code></td>\n<td>存放各种模块</td>\n</tr>\n<tr>\n<td><code>release</code></td>\n<td>版本发布内容以及版本信息</td>\n</tr>\n<tr>\n<td><code>README</code></td>\n<td><code>JDK</code> 信息</td>\n</tr>\n<tr>\n<td><code>LICENSE</code></td>\n<td>版权和签证相关的说明文档</td>\n</tr>\n</tbody>\n</table>\n<h2> 六、API 文档</h2>\n<p><code>API（Application Programming Interface）</code>，应用程序编程接口，是 <code>Java</code> 提供的基本编程接口。<code>Java</code> 语言提供了大量的基础类，为了给开发者提供相应的说明文档，于是便有了 <code>Java API</code> 文档。它类似于我们日常生活中的字典，如果遇到什么不认识的字，那么就可以去这里找。而对应到 <code>Java</code> 语言中，就是当我们遇到未使用过的基础类或方法，可以去 <code>Java API</code> 中寻找。</p>\n<p>为了方便大家，在这里贴出目前最常用的几个长期版本 <code>Java</code> 的在线阅读地址和离线下载地址，有需要的小伙伴可以自行去下载。</p>\n<p>温馨提示：这里无论是在线阅读还是离线下载后的文档，都是纯英文的。</p>\n<h3> 1. 在线阅读</h3>\n<ul>\n<li><strong><code>JDK 8 API</code></strong>：https://docs.oracle.com/javase/8/docs/api/index.html</li>\n<li><strong><code>JDK 11 API</code></strong>：https://docs.oracle.com/en/java/javase/11/docs/api/</li>\n<li><strong><code>JDK 17 API</code></strong>：https://docs.oracle.com/en/java/javase/17/docs/api/</li>\n<li><strong><code>JDK 21 API</code></strong>：https://docs.oracle.com/en/java/javase/21/docs/api/</li>\n</ul>\n<h3> 2. 离线下载</h3>\n<ul>\n<li><strong><code>JDK 8 API</code></strong>：https://www.oracle.com/java/technologies/javase-jdk8-doc-downloads.html</li>\n<li><strong><code>JDK 11 API</code></strong>：https://www.oracle.com/java/technologies/javase-jdk11-doc-downloads.html</li>\n<li><strong><code>JDK 17 API</code></strong>：https://www.oracle.com/java/technologies/javase-jdk17-doc-downloads.html</li>\n<li><strong><code>JDK 21 API</code></strong>：https://www.oracle.com/java/technologies/javase-jdk21-doc-downloads.html</li>\n</ul>\n<h2> ⏳ 联系</h2>\n<p>想解锁更多知识？不妨关注我的微信公众号：<strong>村雨遥（id：JavaPark）</strong>。</p>\n<p>扫一扫，探索另一个全新的世界。</p>\n<figure><img src=\"/contact/wechatpublic.svg\" alt=\"\" width=\"150\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n",
      "image": "https://jsd.cdn.zzko.cn/gh/cunyu1943/JavaPark@main/src/java-tutorial/javase-series/assets/20220702-jdk-install-and-hello-world/jdk11.png",
      "date_published": "2023-09-25T00:00:00.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": [
        "Java 基础系列"
      ]
    },
    {
      "title": "Java 基础",
      "url": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/",
      "id": "https://zzdxy.github.io/zzdxy/zzdxy/java-tutorial/javase/",
      "content_html": "",
      "date_published": "2025-03-31T04:12:26.000Z",
      "date_modified": "2025-03-31T04:12:26.000Z",
      "authors": [],
      "tags": []
    }
  ]
}